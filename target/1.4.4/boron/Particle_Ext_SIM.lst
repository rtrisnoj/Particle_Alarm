
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Particle_Ext_SIM/target/1.4.4/boron/Particle_Ext_SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000022b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001637c  2**0
                  CONTENTS
  4 .data         00000080  2003deb4  000d62d0  0000deb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008bc  2003df34  2003df34  0001df34  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6350  000d6350  00016350  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6378  000d6378  00016378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd59d  00000000  00000000  0001637c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f2be  00000000  00000000  000d3919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c9e9  00000000  00000000  000e2bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002458  00000000  00000000  000ff5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044d0  00000000  00000000  00101a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ffc2  00000000  00000000  00105ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025369  00000000  00000000  00135eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f5ac8  00000000  00000000  0015b213  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ca18  00000000  00000000  00250cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdb9 	bl	d5ba4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdbe 	bl	d5bba <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deb4 	.word	0x2003deb4
   d4048:	000d62d0 	.word	0x000d62d0
   d404c:	2003df34 	.word	0x2003df34
   d4050:	2003df34 	.word	0x2003df34
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fe0d 	bl	d4c78 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d62c8 	.word	0x000d62c8
   d4080:	000d628c 	.word	0x000d628c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b854 	b.w	d4130 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f85b 	bl	d4144 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bdbf 	b.w	d4c14 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbc3 	b.w	d4820 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbc9 	b.w	d4830 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbc7 	b.w	d4830 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
   d40b6:	3004      	adds	r0, #4
   d40b8:	f000 fc38 	bl	d492c <_ZN6StringD1Ev>
   d40bc:	4620      	mov	r0, r4
   d40be:	bd10      	pop	{r4, pc}

000d40c0 <_ZN14http_request_tD1Ev>:
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
  uint16_t timeout;
} http_request_t;
   d40c0:	b510      	push	{r4, lr}
   d40c2:	4604      	mov	r4, r0
   d40c4:	303c      	adds	r0, #60	; 0x3c
   d40c6:	f000 fc31 	bl	d492c <_ZN6StringD1Ev>
   d40ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40ce:	f000 fc2d 	bl	d492c <_ZN6StringD1Ev>
   d40d2:	4620      	mov	r0, r4
   d40d4:	f000 fc2a 	bl	d492c <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40dc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40de:	6984      	ldr	r4, [r0, #24]
   d40e0:	4b0a      	ldr	r3, [pc, #40]	; (d410c <_ZN9TCPClientD1Ev+0x30>)
   d40e2:	6003      	str	r3, [r0, #0]
   d40e4:	4605      	mov	r5, r0
   d40e6:	b17c      	cbz	r4, d4108 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40e8:	6863      	ldr	r3, [r4, #4]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	6063      	str	r3, [r4, #4]
   d40ee:	b95b      	cbnz	r3, d4108 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	689b      	ldr	r3, [r3, #8]
   d40f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f8:	68a3      	ldr	r3, [r4, #8]
   d40fa:	3b01      	subs	r3, #1
   d40fc:	60a3      	str	r3, [r4, #8]
   d40fe:	b91b      	cbnz	r3, d4108 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	4620      	mov	r0, r4
   d4104:	68db      	ldr	r3, [r3, #12]
   d4106:	4798      	blx	r3
   d4108:	4628      	mov	r0, r5
   d410a:	bd38      	pop	{r3, r4, r5, pc}
   d410c:	000d6094 	.word	0x000d6094

000d4110 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4110:	b510      	push	{r4, lr}
   d4112:	4604      	mov	r4, r0
   d4114:	f7ff ffe2 	bl	d40dc <_ZN9TCPClientD1Ev>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZN9TCPClientD0Ev>:
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff ffdc 	bl	d40dc <_ZN9TCPClientD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	211c      	movs	r1, #28
   d4128:	f001 fbdf 	bl	d58ea <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <setup>:
};

http_request_t request;
http_response_t response;

void setup() {
   d4130:	b508      	push	{r3, lr}
    Serial.begin(9600);
   d4132:	f000 fea5 	bl	d4e80 <_Z16_fetch_usbserialv>
   d4136:	f44f 5116 	mov.w	r1, #9600	; 0x2580
}
   d413a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

http_request_t request;
http_response_t response;

void setup() {
    Serial.begin(9600);
   d413e:	f000 be93 	b.w	d4e68 <_ZN9USBSerial5beginEl>
	...

000d4144 <loop>:
}

void loop() {
   d4144:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (nextTime > millis()) {
   d4146:	4e23      	ldr	r6, [pc, #140]	; (d41d4 <loop+0x90>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4148:	f000 f9fe 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
   d414c:	6833      	ldr	r3, [r6, #0]
   d414e:	4283      	cmp	r3, r0
   d4150:	d83d      	bhi.n	d41ce <loop+0x8a>
    }

    Serial.println();
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4152:	4c21      	ldr	r4, [pc, #132]	; (d41d8 <loop+0x94>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d4154:	4d21      	ldr	r5, [pc, #132]	; (d41dc <loop+0x98>)
void loop() {
    if (nextTime > millis()) {
        return;
    }

    Serial.println();
   d4156:	f000 fe93 	bl	d4e80 <_Z16_fetch_usbserialv>
   d415a:	f000 fc9a 	bl	d4a92 <_ZN5Print7printlnEv>
    Serial.println("Application>\tStart of Loop.");
   d415e:	f000 fe8f 	bl	d4e80 <_Z16_fetch_usbserialv>
   d4162:	491f      	ldr	r1, [pc, #124]	; (d41e0 <loop+0x9c>)
   d4164:	f000 fca1 	bl	d4aaa <_ZN5Print7printlnEPKc>
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4168:	491e      	ldr	r1, [pc, #120]	; (d41e4 <loop+0xa0>)
   d416a:	4620      	mov	r0, r4
   d416c:	f000 fc38 	bl	d49e0 <_ZN6StringaSEPKc>
    request.port = 80;
   d4170:	2350      	movs	r3, #80	; 0x50
    request.path = "/ParticleDirect.aspx";
   d4172:	491d      	ldr	r1, [pc, #116]	; (d41e8 <loop+0xa4>)

    Serial.println();
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
    request.port = 80;
   d4174:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = "/ParticleDirect.aspx";
   d4176:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d417a:	f000 fc31 	bl	d49e0 <_ZN6StringaSEPKc>

    // The library also supports sending a body with your request:
    request.body = "RYANTRISNOJOYO";
   d417e:	491b      	ldr	r1, [pc, #108]	; (d41ec <loop+0xa8>)
   d4180:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4184:	f000 fc2c 	bl	d49e0 <_ZN6StringaSEPKc>
   d4188:	4b19      	ldr	r3, [pc, #100]	; (d41f0 <loop+0xac>)
   d418a:	9300      	str	r3, [sp, #0]
   d418c:	462a      	mov	r2, r5
   d418e:	4b19      	ldr	r3, [pc, #100]	; (d41f4 <loop+0xb0>)
   d4190:	4819      	ldr	r0, [pc, #100]	; (d41f8 <loop+0xb4>)
   d4192:	4621      	mov	r1, r4
   d4194:	f000 f8a0 	bl	d42d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    Serial.print("Application>\tResponse status: ");
   d4198:	f000 fe72 	bl	d4e80 <_Z16_fetch_usbserialv>
   d419c:	4917      	ldr	r1, [pc, #92]	; (d41fc <loop+0xb8>)
   d419e:	f000 fc71 	bl	d4a84 <_ZN5Print5printEPKc>
    Serial.println(response.status);
   d41a2:	f000 fe6d 	bl	d4e80 <_Z16_fetch_usbserialv>
   d41a6:	220a      	movs	r2, #10
   d41a8:	6829      	ldr	r1, [r5, #0]
   d41aa:	f000 fcd9 	bl	d4b60 <_ZN5Print7printlnEii>

    Serial.print("Application>\tHTTP Response Body: ");
   d41ae:	f000 fe67 	bl	d4e80 <_Z16_fetch_usbserialv>
   d41b2:	4913      	ldr	r1, [pc, #76]	; (d4200 <loop+0xbc>)
   d41b4:	f000 fc66 	bl	d4a84 <_ZN5Print5printEPKc>
    Serial.println(response.body);
   d41b8:	f000 fe62 	bl	d4e80 <_Z16_fetch_usbserialv>
   d41bc:	6869      	ldr	r1, [r5, #4]
   d41be:	f000 fc74 	bl	d4aaa <_ZN5Print7printlnEPKc>
   d41c2:	f000 f9c1 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>

    nextTime = millis() + 10000;
   d41c6:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
   d41ca:	3010      	adds	r0, #16
   d41cc:	6030      	str	r0, [r6, #0]
}
   d41ce:	b002      	add	sp, #8
   d41d0:	bd70      	pop	{r4, r5, r6, pc}
   d41d2:	bf00      	nop
   d41d4:	2003deb4 	.word	0x2003deb4
   d41d8:	2003e368 	.word	0x2003e368
   d41dc:	2003e354 	.word	0x2003e354
   d41e0:	000d5d74 	.word	0x000d5d74
   d41e4:	000d5d90 	.word	0x000d5d90
   d41e8:	000d5d9f 	.word	0x000d5d9f
   d41ec:	000d5db4 	.word	0x000d5db4
   d41f0:	000d5dc3 	.word	0x000d5dc3
   d41f4:	2003deb8 	.word	0x2003deb8
   d41f8:	2003df38 	.word	0x2003df38
   d41fc:	000d5dc7 	.word	0x000d5dc7
   d4200:	000d5de6 	.word	0x000d5de6

000d4204 <_GLOBAL__sub_I_nextTime>:
   d4204:	b570      	push	{r4, r5, r6, lr}

/**
* Declaring the variables.
*/
unsigned int nextTime = 5000;    // Next time to contact the server
HttpClient http;
   d4206:	4c17      	ldr	r4, [pc, #92]	; (d4264 <_GLOBAL__sub_I_nextTime+0x60>)
   d4208:	4e17      	ldr	r6, [pc, #92]	; (d4268 <_GLOBAL__sub_I_nextTime+0x64>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d420a:	4d18      	ldr	r5, [pc, #96]	; (d426c <_GLOBAL__sub_I_nextTime+0x68>)
   d420c:	4620      	mov	r0, r4
   d420e:	f000 f839 	bl	d4284 <_ZN10HttpClientC1Ev>
   d4212:	4620      	mov	r0, r4
   d4214:	4c16      	ldr	r4, [pc, #88]	; (d4270 <_GLOBAL__sub_I_nextTime+0x6c>)
   d4216:	4917      	ldr	r1, [pc, #92]	; (d4274 <_GLOBAL__sub_I_nextTime+0x70>)
   d4218:	4632      	mov	r2, r6
   d421a:	f001 fb61 	bl	d58e0 <__aeabi_atexit>
   d421e:	4629      	mov	r1, r5
   d4220:	4620      	mov	r0, r4
   d4222:	f000 fbca 	bl	d49ba <_ZN6StringC1EPK19__FlashStringHelper>
   d4226:	f104 0010 	add.w	r0, r4, #16
   d422a:	f000 fd79 	bl	d4d20 <_ZN9IPAddressC1Ev>
   d422e:	4629      	mov	r1, r5
   d4230:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4234:	f000 fbc1 	bl	d49ba <_ZN6StringC1EPK19__FlashStringHelper>
   d4238:	4629      	mov	r1, r5
   d423a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d423e:	f000 fbbc 	bl	d49ba <_ZN6StringC1EPK19__FlashStringHelper>
   // { "Accept" , "application/json" },
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
   d4242:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4244:	4c0c      	ldr	r4, [pc, #48]	; (d4278 <_GLOBAL__sub_I_nextTime+0x74>)
   d4246:	490d      	ldr	r1, [pc, #52]	; (d427c <_GLOBAL__sub_I_nextTime+0x78>)
   d4248:	4632      	mov	r2, r6
   d424a:	f001 fb49 	bl	d58e0 <__aeabi_atexit>
   d424e:	4629      	mov	r1, r5
   d4250:	1d20      	adds	r0, r4, #4
   d4252:	f000 fbb2 	bl	d49ba <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d4256:	4632      	mov	r2, r6
   d4258:	4620      	mov	r0, r4
   d425a:	4909      	ldr	r1, [pc, #36]	; (d4280 <_GLOBAL__sub_I_nextTime+0x7c>)

    Serial.print("Application>\tHTTP Response Body: ");
    Serial.println(response.body);

    nextTime = millis() + 10000;
}
   d425c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
http_response_t response;
   d4260:	f001 bb3e 	b.w	d58e0 <__aeabi_atexit>
   d4264:	2003df38 	.word	0x2003df38
   d4268:	2003df34 	.word	0x2003df34
   d426c:	000d5e1e 	.word	0x000d5e1e
   d4270:	2003e368 	.word	0x2003e368
   d4274:	000d4111 	.word	0x000d4111
   d4278:	2003e354 	.word	0x2003e354
   d427c:	000d40c1 	.word	0x000d40c1
   d4280:	000d40b3 	.word	0x000d40b3

000d4284 <_ZN10HttpClientC1Ev>:
static const uint16_t DEFAULT_TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4284:	b510      	push	{r4, lr}
   d4286:	4604      	mov	r4, r0
   d4288:	f001 fa46 	bl	d5718 <_ZN9TCPClientC1Ev>
{

}
   d428c:	4620      	mov	r0, r4
   d428e:	bd10      	pop	{r4, pc}

000d4290 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4290:	b538      	push	{r3, r4, r5, lr}
   d4292:	4604      	mov	r4, r0
   d4294:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4296:	f000 fbf5 	bl	d4a84 <_ZN5Print5printEPKc>
    client.print(": ");
   d429a:	4905      	ldr	r1, [pc, #20]	; (d42b0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d429c:	4620      	mov	r0, r4
   d429e:	f000 fbf1 	bl	d4a84 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d42a2:	4629      	mov	r1, r5
   d42a4:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d42a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d42aa:	f000 bbfe 	b.w	d4aaa <_ZN5Print7printlnEPKc>
   d42ae:	bf00      	nop
   d42b0:	000d5f16 	.word	0x000d5f16

000d42b4 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d42b4:	b538      	push	{r3, r4, r5, lr}
   d42b6:	4604      	mov	r4, r0
   d42b8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d42ba:	f000 fbe3 	bl	d4a84 <_ZN5Print5printEPKc>
    client.print(": ");
   d42be:	4905      	ldr	r1, [pc, #20]	; (d42d4 <_ZN10HttpClient10sendHeaderEPKci+0x20>)
   d42c0:	4620      	mov	r0, r4
   d42c2:	f000 fbdf 	bl	d4a84 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d42c6:	4629      	mov	r1, r5
   d42c8:	4620      	mov	r0, r4
   d42ca:	220a      	movs	r2, #10
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d42cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d42d0:	f000 bc46 	b.w	d4b60 <_ZN5Print7printlnEii>
   d42d4:	000d5f16 	.word	0x000d5f16

000d42d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d42d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42dc:	460d      	mov	r5, r1
   d42de:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d42e0:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d42e4:	b089      	sub	sp, #36	; 0x24
   d42e6:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d42e8:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d42ea:	2100      	movs	r1, #0
   d42ec:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d42ee:	4692      	mov	sl, r2
   d42f0:	f000 fb87 	bl	d4a02 <_ZNK6String6equalsEPKc>
   d42f4:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d42f8:	b960      	cbnz	r0, d4314 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d42fa:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d42fc:	f1bc 0f00 	cmp.w	ip, #0
   d4300:	d002      	beq.n	d4308 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d4302:	fa1f f28c 	uxth.w	r2, ip
   d4306:	e000      	b.n	d430a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d4308:	2250      	movs	r2, #80	; 0x50
   d430a:	2300      	movs	r3, #0
   d430c:	4620      	mov	r0, r4
   d430e:	f001 f853 	bl	d53b8 <_ZN9TCPClient7connectEPKctm>
   d4312:	e011      	b.n	d4338 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x60>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4314:	4b70      	ldr	r3, [pc, #448]	; (d44d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x200>)
   d4316:	9302      	str	r3, [sp, #8]
   d4318:	f105 0e14 	add.w	lr, r5, #20
   d431c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   d4320:	af03      	add	r7, sp, #12
   d4322:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   d4324:	f8de 3000 	ldr.w	r3, [lr]
   d4328:	703b      	strb	r3, [r7, #0]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d432a:	fa1f f28c 	uxth.w	r2, ip
   d432e:	2300      	movs	r3, #0
   d4330:	a902      	add	r1, sp, #8
   d4332:	4620      	mov	r0, r4
   d4334:	f001 f8c2 	bl	d54bc <_ZN9TCPClient7connectE9IPAddresstm>
   d4338:	3000      	adds	r0, #0
   d433a:	bf18      	it	ne
   d433c:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d433e:	b918      	cbnz	r0, d4348 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x70>
        client.stop();
   d4340:	4620      	mov	r0, r4
   d4342:	f001 f935 	bl	d55b0 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d4346:	e0c3      	b.n	d44d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4348:	9912      	ldr	r1, [sp, #72]	; 0x48
   d434a:	4620      	mov	r0, r4
   d434c:	f000 fb9a 	bl	d4a84 <_ZN5Print5printEPKc>
    client.print(" ");
   d4350:	4962      	ldr	r1, [pc, #392]	; (d44dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>)
   d4352:	4620      	mov	r0, r4
   d4354:	f000 fb96 	bl	d4a84 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4358:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d435a:	4620      	mov	r0, r4
   d435c:	f000 fb92 	bl	d4a84 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4360:	495f      	ldr	r1, [pc, #380]	; (d44e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>)
   d4362:	4620      	mov	r0, r4
   d4364:	f000 fb8e 	bl	d4a84 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4368:	495e      	ldr	r1, [pc, #376]	; (d44e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>)
   d436a:	4a5f      	ldr	r2, [pc, #380]	; (d44e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d436c:	4620      	mov	r0, r4
   d436e:	f7ff ff8f 	bl	d4290 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4372:	2100      	movs	r1, #0
   d4374:	4628      	mov	r0, r5
   d4376:	f000 fb44 	bl	d4a02 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d437a:	b920      	cbnz	r0, d4386 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xae>
        sendHeader("HOST", aRequest.hostname.c_str());
   d437c:	682a      	ldr	r2, [r5, #0]
   d437e:	495b      	ldr	r1, [pc, #364]	; (d44ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d4380:	4620      	mov	r0, r4
   d4382:	f7ff ff85 	bl	d4290 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d4386:	f105 073c 	add.w	r7, r5, #60	; 0x3c
   d438a:	2100      	movs	r1, #0
   d438c:	4638      	mov	r0, r7
   d438e:	f000 fb38 	bl	d4a02 <_ZNK6String6equalsEPKc>
   d4392:	b908      	cbnz	r0, d4398 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc0>
        sendHeader("Content-Length", (aRequest.body).length());
   d4394:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d4396:	e005      	b.n	d43a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xcc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4398:	4955      	ldr	r1, [pc, #340]	; (d44f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d439a:	9812      	ldr	r0, [sp, #72]	; 0x48
   d439c:	f001 fc3e 	bl	d5c1c <strcmp>
   d43a0:	4602      	mov	r2, r0
   d43a2:	b918      	cbnz	r0, d43ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd4>
        sendHeader("Content-Length", 0);
   d43a4:	4953      	ldr	r1, [pc, #332]	; (d44f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d43a6:	4620      	mov	r0, r4
   d43a8:	f7ff ff84 	bl	d42b4 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d43ac:	b15e      	cbz	r6, d43c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d43ae:	6831      	ldr	r1, [r6, #0]
   d43b0:	b149      	cbz	r1, d43c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        {
            if (headers[i].value != NULL) {
   d43b2:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d43b4:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d43b6:	b112      	cbz	r2, d43be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe6>
                sendHeader(headers[i].header, headers[i].value);
   d43b8:	f7ff ff6a 	bl	d4290 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d43bc:	e001      	b.n	d43c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xea>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d43be:	f000 fb74 	bl	d4aaa <_ZN5Print7printlnEPKc>
   d43c2:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d43c4:	e7f3      	b.n	d43ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd6>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d43c6:	4620      	mov	r0, r4
   d43c8:	f000 fb63 	bl	d4a92 <_ZN5Print7printlnEv>
    client.flush();
   d43cc:	4620      	mov	r0, r4
   d43ce:	f000 ff1b 	bl	d5208 <_ZN9TCPClient5flushEv>
   d43d2:	2100      	movs	r1, #0
   d43d4:	4638      	mov	r0, r7
   d43d6:	f000 fb14 	bl	d4a02 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d43da:	b918      	cbnz	r0, d43e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x10c>
        client.println(aRequest.body);
   d43dc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d43de:	4620      	mov	r0, r4
   d43e0:	f000 fb63 	bl	d4aaa <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d43e4:	f104 0b1c 	add.w	fp, r4, #28
   d43e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d43ec:	2100      	movs	r1, #0
   d43ee:	4658      	mov	r0, fp
   d43f0:	f001 fbe3 	bl	d5bba <memset>
   d43f4:	f000 f8a8 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
   d43f8:	9000      	str	r0, [sp, #0]
   d43fa:	f000 f8a5 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d43fe:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
   d4402:	f241 3388 	movw	r3, #5000	; 0x1388
    char lastChar = 0;
   d4406:	2600      	movs	r6, #0
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4408:	f1b8 0f00 	cmp.w	r8, #0
   d440c:	bf08      	it	eq
   d440e:	4698      	moveq	r8, r3
    char lastChar = 0;
    bool inHeaders = true;
   d4410:	f04f 0901 	mov.w	r9, #1
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d4414:	4635      	mov	r5, r6
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d4416:	4620      	mov	r0, r4
   d4418:	f001 f8e2 	bl	d55e0 <_ZN9TCPClient9availableEv>
   d441c:	b3c0      	cbz	r0, d4490 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b8>
            char c = client.read();
   d441e:	4620      	mov	r0, r4
   d4420:	f000 ff87 	bl	d5332 <_ZN9TCPClient4readEv>
   d4424:	b2c7      	uxtb	r7, r0
   d4426:	f000 f88f 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
   d442a:	9000      	str	r0, [sp, #0]
                #endif

                break;
            }

            if (inHeaders) {
   d442c:	f1b9 0f00 	cmp.w	r9, #0
   d4430:	d018      	beq.n	d4464 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
                if ((c == '\n') && (lastChar == '\n')) {
   d4432:	2f0a      	cmp	r7, #10
   d4434:	d111      	bne.n	d445a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
   d4436:	2e0a      	cmp	r6, #10
   d4438:	d113      	bne.n	d4462 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18a>
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d443a:	f104 0025 	add.w	r0, r4, #37	; 0x25
   d443e:	f001 fb9f 	bl	d5b80 <atoi>

                    memset(&buffer[0], 0, sizeof(buffer));
                    bufferPosition = 0;
                    inHeaders = false;
   d4442:	f04f 0900 	mov.w	r9, #0
            }

            if (inHeaders) {
                if ((c == '\n') && (lastChar == '\n')) {
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4446:	f8ca 0000 	str.w	r0, [sl]

                    memset(&buffer[0], 0, sizeof(buffer));
   d444a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d444e:	2100      	movs	r1, #0
   d4450:	4658      	mov	r0, fp
   d4452:	f001 fbb2 	bl	d5bba <memset>
                    bufferPosition = 0;
   d4456:	464d      	mov	r5, r9
                    #ifdef LOGGING
                    Serial.print("\r\nHttpClient>\tEnd of HTTP Headers (");
                    Serial.print(aResponse.status);
                    Serial.println(")");
                    #endif
                    continue;
   d4458:	e7dd      	b.n	d4416 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
                } else if (c != '\r') {
   d445a:	2f0d      	cmp	r7, #13
   d445c:	bf18      	it	ne
   d445e:	463e      	movne	r6, r7
   d4460:	e000      	b.n	d4464 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d4462:	463e      	mov	r6, r7
                    lastChar = c;
                }
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d4464:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4468:	429d      	cmp	r5, r3
   d446a:	d802      	bhi.n	d4472 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19a>
                buffer[bufferPosition] = c;
   d446c:	1963      	adds	r3, r4, r5
   d446e:	771f      	strb	r7, [r3, #28]
   d4470:	e00c      	b.n	d448c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4472:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d4476:	429d      	cmp	r5, r3
   d4478:	d108      	bne.n	d448c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d447a:	f04f 0300 	mov.w	r3, #0
   d447e:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d4482:	4620      	mov	r0, r4
   d4484:	f001 f894 	bl	d55b0 <_ZN9TCPClient4stopEv>
                error = true;
   d4488:	2701      	movs	r7, #1

                #ifdef LOGGING
                Serial.println("\r\nHttpClient>\tError: Response body larger than buffer.");
                #endif
                break;
   d448a:	e002      	b.n	d4492 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ba>
            }
            bufferPosition++;
   d448c:	3501      	adds	r5, #1
   d448e:	e7c2      	b.n	d4416 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
   d4490:	4607      	mov	r7, r0
   d4492:	f000 f859 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > actualTimeout;
   d4496:	9b00      	ldr	r3, [sp, #0]
   d4498:	1ac3      	subs	r3, r0, r3
   d449a:	9301      	str	r3, [sp, #4]

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d449c:	b927      	cbnz	r7, d44a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
   d449e:	4543      	cmp	r3, r8
   d44a0:	d802      	bhi.n	d44a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
            delay(200);
   d44a2:	20c8      	movs	r0, #200	; 0xc8
   d44a4:	f000 fb78 	bl	d4b98 <delay>
        }
    } while (client.connected() && !timeout && !error);
   d44a8:	4620      	mov	r0, r4
   d44aa:	f000 feae 	bl	d520a <_ZN9TCPClient9connectedEv>
   d44ae:	b120      	cbz	r0, d44ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d44b0:	9b01      	ldr	r3, [sp, #4]
   d44b2:	4543      	cmp	r3, r8
   d44b4:	d801      	bhi.n	d44ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d44b6:	2f00      	cmp	r7, #0
   d44b8:	d0ad      	beq.n	d4416 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d44ba:	4620      	mov	r0, r4
   d44bc:	f001 f878 	bl	d55b0 <_ZN9TCPClient4stopEv>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(aResponse.status);
    #endif

    if (inHeaders) {
   d44c0:	f1b9 0f00 	cmp.w	r9, #0
   d44c4:	d104      	bne.n	d44d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = buffer;
   d44c6:	4659      	mov	r1, fp
   d44c8:	f10a 0004 	add.w	r0, sl, #4
   d44cc:	f000 fa88 	bl	d49e0 <_ZN6StringaSEPKc>
}
   d44d0:	b009      	add	sp, #36	; 0x24
   d44d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44d6:	bf00      	nop
   d44d8:	000d5f9c 	.word	0x000d5f9c
   d44dc:	000d5f12 	.word	0x000d5f12
   d44e0:	000d5e13 	.word	0x000d5e13
   d44e4:	000d5e25 	.word	0x000d5e25
   d44e8:	000d5e1f 	.word	0x000d5e1f
   d44ec:	000d5e30 	.word	0x000d5e30
   d44f0:	000d5e44 	.word	0x000d5e44
   d44f4:	000d5e35 	.word	0x000d5e35

000d44f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <netdb_freeaddrinfo+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	689b      	ldr	r3, [r3, #8]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030268 	.word	0x00030268

000d4508 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <netdb_getaddrinfo+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	68db      	ldr	r3, [r3, #12]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030268 	.word	0x00030268

000d4518 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_SPI_Init+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	69db      	ldr	r3, [r3, #28]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030230 	.word	0x00030230

000d4528 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <if_index_to_name+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003026c 	.word	0x0003026c

000d4538 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_RNG_GetRandomNumber+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	685b      	ldr	r3, [r3, #4]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030218 	.word	0x00030218

000d4548 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	695b      	ldr	r3, [r3, #20]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030218 	.word	0x00030218

000d4558 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <os_thread_is_current+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	689b      	ldr	r3, [r3, #8]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030248 	.word	0x00030248

000d4568 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <os_thread_join+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	691b      	ldr	r3, [r3, #16]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030248 	.word	0x00030248

000d4578 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <os_thread_cleanup+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	695b      	ldr	r3, [r3, #20]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030248 	.word	0x00030248

000d4588 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <os_mutex_create+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030248 	.word	0x00030248

000d4598 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <os_mutex_recursive_create+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030248 	.word	0x00030248

000d45a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <inet_inet_ntop+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	695b      	ldr	r3, [r3, #20]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030264 	.word	0x00030264

000d45b8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <inet_htonl+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6a1b      	ldr	r3, [r3, #32]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030264 	.word	0x00030264

000d45c8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <inet_htons+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030264 	.word	0x00030264

000d45d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_USART_Init+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	681b      	ldr	r3, [r3, #0]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USART_Write_Data+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	68db      	ldr	r3, [r3, #12]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USART_Available_Data+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	691b      	ldr	r3, [r3, #16]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003023c 	.word	0x0003023c

000d4608 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USART_Read_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	695b      	ldr	r3, [r3, #20]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Peek_Data+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	699b      	ldr	r3, [r3, #24]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USART_Flush_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	69db      	ldr	r3, [r3, #28]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USART_Available_Data_For_Write+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <sock_setsockopt+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	699b      	ldr	r3, [r3, #24]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030238 	.word	0x00030238

000d4658 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <sock_close+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	69db      	ldr	r3, [r3, #28]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030238 	.word	0x00030238

000d4668 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <sock_connect+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a1b      	ldr	r3, [r3, #32]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030238 	.word	0x00030238

000d4678 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <sock_recv+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030238 	.word	0x00030238

000d4688 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <sock_send+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030238 	.word	0x00030238

000d4698 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <sock_socket+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030238 	.word	0x00030238

000d46a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USB_USART_Init+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	681b      	ldr	r3, [r3, #0]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003024c 	.word	0x0003024c

000d46b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USB_USART_Begin+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	685b      	ldr	r3, [r3, #4]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003024c 	.word	0x0003024c

000d46c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USB_USART_Available_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	691b      	ldr	r3, [r3, #16]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003024c 	.word	0x0003024c

000d46d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	695b      	ldr	r3, [r3, #20]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003024c 	.word	0x0003024c

000d46e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USB_USART_Receive_Data+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	699b      	ldr	r3, [r3, #24]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003024c 	.word	0x0003024c

000d46f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USB_USART_Send_Data+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	69db      	ldr	r3, [r3, #28]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003024c 	.word	0x0003024c

000d4708 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_USB_USART_Flush_Data+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6a1b      	ldr	r3, [r3, #32]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003024c 	.word	0x0003024c

000d4718 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <log_message+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030260 	.word	0x00030260

000d4728 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <set_system_mode+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	685b      	ldr	r3, [r3, #4]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030220 	.word	0x00030220

000d4738 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <system_delay_ms+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	695b      	ldr	r3, [r3, #20]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030220 	.word	0x00030220

000d4748 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b03      	ldr	r3, [pc, #12]	; (d4758 <system_ctrl_set_app_request_handler+0x10>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4752:	9301      	str	r3, [sp, #4]
   d4754:	bd08      	pop	{r3, pc}
   d4756:	0000      	.short	0x0000
   d4758:	00030220 	.word	0x00030220

000d475c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b03      	ldr	r3, [pc, #12]	; (d476c <system_ctrl_set_result+0x10>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4766:	9301      	str	r3, [sp, #4]
   d4768:	bd08      	pop	{r3, pc}
   d476a:	0000      	.short	0x0000
   d476c:	00030220 	.word	0x00030220

000d4770 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_connect+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_connecting+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	689b      	ldr	r3, [r3, #8]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_disconnect+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	68db      	ldr	r3, [r3, #12]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_ready+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	691b      	ldr	r3, [r3, #16]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_on+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	695b      	ldr	r3, [r3, #20]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_off+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_listen+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_listening+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a1b      	ldr	r3, [r3, #32]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_set_listen_timeout+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_get_listen_timeout+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030244 	.word	0x00030244

000d4820 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <malloc+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	681b      	ldr	r3, [r3, #0]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <free+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	685b      	ldr	r3, [r3, #4]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003021c 	.word	0x0003021c

000d4840 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <realloc+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	689b      	ldr	r3, [r3, #8]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003021c 	.word	0x0003021c

000d4850 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <__errno+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003021c 	.word	0x0003021c

000d4860 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4860:	2200      	movs	r2, #0
   d4862:	4611      	mov	r1, r2
   d4864:	6840      	ldr	r0, [r0, #4]
   d4866:	f7ff bfbb 	b.w	d47e0 <network_listening>

000d486a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d486a:	2200      	movs	r2, #0
   d486c:	4611      	mov	r1, r2
   d486e:	6840      	ldr	r0, [r0, #4]
   d4870:	f7ff bfc6 	b.w	d4800 <network_get_listen_timeout>

000d4874 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4874:	2200      	movs	r2, #0
   d4876:	6840      	ldr	r0, [r0, #4]
   d4878:	f7ff bfba 	b.w	d47f0 <network_set_listen_timeout>

000d487c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d487c:	2200      	movs	r2, #0
   d487e:	f081 0101 	eor.w	r1, r1, #1
   d4882:	6840      	ldr	r0, [r0, #4]
   d4884:	f7ff bfa4 	b.w	d47d0 <network_listen>

000d4888 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4888:	2300      	movs	r3, #0
   d488a:	461a      	mov	r2, r3
   d488c:	4619      	mov	r1, r3
   d488e:	6840      	ldr	r0, [r0, #4]
   d4890:	f7ff bf96 	b.w	d47c0 <network_off>

000d4894 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4894:	2300      	movs	r3, #0
   d4896:	461a      	mov	r2, r3
   d4898:	4619      	mov	r1, r3
   d489a:	6840      	ldr	r0, [r0, #4]
   d489c:	f7ff bf88 	b.w	d47b0 <network_on>

000d48a0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48a0:	2200      	movs	r2, #0
   d48a2:	4611      	mov	r1, r2
   d48a4:	6840      	ldr	r0, [r0, #4]
   d48a6:	f7ff bf7b 	b.w	d47a0 <network_ready>

000d48aa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48aa:	2200      	movs	r2, #0
   d48ac:	4611      	mov	r1, r2
   d48ae:	6840      	ldr	r0, [r0, #4]
   d48b0:	f7ff bf66 	b.w	d4780 <network_connecting>

000d48b4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48b4:	2200      	movs	r2, #0
   d48b6:	2102      	movs	r1, #2
   d48b8:	6840      	ldr	r0, [r0, #4]
   d48ba:	f7ff bf69 	b.w	d4790 <network_disconnect>

000d48be <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48be:	2300      	movs	r3, #0
   d48c0:	461a      	mov	r2, r3
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff bf54 	b.w	d4770 <network_connect>

000d48c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48c8:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d48ca:	2203      	movs	r2, #3
   d48cc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d48ce:	4a02      	ldr	r2, [pc, #8]	; (d48d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d48d0:	601a      	str	r2, [r3, #0]
   d48d2:	4770      	bx	lr
   d48d4:	2003e3b8 	.word	0x2003e3b8
   d48d8:	000d5e54 	.word	0x000d5e54

000d48dc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d48dc:	4770      	bx	lr

000d48de <_ZN8SPIClassD0Ev>:
   d48de:	b510      	push	{r4, lr}
   d48e0:	2110      	movs	r1, #16
   d48e2:	4604      	mov	r4, r0
   d48e4:	f001 f801 	bl	d58ea <_ZdlPvj>
   d48e8:	4620      	mov	r0, r4
   d48ea:	bd10      	pop	{r4, pc}

000d48ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d48ec:	b570      	push	{r4, r5, r6, lr}
   d48ee:	4b08      	ldr	r3, [pc, #32]	; (d4910 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d48f0:	6003      	str	r3, [r0, #0]
   d48f2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d48f4:	2500      	movs	r5, #0
   d48f6:	460e      	mov	r6, r1
   d48f8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d48fc:	f7ff fe44 	bl	d4588 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4900:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4902:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4904:	f7ff fe08 	bl	d4518 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4908:	60a5      	str	r5, [r4, #8]
}
   d490a:	4620      	mov	r0, r4
   d490c:	bd70      	pop	{r4, r5, r6, pc}
   d490e:	bf00      	nop
   d4910:	000d5e88 	.word	0x000d5e88

000d4914 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4914:	4b04      	ldr	r3, [pc, #16]	; (d4928 <_GLOBAL__sub_I_System+0x14>)
   d4916:	2000      	movs	r0, #0
   d4918:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d491c:	7018      	strb	r0, [r3, #0]
   d491e:	8058      	strh	r0, [r3, #2]
   d4920:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4922:	f7ff bf01 	b.w	d4728 <set_system_mode>
   d4926:	bf00      	nop
   d4928:	2003e3c0 	.word	0x2003e3c0

000d492c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d492c:	b510      	push	{r4, lr}
   d492e:	4604      	mov	r4, r0
{
	free(buffer);
   d4930:	6800      	ldr	r0, [r0, #0]
   d4932:	f7ff ff7d 	bl	d4830 <free>
}
   d4936:	4620      	mov	r0, r4
   d4938:	bd10      	pop	{r4, pc}

000d493a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d493a:	b510      	push	{r4, lr}
   d493c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d493e:	6800      	ldr	r0, [r0, #0]
   d4940:	b108      	cbz	r0, d4946 <_ZN6String10invalidateEv+0xc>
   d4942:	f7ff ff75 	bl	d4830 <free>
	buffer = NULL;
   d4946:	2300      	movs	r3, #0
   d4948:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d494a:	60a3      	str	r3, [r4, #8]
   d494c:	6063      	str	r3, [r4, #4]
   d494e:	bd10      	pop	{r4, pc}

000d4950 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4950:	b538      	push	{r3, r4, r5, lr}
   d4952:	4604      	mov	r4, r0
   d4954:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4956:	6800      	ldr	r0, [r0, #0]
   d4958:	3101      	adds	r1, #1
   d495a:	f7ff ff71 	bl	d4840 <realloc>
	if (newbuffer) {
   d495e:	b110      	cbz	r0, d4966 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4960:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4964:	2001      	movs	r0, #1
	}
	return 0;
}
   d4966:	bd38      	pop	{r3, r4, r5, pc}

000d4968 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4968:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d496a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d496c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d496e:	b113      	cbz	r3, d4976 <_ZN6String7reserveEj+0xe>
   d4970:	6843      	ldr	r3, [r0, #4]
   d4972:	428b      	cmp	r3, r1
   d4974:	d207      	bcs.n	d4986 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff ffea 	bl	d4950 <_ZN6String12changeBufferEj>
   d497c:	b120      	cbz	r0, d4988 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d497e:	68a3      	ldr	r3, [r4, #8]
   d4980:	b90b      	cbnz	r3, d4986 <_ZN6String7reserveEj+0x1e>
   d4982:	6822      	ldr	r2, [r4, #0]
   d4984:	7013      	strb	r3, [r2, #0]
   d4986:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4988:	bd10      	pop	{r4, pc}

000d498a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d498a:	b570      	push	{r4, r5, r6, lr}
   d498c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d498e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4990:	4604      	mov	r4, r0
   d4992:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4994:	f7ff ffe8 	bl	d4968 <_ZN6String7reserveEj>
   d4998:	b918      	cbnz	r0, d49a2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d499a:	4620      	mov	r0, r4
   d499c:	f7ff ffcd 	bl	d493a <_ZN6String10invalidateEv>
		return *this;
   d49a0:	e009      	b.n	d49b6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d49a2:	462a      	mov	r2, r5
   d49a4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d49a6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d49a8:	6820      	ldr	r0, [r4, #0]
   d49aa:	f001 f8fb 	bl	d5ba4 <memcpy>
	buffer[len] = 0;
   d49ae:	6822      	ldr	r2, [r4, #0]
   d49b0:	68a3      	ldr	r3, [r4, #8]
   d49b2:	2100      	movs	r1, #0
   d49b4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd70      	pop	{r4, r5, r6, pc}

000d49ba <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d49ba:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d49bc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d49be:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d49c0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d49c2:	6043      	str	r3, [r0, #4]
	len = 0;
   d49c4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d49c6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d49c8:	460d      	mov	r5, r1
   d49ca:	b139      	cbz	r1, d49dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d49cc:	4608      	mov	r0, r1
   d49ce:	f001 f92f 	bl	d5c30 <strlen>
   d49d2:	4629      	mov	r1, r5
   d49d4:	4602      	mov	r2, r0
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff ffd7 	bl	d498a <_ZN6String4copyEPKcj>
}
   d49dc:	4620      	mov	r0, r4
   d49de:	bd38      	pop	{r3, r4, r5, pc}

000d49e0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d49e0:	b538      	push	{r3, r4, r5, lr}
   d49e2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d49e4:	460c      	mov	r4, r1
   d49e6:	b141      	cbz	r1, d49fa <_ZN6StringaSEPKc+0x1a>
   d49e8:	4608      	mov	r0, r1
   d49ea:	f001 f921 	bl	d5c30 <strlen>
   d49ee:	4621      	mov	r1, r4
   d49f0:	4602      	mov	r2, r0
   d49f2:	4628      	mov	r0, r5
   d49f4:	f7ff ffc9 	bl	d498a <_ZN6String4copyEPKcj>
   d49f8:	e001      	b.n	d49fe <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d49fa:	f7ff ff9e 	bl	d493a <_ZN6String10invalidateEv>

	return *this;
}
   d49fe:	4628      	mov	r0, r5
   d4a00:	bd38      	pop	{r3, r4, r5, pc}

000d4a02 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4a02:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4a04:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4a06:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4a08:	b912      	cbnz	r2, d4a10 <_ZNK6String6equalsEPKc+0xe>
   d4a0a:	b919      	cbnz	r1, d4a14 <_ZNK6String6equalsEPKc+0x12>
   d4a0c:	2001      	movs	r0, #1
   d4a0e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4a10:	b911      	cbnz	r1, d4a18 <_ZNK6String6equalsEPKc+0x16>
   d4a12:	6803      	ldr	r3, [r0, #0]
   d4a14:	7818      	ldrb	r0, [r3, #0]
   d4a16:	e002      	b.n	d4a1e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d4a18:	6800      	ldr	r0, [r0, #0]
   d4a1a:	f001 f8ff 	bl	d5c1c <strcmp>
   d4a1e:	fab0 f080 	clz	r0, r0
   d4a22:	0940      	lsrs	r0, r0, #5
}
   d4a24:	bd08      	pop	{r3, pc}
	...

000d4a28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a28:	4802      	ldr	r0, [pc, #8]	; (d4a34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4a2a:	2300      	movs	r3, #0
   d4a2c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4a2e:	f7ff bdb3 	b.w	d4598 <os_mutex_recursive_create>
   d4a32:	bf00      	nop
   d4a34:	2003e3c8 	.word	0x2003e3c8

000d4a38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a3a:	4606      	mov	r6, r0
   d4a3c:	460d      	mov	r5, r1
   d4a3e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4a40:	2400      	movs	r4, #0
  while (size--) {
   d4a42:	42bd      	cmp	r5, r7
   d4a44:	d00c      	beq.n	d4a60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a46:	6833      	ldr	r3, [r6, #0]
   d4a48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a4c:	689b      	ldr	r3, [r3, #8]
   d4a4e:	4630      	mov	r0, r6
   d4a50:	4798      	blx	r3
     if (chunk>=0)
   d4a52:	2800      	cmp	r0, #0
   d4a54:	db01      	blt.n	d4a5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a56:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4a58:	e7f3      	b.n	d4a42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a5a:	2c00      	cmp	r4, #0
   d4a5c:	bf08      	it	eq
   d4a5e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a60:	4620      	mov	r0, r4
   d4a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a64 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a64:	b570      	push	{r4, r5, r6, lr}
   d4a66:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4a68:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4a6a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4a6c:	b149      	cbz	r1, d4a82 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4a6e:	f001 f8df 	bl	d5c30 <strlen>
   d4a72:	682b      	ldr	r3, [r5, #0]
   d4a74:	4602      	mov	r2, r0
   d4a76:	4621      	mov	r1, r4
   d4a78:	4628      	mov	r0, r5
   d4a7a:	68db      	ldr	r3, [r3, #12]
    }
   d4a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a80:	4718      	bx	r3
    }
   d4a82:	bd70      	pop	{r4, r5, r6, pc}

000d4a84 <_ZN5Print5printEPKc>:
   d4a84:	b508      	push	{r3, lr}
   d4a86:	f7ff ffed 	bl	d4a64 <_ZN5Print5writeEPKc>
   d4a8a:	bd08      	pop	{r3, pc}

000d4a8c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4a8c:	6803      	ldr	r3, [r0, #0]
   d4a8e:	689b      	ldr	r3, [r3, #8]
   d4a90:	4718      	bx	r3

000d4a92 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a92:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4a94:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a96:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4a98:	f7ff fff8 	bl	d4a8c <_ZN5Print5printEc>
  n += print('\n');
   d4a9c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4a9e:	4604      	mov	r4, r0
  n += print('\n');
   d4aa0:	4628      	mov	r0, r5
   d4aa2:	f7ff fff3 	bl	d4a8c <_ZN5Print5printEc>
  return n;
}
   d4aa6:	4420      	add	r0, r4
   d4aa8:	bd38      	pop	{r3, r4, r5, pc}

000d4aaa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4aaa:	b538      	push	{r3, r4, r5, lr}
   d4aac:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4aae:	f7ff ffd9 	bl	d4a64 <_ZN5Print5writeEPKc>
   d4ab2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ab4:	4628      	mov	r0, r5
   d4ab6:	f7ff ffec 	bl	d4a92 <_ZN5Print7printlnEv>
  return n;
}
   d4aba:	4420      	add	r0, r4
   d4abc:	bd38      	pop	{r3, r4, r5, pc}

000d4abe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4abe:	b530      	push	{r4, r5, lr}
   d4ac0:	b08b      	sub	sp, #44	; 0x2c
   d4ac2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ac4:	2100      	movs	r1, #0
   d4ac6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4aca:	2a01      	cmp	r2, #1
   d4acc:	bf98      	it	ls
   d4ace:	220a      	movls	r2, #10
   d4ad0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4ad4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4ad8:	fb05 3312 	mls	r3, r5, r2, r3
   d4adc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ae0:	2b09      	cmp	r3, #9
   d4ae2:	bf94      	ite	ls
   d4ae4:	3330      	addls	r3, #48	; 0x30
   d4ae6:	3337      	addhi	r3, #55	; 0x37
   d4ae8:	b2db      	uxtb	r3, r3
   d4aea:	4621      	mov	r1, r4
   d4aec:	f804 3901 	strb.w	r3, [r4], #-1
   d4af0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4af2:	2d00      	cmp	r5, #0
   d4af4:	d1ee      	bne.n	d4ad4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4af6:	f7ff ffb5 	bl	d4a64 <_ZN5Print5writeEPKc>
}
   d4afa:	b00b      	add	sp, #44	; 0x2c
   d4afc:	bd30      	pop	{r4, r5, pc}

000d4afe <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4afe:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4b00:	b92a      	cbnz	r2, d4b0e <_ZN5Print5printEmi+0x10>
   d4b02:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4b04:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4b08:	689b      	ldr	r3, [r3, #8]
   d4b0a:	b2c9      	uxtb	r1, r1
   d4b0c:	4718      	bx	r3
  else return printNumber(n, base);
   d4b0e:	b2d2      	uxtb	r2, r2
}
   d4b10:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4b14:	f7ff bfd3 	b.w	d4abe <_ZN5Print11printNumberEmh>

000d4b18 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4b18:	f7ff bff1 	b.w	d4afe <_ZN5Print5printEmi>

000d4b1c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b20:	4607      	mov	r7, r0
   d4b22:	460e      	mov	r6, r1
  if (base == 0) {
   d4b24:	4615      	mov	r5, r2
   d4b26:	b92a      	cbnz	r2, d4b34 <_ZN5Print5printEli+0x18>
    return write(n);
   d4b28:	6803      	ldr	r3, [r0, #0]
   d4b2a:	b2c9      	uxtb	r1, r1
   d4b2c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4b32:	4718      	bx	r3
  } else if (base == 10) {
   d4b34:	2a0a      	cmp	r2, #10
   d4b36:	d102      	bne.n	d4b3e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4b38:	2900      	cmp	r1, #0
   d4b3a:	da01      	bge.n	d4b40 <_ZN5Print5printEli+0x24>
   d4b3c:	e004      	b.n	d4b48 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4b3e:	b2d2      	uxtb	r2, r2
  }
}
   d4b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4b44:	f7ff bfbb 	b.w	d4abe <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4b48:	212d      	movs	r1, #45	; 0x2d
   d4b4a:	f7ff ff9f 	bl	d4a8c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4b4e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4b50:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4b52:	4271      	negs	r1, r6
   d4b54:	4638      	mov	r0, r7
   d4b56:	f7ff ffb2 	bl	d4abe <_ZN5Print11printNumberEmh>
   d4b5a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b60 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d4b60:	b538      	push	{r3, r4, r5, lr}
   d4b62:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4b64:	f7ff ffda 	bl	d4b1c <_ZN5Print5printEli>
   d4b68:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d4b6a:	4628      	mov	r0, r5
   d4b6c:	f7ff ff91 	bl	d4a92 <_ZN5Print7printlnEv>
  return n;
}
   d4b70:	4420      	add	r0, r4
   d4b72:	bd38      	pop	{r3, r4, r5, pc}

000d4b74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b74:	4b01      	ldr	r3, [pc, #4]	; (d4b7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b76:	4a02      	ldr	r2, [pc, #8]	; (d4b80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b78:	601a      	str	r2, [r3, #0]
   d4b7a:	4770      	bx	lr
   d4b7c:	2003e3cc 	.word	0x2003e3cc
   d4b80:	000d5f03 	.word	0x000d5f03

000d4b84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b84:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b86:	681a      	ldr	r2, [r3, #0]
   d4b88:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b8a:	601a      	str	r2, [r3, #0]
   d4b8c:	4770      	bx	lr
   d4b8e:	bf00      	nop
   d4b90:	2003dec8 	.word	0x2003dec8
   d4b94:	2003e3d0 	.word	0x2003e3d0

000d4b98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b98:	2100      	movs	r1, #0
   d4b9a:	f7ff bdcd 	b.w	d4738 <system_delay_ms>

000d4b9e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b9e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ba0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ba2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ba4:	b113      	cbz	r3, d4bac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ba6:	2203      	movs	r2, #3
   d4ba8:	4601      	mov	r1, r0
   d4baa:	4798      	blx	r3
    }
   d4bac:	4620      	mov	r0, r4
   d4bae:	bd10      	pop	{r4, pc}

000d4bb0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bb4:	f7ff fff3 	bl	d4b9e <_ZNSt14_Function_baseD1Ev>
   d4bb8:	4620      	mov	r0, r4
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bbc:	4803      	ldr	r0, [pc, #12]	; (d4bcc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4bbe:	4a04      	ldr	r2, [pc, #16]	; (d4bd0 <_GLOBAL__sub_I_RGB+0x14>)
   d4bc0:	4904      	ldr	r1, [pc, #16]	; (d4bd4 <_GLOBAL__sub_I_RGB+0x18>)
   d4bc2:	2300      	movs	r3, #0
   d4bc4:	6083      	str	r3, [r0, #8]
   d4bc6:	f000 be8b 	b.w	d58e0 <__aeabi_atexit>
   d4bca:	bf00      	nop
   d4bcc:	2003e3d4 	.word	0x2003e3d4
   d4bd0:	2003df34 	.word	0x2003df34
   d4bd4:	000d4bb1 	.word	0x000d4bb1

000d4bd8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4bd8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4bda:	4b0c      	ldr	r3, [pc, #48]	; (d4c0c <serialEventRun+0x34>)
   d4bdc:	b133      	cbz	r3, d4bec <serialEventRun+0x14>
   d4bde:	f000 f94f 	bl	d4e80 <_Z16_fetch_usbserialv>
   d4be2:	6803      	ldr	r3, [r0, #0]
   d4be4:	691b      	ldr	r3, [r3, #16]
   d4be6:	4798      	blx	r3
   d4be8:	2800      	cmp	r0, #0
   d4bea:	dc09      	bgt.n	d4c00 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4bec:	4b08      	ldr	r3, [pc, #32]	; (d4c10 <serialEventRun+0x38>)
   d4bee:	b163      	cbz	r3, d4c0a <serialEventRun+0x32>
   d4bf0:	f000 fa10 	bl	d5014 <_Z22__fetch_global_Serial1v>
   d4bf4:	6803      	ldr	r3, [r0, #0]
   d4bf6:	691b      	ldr	r3, [r3, #16]
   d4bf8:	4798      	blx	r3
   d4bfa:	2800      	cmp	r0, #0
   d4bfc:	dc03      	bgt.n	d4c06 <serialEventRun+0x2e>
   d4bfe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4c00:	f3af 8000 	nop.w
   d4c04:	e7f2      	b.n	d4bec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4c06:	f3af 8000 	nop.w
   d4c0a:	bd08      	pop	{r3, pc}
	...

000d4c14 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4c14:	b508      	push	{r3, lr}
	serialEventRun();
   d4c16:	f7ff ffdf 	bl	d4bd8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4c1a:	f7ff fc95 	bl	d4548 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4c1e:	4b01      	ldr	r3, [pc, #4]	; (d4c24 <_post_loop+0x10>)
   d4c20:	6018      	str	r0, [r3, #0]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	2003e74c 	.word	0x2003e74c

000d4c28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4c28:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c2a:	2300      	movs	r3, #0
   d4c2c:	9300      	str	r3, [sp, #0]
   d4c2e:	461a      	mov	r2, r3
   d4c30:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c34:	f7ff fd92 	bl	d475c <system_ctrl_set_result>
}
   d4c38:	b003      	add	sp, #12
   d4c3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c40 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4c40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4c42:	8843      	ldrh	r3, [r0, #2]
   d4c44:	2b0a      	cmp	r3, #10
   d4c46:	d008      	beq.n	d4c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4c48:	2b50      	cmp	r3, #80	; 0x50
   d4c4a:	d109      	bne.n	d4c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4c4c:	4b09      	ldr	r3, [pc, #36]	; (d4c74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4c4e:	681b      	ldr	r3, [r3, #0]
   d4c50:	b13b      	cbz	r3, d4c62 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4c52:	b003      	add	sp, #12
   d4c54:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4c58:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4c5a:	f7ff ffe5 	bl	d4c28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4c5e:	e006      	b.n	d4c6e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c60:	2300      	movs	r3, #0
   d4c62:	9300      	str	r3, [sp, #0]
   d4c64:	461a      	mov	r2, r3
   d4c66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c6a:	f7ff fd77 	bl	d475c <system_ctrl_set_result>
        break;
    }
}
   d4c6e:	b003      	add	sp, #12
   d4c70:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c74:	2003e3e4 	.word	0x2003e3e4

000d4c78 <module_user_init_hook>:

void module_user_init_hook()
{
   d4c78:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c7a:	f7ff fc5d 	bl	d4538 <HAL_RNG_GetRandomNumber>
   d4c7e:	4604      	mov	r4, r0
    srand(seed);
   d4c80:	f000 ffa4 	bl	d5bcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c84:	4b07      	ldr	r3, [pc, #28]	; (d4ca4 <module_user_init_hook+0x2c>)
   d4c86:	b113      	cbz	r3, d4c8e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c8e:	2100      	movs	r1, #0
   d4c90:	4804      	ldr	r0, [pc, #16]	; (d4ca4 <module_user_init_hook+0x2c>)
   d4c92:	f7ff fdbd 	bl	d4810 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c96:	2100      	movs	r1, #0
   d4c98:	4803      	ldr	r0, [pc, #12]	; (d4ca8 <module_user_init_hook+0x30>)
}
   d4c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c9e:	f7ff bd53 	b.w	d4748 <system_ctrl_set_app_request_handler>
   d4ca2:	bf00      	nop
   d4ca4:	00000000 	.word	0x00000000
   d4ca8:	000d4c41 	.word	0x000d4c41

000d4cac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4cac:	4770      	bx	lr

000d4cae <_ZN9IPAddressD0Ev>:
   d4cae:	b510      	push	{r4, lr}
   d4cb0:	2118      	movs	r1, #24
   d4cb2:	4604      	mov	r4, r0
   d4cb4:	f000 fe19 	bl	d58ea <_ZdlPvj>
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd10      	pop	{r4, pc}

000d4cbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4cbe:	7d03      	ldrb	r3, [r0, #20]
   d4cc0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4cc2:	b08d      	sub	sp, #52	; 0x34
   d4cc4:	460e      	mov	r6, r1
   d4cc6:	f100 0704 	add.w	r7, r0, #4
   d4cca:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4cce:	d002      	beq.n	d4cd6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4cd0:	f100 0508 	add.w	r5, r0, #8
   d4cd4:	e018      	b.n	d4d08 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4cd6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4cd8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4cda:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4cde:	232f      	movs	r3, #47	; 0x2f
   d4ce0:	462a      	mov	r2, r5
   d4ce2:	200a      	movs	r0, #10
   d4ce4:	f7ff fc60 	bl	d45a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ce8:	4628      	mov	r0, r5
   d4cea:	f000 ffa1 	bl	d5c30 <strlen>
   d4cee:	6833      	ldr	r3, [r6, #0]
   d4cf0:	4602      	mov	r2, r0
   d4cf2:	68db      	ldr	r3, [r3, #12]
   d4cf4:	4629      	mov	r1, r5
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	4798      	blx	r3
   d4cfa:	e00f      	b.n	d4d1c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4cfc:	b124      	cbz	r4, d4d08 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4cfe:	212e      	movs	r1, #46	; 0x2e
   d4d00:	4630      	mov	r0, r6
   d4d02:	f7ff fec3 	bl	d4a8c <_ZN5Print5printEc>
   d4d06:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4d08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4d0c:	220a      	movs	r2, #10
   d4d0e:	4630      	mov	r0, r6
   d4d10:	f7ff ff02 	bl	d4b18 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4d14:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4d16:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4d18:	d1f0      	bne.n	d4cfc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4d1a:	4620      	mov	r0, r4
    }
    return n;
}
   d4d1c:	b00d      	add	sp, #52	; 0x34
   d4d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d20 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4b05      	ldr	r3, [pc, #20]	; (d4d38 <_ZN9IPAddressC1Ev+0x18>)
   d4d24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4d26:	2211      	movs	r2, #17
   d4d28:	f840 3b04 	str.w	r3, [r0], #4
   d4d2c:	2100      	movs	r1, #0
   d4d2e:	f000 ff44 	bl	d5bba <memset>
{
    clear();
}
   d4d32:	4620      	mov	r0, r4
   d4d34:	bd10      	pop	{r4, pc}
   d4d36:	bf00      	nop
   d4d38:	000d5f9c 	.word	0x000d5f9c

000d4d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4d3c:	4603      	mov	r3, r0
   d4d3e:	4a07      	ldr	r2, [pc, #28]	; (d4d5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4d40:	b510      	push	{r4, lr}
   d4d42:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4d46:	f101 0210 	add.w	r2, r1, #16
   d4d4a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d4e:	f843 4b04 	str.w	r4, [r3], #4
   d4d52:	4291      	cmp	r1, r2
   d4d54:	d1f9      	bne.n	d4d4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d56:	780a      	ldrb	r2, [r1, #0]
   d4d58:	701a      	strb	r2, [r3, #0]
}
   d4d5a:	bd10      	pop	{r4, pc}
   d4d5c:	000d5f9c 	.word	0x000d5f9c

000d4d60 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4d60:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4d62:	2b04      	cmp	r3, #4
   d4d64:	d101      	bne.n	d4d6a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4d66:	6840      	ldr	r0, [r0, #4]
   d4d68:	e008      	b.n	d4d7c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4d6a:	2b06      	cmp	r3, #6
   d4d6c:	d10a      	bne.n	d4d84 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4d6e:	6843      	ldr	r3, [r0, #4]
   d4d70:	b953      	cbnz	r3, d4d88 <_ZNK9IPAddresscvbEv+0x28>
   d4d72:	6883      	ldr	r3, [r0, #8]
   d4d74:	b943      	cbnz	r3, d4d88 <_ZNK9IPAddresscvbEv+0x28>
   d4d76:	68c3      	ldr	r3, [r0, #12]
   d4d78:	b933      	cbnz	r3, d4d88 <_ZNK9IPAddresscvbEv+0x28>
   d4d7a:	6900      	ldr	r0, [r0, #16]
   d4d7c:	3000      	adds	r0, #0
   d4d7e:	bf18      	it	ne
   d4d80:	2001      	movne	r0, #1
   d4d82:	4770      	bx	lr
    } else {
        return false;
   d4d84:	2000      	movs	r0, #0
   d4d86:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4d88:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4d8a:	4770      	bx	lr

000d4d8c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4d8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4d9e:	2304      	movs	r3, #4
   d4da0:	6041      	str	r1, [r0, #4]
   d4da2:	7503      	strb	r3, [r0, #20]
   d4da4:	bd10      	pop	{r4, pc}

000d4da6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4da8:	780d      	ldrb	r5, [r1, #0]
   d4daa:	788b      	ldrb	r3, [r1, #2]
   d4dac:	784a      	ldrb	r2, [r1, #1]
   d4dae:	78c9      	ldrb	r1, [r1, #3]
   d4db0:	9100      	str	r1, [sp, #0]
   d4db2:	4629      	mov	r1, r5
   d4db4:	f7ff ffea 	bl	d4d8c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4db8:	b003      	add	sp, #12
   d4dba:	bd30      	pop	{r4, r5, pc}

000d4dbc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4dbc:	7441      	strb	r1, [r0, #17]
   d4dbe:	4770      	bx	lr

000d4dc0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4dc0:	4770      	bx	lr

000d4dc2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4dc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4dc4:	2100      	movs	r1, #0
   d4dc6:	7c00      	ldrb	r0, [r0, #16]
   d4dc8:	f7ff fc8e 	bl	d46e8 <HAL_USB_USART_Receive_Data>
}
   d4dcc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dd0:	bf28      	it	cs
   d4dd2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4dd6:	bd08      	pop	{r3, pc}

000d4dd8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4dd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4dda:	2101      	movs	r1, #1
   d4ddc:	7c00      	ldrb	r0, [r0, #16]
   d4dde:	f7ff fc83 	bl	d46e8 <HAL_USB_USART_Receive_Data>
}
   d4de2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4de6:	bf28      	it	cs
   d4de8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4dec:	bd08      	pop	{r3, pc}

000d4dee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4dee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4df0:	7c00      	ldrb	r0, [r0, #16]
   d4df2:	f7ff fc71 	bl	d46d8 <HAL_USB_USART_Available_Data_For_Write>
}
   d4df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dfa:	bd08      	pop	{r3, pc}

000d4dfc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4dfc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4dfe:	7c00      	ldrb	r0, [r0, #16]
   d4e00:	f7ff fc62 	bl	d46c8 <HAL_USB_USART_Available_Data>
}
   d4e04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e08:	bd08      	pop	{r3, pc}

000d4e0a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4e0a:	7c00      	ldrb	r0, [r0, #16]
   d4e0c:	f7ff bc7c 	b.w	d4708 <HAL_USB_USART_Flush_Data>

000d4e10 <_ZN9USBSerialD0Ev>:
   d4e10:	b510      	push	{r4, lr}
   d4e12:	2114      	movs	r1, #20
   d4e14:	4604      	mov	r4, r0
   d4e16:	f000 fd68 	bl	d58ea <_ZdlPvj>
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	bd10      	pop	{r4, pc}

000d4e1e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e1e:	b538      	push	{r3, r4, r5, lr}
   d4e20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e22:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e26:	f7ff fc57 	bl	d46d8 <HAL_USB_USART_Available_Data_For_Write>
   d4e2a:	2800      	cmp	r0, #0
   d4e2c:	dc01      	bgt.n	d4e32 <_ZN9USBSerial5writeEh+0x14>
   d4e2e:	7c60      	ldrb	r0, [r4, #17]
   d4e30:	b128      	cbz	r0, d4e3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4e32:	4629      	mov	r1, r5
   d4e34:	7c20      	ldrb	r0, [r4, #16]
   d4e36:	f7ff fc5f 	bl	d46f8 <HAL_USB_USART_Send_Data>
   d4e3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4e3e:	bd38      	pop	{r3, r4, r5, pc}

000d4e40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e40:	b510      	push	{r4, lr}
   d4e42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e44:	2300      	movs	r3, #0
   d4e46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e4c:	60a3      	str	r3, [r4, #8]
   d4e4e:	4b05      	ldr	r3, [pc, #20]	; (d4e64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4e50:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4e52:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e54:	4608      	mov	r0, r1
{
  _serial = serial;
   d4e56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4e58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4e5a:	4611      	mov	r1, r2
   d4e5c:	f7ff fc24 	bl	d46a8 <HAL_USB_USART_Init>
}
   d4e60:	4620      	mov	r0, r4
   d4e62:	bd10      	pop	{r4, pc}
   d4e64:	000d5fb0 	.word	0x000d5fb0

000d4e68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4e68:	2200      	movs	r2, #0
   d4e6a:	7c00      	ldrb	r0, [r0, #16]
   d4e6c:	f7ff bc24 	b.w	d46b8 <HAL_USB_USART_Begin>

000d4e70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4e72:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4e76:	2100      	movs	r1, #0
   d4e78:	f000 fe9f 	bl	d5bba <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	bd10      	pop	{r4, pc}

000d4e80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e82:	4d0e      	ldr	r5, [pc, #56]	; (d4ebc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4e84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e86:	a801      	add	r0, sp, #4
   d4e88:	f7ff fff2 	bl	d4e70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e8c:	6829      	ldr	r1, [r5, #0]
   d4e8e:	f011 0401 	ands.w	r4, r1, #1
   d4e92:	d110      	bne.n	d4eb6 <_Z16_fetch_usbserialv+0x36>
   d4e94:	4628      	mov	r0, r5
   d4e96:	f7ff f904 	bl	d40a2 <__cxa_guard_acquire>
   d4e9a:	b160      	cbz	r0, d4eb6 <_Z16_fetch_usbserialv+0x36>
   d4e9c:	aa01      	add	r2, sp, #4
   d4e9e:	4621      	mov	r1, r4
   d4ea0:	4807      	ldr	r0, [pc, #28]	; (d4ec0 <_Z16_fetch_usbserialv+0x40>)
   d4ea2:	f7ff ffcd 	bl	d4e40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ea6:	4628      	mov	r0, r5
   d4ea8:	f7ff f900 	bl	d40ac <__cxa_guard_release>
   d4eac:	4a05      	ldr	r2, [pc, #20]	; (d4ec4 <_Z16_fetch_usbserialv+0x44>)
   d4eae:	4906      	ldr	r1, [pc, #24]	; (d4ec8 <_Z16_fetch_usbserialv+0x48>)
   d4eb0:	4803      	ldr	r0, [pc, #12]	; (d4ec0 <_Z16_fetch_usbserialv+0x40>)
   d4eb2:	f000 fd15 	bl	d58e0 <__aeabi_atexit>
	return _usbserial;
}
   d4eb6:	4802      	ldr	r0, [pc, #8]	; (d4ec0 <_Z16_fetch_usbserialv+0x40>)
   d4eb8:	b007      	add	sp, #28
   d4eba:	bd30      	pop	{r4, r5, pc}
   d4ebc:	2003e3e8 	.word	0x2003e3e8
   d4ec0:	2003e3ec 	.word	0x2003e3ec
   d4ec4:	2003df34 	.word	0x2003df34
   d4ec8:	000d4dc1 	.word	0x000d4dc1

000d4ecc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	4611      	mov	r1, r2
   d4ed0:	6840      	ldr	r0, [r0, #4]
   d4ed2:	f7ff bc65 	b.w	d47a0 <network_ready>

000d4ed6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	4611      	mov	r1, r2
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bc80 	b.w	d47e0 <network_listening>

000d4ee0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	4611      	mov	r1, r2
   d4ee4:	6840      	ldr	r0, [r0, #4]
   d4ee6:	f7ff bc8b 	b.w	d4800 <network_get_listen_timeout>

000d4eea <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4eea:	2200      	movs	r2, #0
   d4eec:	6840      	ldr	r0, [r0, #4]
   d4eee:	f7ff bc7f 	b.w	d47f0 <network_set_listen_timeout>

000d4ef2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	f081 0101 	eor.w	r1, r1, #1
   d4ef8:	6840      	ldr	r0, [r0, #4]
   d4efa:	f7ff bc69 	b.w	d47d0 <network_listen>

000d4efe <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4efe:	2300      	movs	r3, #0
   d4f00:	461a      	mov	r2, r3
   d4f02:	4619      	mov	r1, r3
   d4f04:	6840      	ldr	r0, [r0, #4]
   d4f06:	f7ff bc5b 	b.w	d47c0 <network_off>

000d4f0a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	461a      	mov	r2, r3
   d4f0e:	4619      	mov	r1, r3
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bc4d 	b.w	d47b0 <network_on>

000d4f16 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	4611      	mov	r1, r2
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff bc30 	b.w	d4780 <network_connecting>

000d4f20 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f20:	2200      	movs	r2, #0
   d4f22:	2102      	movs	r1, #2
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	f7ff bc33 	b.w	d4790 <network_disconnect>

000d4f2a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f2a:	2300      	movs	r3, #0
   d4f2c:	461a      	mov	r2, r3
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	f7ff bc1e 	b.w	d4770 <network_connect>

000d4f34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4f34:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4f36:	4c08      	ldr	r4, [pc, #32]	; (d4f58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4f38:	2528      	movs	r5, #40	; 0x28
   d4f3a:	462a      	mov	r2, r5
   d4f3c:	2100      	movs	r1, #0
   d4f3e:	4620      	mov	r0, r4
   d4f40:	f000 fe3b 	bl	d5bba <memset>
        cid = -1;
   d4f44:	f04f 33ff 	mov.w	r3, #4294967295
   d4f48:	6063      	str	r3, [r4, #4]
   d4f4a:	4b04      	ldr	r3, [pc, #16]	; (d4f5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4f4c:	8025      	strh	r5, [r4, #0]
   d4f4e:	2204      	movs	r2, #4
   d4f50:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4f52:	4a03      	ldr	r2, [pc, #12]	; (d4f60 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4f54:	601a      	str	r2, [r3, #0]
   d4f56:	bd38      	pop	{r3, r4, r5, pc}
   d4f58:	2003e408 	.word	0x2003e408
   d4f5c:	2003e400 	.word	0x2003e400
   d4f60:	000d5fe0 	.word	0x000d5fe0

000d4f64 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4f64:	4770      	bx	lr

000d4f66 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f66:	7441      	strb	r1, [r0, #17]
   d4f68:	4770      	bx	lr

000d4f6a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4f6a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff fb63 	bl	d4638 <HAL_USART_Available_Data_For_Write>
}
   d4f72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f76:	bd08      	pop	{r3, pc}

000d4f78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4f78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4f7a:	7c00      	ldrb	r0, [r0, #16]
   d4f7c:	f7ff fb3c 	bl	d45f8 <HAL_USART_Available_Data>
}
   d4f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f84:	bd08      	pop	{r3, pc}

000d4f86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4f86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4f88:	7c00      	ldrb	r0, [r0, #16]
   d4f8a:	f7ff fb45 	bl	d4618 <HAL_USART_Peek_Data>
}
   d4f8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f92:	bf28      	it	cs
   d4f94:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f98:	bd08      	pop	{r3, pc}

000d4f9a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4f9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4f9c:	7c00      	ldrb	r0, [r0, #16]
   d4f9e:	f7ff fb33 	bl	d4608 <HAL_USART_Read_Data>
}
   d4fa2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4fa6:	bf28      	it	cs
   d4fa8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4fac:	bd08      	pop	{r3, pc}

000d4fae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4fae:	7c00      	ldrb	r0, [r0, #16]
   d4fb0:	f7ff bb3a 	b.w	d4628 <HAL_USART_Flush_Data>

000d4fb4 <_ZN11USARTSerialD0Ev>:
   d4fb4:	b510      	push	{r4, lr}
   d4fb6:	2114      	movs	r1, #20
   d4fb8:	4604      	mov	r4, r0
   d4fba:	f000 fc96 	bl	d58ea <_ZdlPvj>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd10      	pop	{r4, pc}

000d4fc2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4fc2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fc4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4fca:	b925      	cbnz	r5, d4fd6 <_ZN11USARTSerial5writeEh+0x14>
   d4fcc:	7c00      	ldrb	r0, [r0, #16]
   d4fce:	f7ff fb33 	bl	d4638 <HAL_USART_Available_Data_For_Write>
   d4fd2:	2800      	cmp	r0, #0
   d4fd4:	dd05      	ble.n	d4fe2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fd6:	4631      	mov	r1, r6
   d4fd8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fde:	f7ff bb03 	b.w	d45e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4fe2:	4628      	mov	r0, r5
   d4fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4fe8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4fe8:	b510      	push	{r4, lr}
   d4fea:	4604      	mov	r4, r0
   d4fec:	4608      	mov	r0, r1
   d4fee:	4611      	mov	r1, r2
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	6062      	str	r2, [r4, #4]
   d4ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ff8:	60a2      	str	r2, [r4, #8]
   d4ffa:	4a05      	ldr	r2, [pc, #20]	; (d5010 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ffc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ffe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5000:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5002:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5004:	461a      	mov	r2, r3
   d5006:	f7ff fae7 	bl	d45d8 <HAL_USART_Init>
}
   d500a:	4620      	mov	r0, r4
   d500c:	bd10      	pop	{r4, pc}
   d500e:	bf00      	nop
   d5010:	000d6014 	.word	0x000d6014

000d5014 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5014:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5016:	4d0c      	ldr	r5, [pc, #48]	; (d5048 <_Z22__fetch_global_Serial1v+0x34>)
   d5018:	6829      	ldr	r1, [r5, #0]
   d501a:	f011 0401 	ands.w	r4, r1, #1
   d501e:	d111      	bne.n	d5044 <_Z22__fetch_global_Serial1v+0x30>
   d5020:	4628      	mov	r0, r5
   d5022:	f7ff f83e 	bl	d40a2 <__cxa_guard_acquire>
   d5026:	b168      	cbz	r0, d5044 <_Z22__fetch_global_Serial1v+0x30>
   d5028:	4a08      	ldr	r2, [pc, #32]	; (d504c <_Z22__fetch_global_Serial1v+0x38>)
   d502a:	4b09      	ldr	r3, [pc, #36]	; (d5050 <_Z22__fetch_global_Serial1v+0x3c>)
   d502c:	4809      	ldr	r0, [pc, #36]	; (d5054 <_Z22__fetch_global_Serial1v+0x40>)
   d502e:	4621      	mov	r1, r4
   d5030:	f7ff ffda 	bl	d4fe8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5034:	4628      	mov	r0, r5
   d5036:	f7ff f839 	bl	d40ac <__cxa_guard_release>
   d503a:	4a07      	ldr	r2, [pc, #28]	; (d5058 <_Z22__fetch_global_Serial1v+0x44>)
   d503c:	4907      	ldr	r1, [pc, #28]	; (d505c <_Z22__fetch_global_Serial1v+0x48>)
   d503e:	4805      	ldr	r0, [pc, #20]	; (d5054 <_Z22__fetch_global_Serial1v+0x40>)
   d5040:	f000 fc4e 	bl	d58e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5044:	4803      	ldr	r0, [pc, #12]	; (d5054 <_Z22__fetch_global_Serial1v+0x40>)
   d5046:	bd38      	pop	{r3, r4, r5, pc}
   d5048:	2003e4c8 	.word	0x2003e4c8
   d504c:	2003e4cc 	.word	0x2003e4cc
   d5050:	2003e444 	.word	0x2003e444
   d5054:	2003e430 	.word	0x2003e430
   d5058:	2003df34 	.word	0x2003df34
   d505c:	000d4f65 	.word	0x000d4f65

000d5060 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5060:	2200      	movs	r2, #0
   d5062:	4611      	mov	r1, r2
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	f7ff bbbb 	b.w	d47e0 <network_listening>

000d506a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d506a:	2200      	movs	r2, #0
   d506c:	4611      	mov	r1, r2
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bbc6 	b.w	d4800 <network_get_listen_timeout>

000d5074 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5074:	2200      	movs	r2, #0
   d5076:	6840      	ldr	r0, [r0, #4]
   d5078:	f7ff bbba 	b.w	d47f0 <network_set_listen_timeout>

000d507c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d507c:	2200      	movs	r2, #0
   d507e:	f081 0101 	eor.w	r1, r1, #1
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f7ff bba4 	b.w	d47d0 <network_listen>

000d5088 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5088:	2300      	movs	r3, #0
   d508a:	461a      	mov	r2, r3
   d508c:	2101      	movs	r1, #1
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bb96 	b.w	d47c0 <network_off>

000d5094 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5094:	2300      	movs	r3, #0
   d5096:	461a      	mov	r2, r3
   d5098:	4619      	mov	r1, r3
   d509a:	6840      	ldr	r0, [r0, #4]
   d509c:	f7ff bb88 	b.w	d47b0 <network_on>

000d50a0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50a0:	2200      	movs	r2, #0
   d50a2:	4611      	mov	r1, r2
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bb7b 	b.w	d47a0 <network_ready>

000d50aa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50aa:	2200      	movs	r2, #0
   d50ac:	4611      	mov	r1, r2
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bb66 	b.w	d4780 <network_connecting>

000d50b4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50b4:	2200      	movs	r2, #0
   d50b6:	2102      	movs	r1, #2
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	f7ff bb69 	b.w	d4790 <network_disconnect>

000d50be <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50be:	2300      	movs	r3, #0
   d50c0:	461a      	mov	r2, r3
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bb54 	b.w	d4770 <network_connect>

000d50c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d50c8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50ca:	4605      	mov	r5, r0
   d50cc:	b188      	cbz	r0, d50f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50ce:	6804      	ldr	r4, [r0, #0]
   d50d0:	b14c      	cbz	r4, d50e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d50d2:	68a3      	ldr	r3, [r4, #8]
   d50d4:	b11b      	cbz	r3, d50de <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50d6:	2203      	movs	r2, #3
   d50d8:	4621      	mov	r1, r4
   d50da:	4620      	mov	r0, r4
   d50dc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50de:	2110      	movs	r1, #16
   d50e0:	4620      	mov	r0, r4
   d50e2:	f000 fc02 	bl	d58ea <_ZdlPvj>
   d50e6:	4628      	mov	r0, r5
   d50e8:	2114      	movs	r1, #20
      }
   d50ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50ee:	f000 bbfc 	b.w	d58ea <_ZdlPvj>
   d50f2:	bd38      	pop	{r3, r4, r5, pc}

000d50f4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d50f4:	b110      	cbz	r0, d50fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d50f6:	6803      	ldr	r3, [r0, #0]
   d50f8:	685b      	ldr	r3, [r3, #4]
   d50fa:	4718      	bx	r3
   d50fc:	4770      	bx	lr

000d50fe <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d50fe:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5100:	6803      	ldr	r3, [r0, #0]
   d5102:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5104:	b1bb      	cbz	r3, d5136 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5106:	6858      	ldr	r0, [r3, #4]
   d5108:	f7ff fa26 	bl	d4558 <os_thread_is_current>
   d510c:	b978      	cbnz	r0, d512e <_ZN6ThreadD1Ev+0x30>
   d510e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5110:	7c5a      	ldrb	r2, [r3, #17]
   d5112:	b912      	cbnz	r2, d511a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5114:	6858      	ldr	r0, [r3, #4]
   d5116:	f7ff fa27 	bl	d4568 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d511a:	6823      	ldr	r3, [r4, #0]
   d511c:	6858      	ldr	r0, [r3, #4]
   d511e:	f7ff fa2b 	bl	d4578 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5122:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5124:	2300      	movs	r3, #0
   d5126:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5128:	b128      	cbz	r0, d5136 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d512a:	f7ff ffcd 	bl	d50c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d512e:	6820      	ldr	r0, [r4, #0]
   d5130:	b108      	cbz	r0, d5136 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5132:	f7ff ffc9 	bl	d50c8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5136:	4620      	mov	r0, r4
   d5138:	bd10      	pop	{r4, pc}
	...

000d513c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d513c:	b538      	push	{r3, r4, r5, lr}
   d513e:	4b0c      	ldr	r3, [pc, #48]	; (d5170 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5140:	6003      	str	r3, [r0, #0]
   d5142:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5144:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5148:	b108      	cbz	r0, d514e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d514a:	f7fe ffa8 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d514e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5152:	b135      	cbz	r5, d5162 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5154:	4628      	mov	r0, r5
   d5156:	f7ff ffd2 	bl	d50fe <_ZN6ThreadD1Ev>
   d515a:	2104      	movs	r1, #4
   d515c:	4628      	mov	r0, r5
   d515e:	f000 fbc4 	bl	d58ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5162:	68a0      	ldr	r0, [r4, #8]
   d5164:	b108      	cbz	r0, d516a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5166:	f7ff ffc5 	bl	d50f4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d516a:	4620      	mov	r0, r4
   d516c:	bd38      	pop	{r3, r4, r5, pc}
   d516e:	bf00      	nop
   d5170:	000d6044 	.word	0x000d6044

000d5174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5174:	b538      	push	{r3, r4, r5, lr}
   d5176:	4c0e      	ldr	r4, [pc, #56]	; (d51b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5178:	4b0e      	ldr	r3, [pc, #56]	; (d51b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d517a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d517c:	2500      	movs	r5, #0
   d517e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5180:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5184:	6063      	str	r3, [r4, #4]
   d5186:	60a5      	str	r5, [r4, #8]
   d5188:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d518c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5190:	f7ff fa02 	bl	d4598 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5194:	4b08      	ldr	r3, [pc, #32]	; (d51b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5196:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d519a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d519e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d51a0:	4620      	mov	r0, r4
   d51a2:	4a06      	ldr	r2, [pc, #24]	; (d51bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d51a4:	4906      	ldr	r1, [pc, #24]	; (d51c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d51a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d51aa:	f000 bb99 	b.w	d58e0 <__aeabi_atexit>
   d51ae:	bf00      	nop
   d51b0:	2003e550 	.word	0x2003e550
   d51b4:	000d60f8 	.word	0x000d60f8
   d51b8:	000d6044 	.word	0x000d6044
   d51bc:	2003df34 	.word	0x2003df34
   d51c0:	000d513d 	.word	0x000d513d

000d51c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d51c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d51c8:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d51ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d51ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d51d0:	2201      	movs	r2, #1
   d51d2:	f04f 33ff 	mov.w	r3, #4294967295
   d51d6:	4621      	mov	r1, r4
   d51d8:	47a8      	blx	r5
}
   d51da:	b003      	add	sp, #12
   d51dc:	bd30      	pop	{r4, r5, pc}

000d51de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d51de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d51e0:	6803      	ldr	r3, [r0, #0]
   d51e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d51e4:	f04f 33ff 	mov.w	r3, #4294967295
   d51e8:	46a4      	mov	ip, r4
}
   d51ea:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d51ee:	4760      	bx	ip

000d51f0 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d51f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51f2:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d51f4:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d51f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d51fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d51fc:	4621      	mov	r1, r4
   d51fe:	4613      	mov	r3, r2
   d5200:	2201      	movs	r2, #1
   d5202:	47a8      	blx	r5
}
   d5204:	b003      	add	sp, #12
   d5206:	bd30      	pop	{r4, r5, pc}

000d5208 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5208:	4770      	bx	lr

000d520a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d520a:	b538      	push	{r3, r4, r5, lr}
   d520c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d520e:	681a      	ldr	r2, [r3, #0]
   d5210:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5212:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5214:	da05      	bge.n	d5222 <_ZN9TCPClient9connectedEv+0x18>
   d5216:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d521a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d521e:	429a      	cmp	r2, r3
   d5220:	d001      	beq.n	d5226 <_ZN9TCPClient9connectedEv+0x1c>
   d5222:	2501      	movs	r5, #1
   d5224:	e00b      	b.n	d523e <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5226:	6803      	ldr	r3, [r0, #0]
   d5228:	691b      	ldr	r3, [r3, #16]
   d522a:	4798      	blx	r3
   d522c:	2800      	cmp	r0, #0
   d522e:	bf14      	ite	ne
   d5230:	2501      	movne	r5, #1
   d5232:	2500      	moveq	r5, #0
        if (!rv) {
   d5234:	d103      	bne.n	d523e <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5236:	6823      	ldr	r3, [r4, #0]
   d5238:	4620      	mov	r0, r4
   d523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d523c:	4798      	blx	r3
        }
    }
    return rv;
}
   d523e:	4628      	mov	r0, r5
   d5240:	bd38      	pop	{r3, r4, r5, pc}

000d5242 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5242:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5244:	6818      	ldr	r0, [r3, #0]
}
   d5246:	43c0      	mvns	r0, r0
   d5248:	0fc0      	lsrs	r0, r0, #31
   d524a:	4770      	bx	lr

000d524c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d524c:	4770      	bx	lr

000d524e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d524e:	2000      	movs	r0, #0
   d5250:	4770      	bx	lr

000d5252 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5252:	b510      	push	{r4, lr}
   d5254:	2114      	movs	r1, #20
   d5256:	4604      	mov	r4, r0
   d5258:	f000 fb47 	bl	d58ea <_ZdlPvj>
   d525c:	4620      	mov	r0, r4
   d525e:	bd10      	pop	{r4, pc}

000d5260 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5260:	f7fe bf1b 	b.w	d409a <_ZdlPv>

000d5264 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5266:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5268:	2200      	movs	r2, #0
   d526a:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d526c:	9202      	str	r2, [sp, #8]
   d526e:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5270:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5272:	4604      	mov	r4, r0
   d5274:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5276:	d008      	beq.n	d528a <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d527c:	fbb3 f1f2 	udiv	r1, r3, r2
   d5280:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5282:	fb02 3111 	mls	r1, r2, r1, r3
   d5286:	434a      	muls	r2, r1
   d5288:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d528a:	6960      	ldr	r0, [r4, #20]
   d528c:	2308      	movs	r3, #8
   d528e:	9300      	str	r3, [sp, #0]
   d5290:	f241 0205 	movw	r2, #4101	; 0x1005
   d5294:	446b      	add	r3, sp
   d5296:	f640 71ff 	movw	r1, #4095	; 0xfff
   d529a:	6800      	ldr	r0, [r0, #0]
   d529c:	f7ff f9d4 	bl	d4648 <sock_setsockopt>
    if (ret < 0) {
   d52a0:	2800      	cmp	r0, #0
   d52a2:	db08      	blt.n	d52b6 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d52a4:	6960      	ldr	r0, [r4, #20]
   d52a6:	2300      	movs	r3, #0
   d52a8:	4632      	mov	r2, r6
   d52aa:	4629      	mov	r1, r5
   d52ac:	6800      	ldr	r0, [r0, #0]
   d52ae:	f7ff f9eb 	bl	d4688 <sock_send>
    if (ret < 0) {
   d52b2:	2800      	cmp	r0, #0
   d52b4:	da04      	bge.n	d52c0 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d52b6:	f7ff facb 	bl	d4850 <__errno>
   d52ba:	6803      	ldr	r3, [r0, #0]
   d52bc:	6063      	str	r3, [r4, #4]
   d52be:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d52c0:	b004      	add	sp, #16
   d52c2:	bd70      	pop	{r4, r5, r6, pc}

000d52c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52c4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d52c6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d52c8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d52ca:	689b      	ldr	r3, [r3, #8]
   d52cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d52ce:	68a3      	ldr	r3, [r4, #8]
   d52d0:	3b01      	subs	r3, #1
   d52d2:	60a3      	str	r3, [r4, #8]
   d52d4:	b92b      	cbnz	r3, d52e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d52d6:	6823      	ldr	r3, [r4, #0]
   d52d8:	4620      	mov	r0, r4
   d52da:	68db      	ldr	r3, [r3, #12]
        }
    }
   d52dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d52e0:	4718      	bx	r3
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d52e4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d52e6:	4604      	mov	r4, r0
   d52e8:	694d      	ldr	r5, [r1, #20]
   d52ea:	4b05      	ldr	r3, [pc, #20]	; (d5300 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d52ec:	f844 3b04 	str.w	r3, [r4], #4
   d52f0:	358c      	adds	r5, #140	; 0x8c
   d52f2:	4606      	mov	r6, r0
   d52f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d52f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52f8:	682b      	ldr	r3, [r5, #0]
   d52fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d52fc:	4630      	mov	r0, r6
   d52fe:	bd70      	pop	{r4, r5, r6, pc}
   d5300:	000d5f9c 	.word	0x000d5f9c

000d5304 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5304:	b510      	push	{r4, lr}
   d5306:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5308:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d530c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5310:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5312:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5314:	d005      	beq.n	d5322 <_ZN9TCPClient4peekEv+0x1e>
   d5316:	6962      	ldr	r2, [r4, #20]
   d5318:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d531c:	4413      	add	r3, r2
   d531e:	7918      	ldrb	r0, [r3, #4]
   d5320:	bd10      	pop	{r4, pc}
   d5322:	6803      	ldr	r3, [r0, #0]
   d5324:	691b      	ldr	r3, [r3, #16]
   d5326:	4798      	blx	r3
   d5328:	2800      	cmp	r0, #0
   d532a:	d1f4      	bne.n	d5316 <_ZN9TCPClient4peekEv+0x12>
   d532c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5330:	bd10      	pop	{r4, pc}

000d5332 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5332:	b510      	push	{r4, lr}
   d5334:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5336:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d533a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d533e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5340:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5342:	d008      	beq.n	d5356 <_ZN9TCPClient4readEv+0x24>
   d5344:	6962      	ldr	r2, [r4, #20]
   d5346:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d534a:	1c59      	adds	r1, r3, #1
   d534c:	4413      	add	r3, r2
   d534e:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5352:	7918      	ldrb	r0, [r3, #4]
   d5354:	bd10      	pop	{r4, pc}
   d5356:	6803      	ldr	r3, [r0, #0]
   d5358:	691b      	ldr	r3, [r3, #16]
   d535a:	4798      	blx	r3
   d535c:	2800      	cmp	r0, #0
   d535e:	d1f1      	bne.n	d5344 <_ZN9TCPClient4readEv+0x12>
   d5360:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5364:	bd10      	pop	{r4, pc}

000d5366 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5368:	6943      	ldr	r3, [r0, #20]
   d536a:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d536c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5370:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5374:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5376:	4605      	mov	r5, r0
   d5378:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d537a:	d106      	bne.n	d538a <_ZN9TCPClient4readEPhj+0x24>
   d537c:	6803      	ldr	r3, [r0, #0]
   d537e:	691b      	ldr	r3, [r3, #16]
   d5380:	4798      	blx	r3
   d5382:	b910      	cbnz	r0, d538a <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5384:	f04f 34ff 	mov.w	r4, #4294967295
   d5388:	e014      	b.n	d53b4 <_ZN9TCPClient4readEPhj+0x4e>
   d538a:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d538c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5390:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5394:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5396:	42bc      	cmp	r4, r7
   d5398:	bf28      	it	cs
   d539a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d539c:	4419      	add	r1, r3
   d539e:	4622      	mov	r2, r4
   d53a0:	3104      	adds	r1, #4
   d53a2:	4630      	mov	r0, r6
   d53a4:	f000 fbfe 	bl	d5ba4 <memcpy>
   d53a8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d53aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d53ae:	4423      	add	r3, r4
   d53b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d53b4:	4620      	mov	r0, r4
   d53b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53b8 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d53b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53bc:	4698      	mov	r8, r3
    stop();
   d53be:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d53c0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d53c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d53c4:	460d      	mov	r5, r1
   d53c6:	4606      	mov	r6, r0
   d53c8:	4617      	mov	r7, r2
    stop();
   d53ca:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d53cc:	ab12      	add	r3, sp, #72	; 0x48
   d53ce:	2400      	movs	r4, #0
   d53d0:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d53d4:	4622      	mov	r2, r4
   d53d6:	4621      	mov	r1, r4
   d53d8:	4628      	mov	r0, r5
   d53da:	f7ff f895 	bl	d4508 <netdb_getaddrinfo>
   d53de:	4681      	mov	r9, r0
   d53e0:	2800      	cmp	r0, #0
   d53e2:	d13d      	bne.n	d5460 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d53e4:	9b00      	ldr	r3, [sp, #0]
   d53e6:	2b00      	cmp	r3, #0
   d53e8:	d056      	beq.n	d5498 <_ZN9TCPClient7connectEPKctm+0xe0>
   d53ea:	695b      	ldr	r3, [r3, #20]
   d53ec:	2b00      	cmp	r3, #0
   d53ee:	d053      	beq.n	d5498 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d53f0:	a806      	add	r0, sp, #24
   d53f2:	f7ff fc95 	bl	d4d20 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d53f6:	9b00      	ldr	r3, [sp, #0]
   d53f8:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d53fa:	7863      	ldrb	r3, [r4, #1]
   d53fc:	2b02      	cmp	r3, #2
   d53fe:	d101      	bne.n	d5404 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5400:	1d21      	adds	r1, r4, #4
   d5402:	e013      	b.n	d542c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5404:	2b0a      	cmp	r3, #10
   d5406:	d114      	bne.n	d5432 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5408:	2211      	movs	r2, #17
   d540a:	4649      	mov	r1, r9
   d540c:	a801      	add	r0, sp, #4
   d540e:	f000 fbd4 	bl	d5bba <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5412:	68a3      	ldr	r3, [r4, #8]
   d5414:	bb33      	cbnz	r3, d5464 <_ZN9TCPClient7connectEPKctm+0xac>
   d5416:	68e3      	ldr	r3, [r4, #12]
   d5418:	bb23      	cbnz	r3, d5464 <_ZN9TCPClient7connectEPKctm+0xac>
   d541a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d541e:	6925      	ldr	r5, [r4, #16]
   d5420:	f7ff f8ca 	bl	d45b8 <inet_htonl>
   d5424:	4285      	cmp	r5, r0
   d5426:	d11d      	bne.n	d5464 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5428:	f104 0114 	add.w	r1, r4, #20
   d542c:	a806      	add	r0, sp, #24
   d542e:	f7ff fcba 	bl	d4da6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5432:	a806      	add	r0, sp, #24
   d5434:	f7ff fc94 	bl	d4d60 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5438:	2800      	cmp	r0, #0
   d543a:	d02d      	beq.n	d5498 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d543c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d543e:	ad07      	add	r5, sp, #28
   d5440:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5444:	4b18      	ldr	r3, [pc, #96]	; (d54a8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d5446:	930c      	str	r3, [sp, #48]	; 0x30
   d5448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d544a:	ac0d      	add	r4, sp, #52	; 0x34
   d544c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d544e:	682b      	ldr	r3, [r5, #0]
   d5450:	7023      	strb	r3, [r4, #0]
   d5452:	463a      	mov	r2, r7
   d5454:	4643      	mov	r3, r8
   d5456:	a90c      	add	r1, sp, #48	; 0x30
   d5458:	4630      	mov	r0, r6
   d545a:	47c8      	blx	r9
   d545c:	4681      	mov	r9, r0
   d545e:	e01b      	b.n	d5498 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5460:	46a1      	mov	r9, r4
   d5462:	e019      	b.n	d5498 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5464:	f104 0308 	add.w	r3, r4, #8
   d5468:	ad01      	add	r5, sp, #4
   d546a:	3418      	adds	r4, #24
   d546c:	6818      	ldr	r0, [r3, #0]
   d546e:	6859      	ldr	r1, [r3, #4]
   d5470:	462a      	mov	r2, r5
   d5472:	c203      	stmia	r2!, {r0, r1}
   d5474:	3308      	adds	r3, #8
   d5476:	42a3      	cmp	r3, r4
   d5478:	4615      	mov	r5, r2
   d547a:	d1f7      	bne.n	d546c <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d547c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d547e:	a901      	add	r1, sp, #4
   d5480:	a80c      	add	r0, sp, #48	; 0x30
   d5482:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5484:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5488:	f7ff fc58 	bl	d4d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d548c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d548e:	ac07      	add	r4, sp, #28
   d5490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5492:	682b      	ldr	r3, [r5, #0]
   d5494:	7023      	strb	r3, [r4, #0]
   d5496:	e7cc      	b.n	d5432 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5498:	9800      	ldr	r0, [sp, #0]
   d549a:	f7ff f82d 	bl	d44f8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d549e:	4648      	mov	r0, r9
   d54a0:	b013      	add	sp, #76	; 0x4c
   d54a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d54a6:	bf00      	nop
   d54a8:	000d5f9c 	.word	0x000d5f9c

000d54ac <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d54ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d54ae:	2300      	movs	r3, #0
   d54b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d54b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d54b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d54ba:	4770      	bx	lr

000d54bc <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d54bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54c0:	461e      	mov	r6, r3
    stop();
   d54c2:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d54c4:	460c      	mov	r4, r1
   d54c6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d54c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d54ca:	4605      	mov	r5, r0
   d54cc:	4617      	mov	r7, r2
    stop();
   d54ce:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d54d0:	7d23      	ldrb	r3, [r4, #20]
   d54d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d54d6:	2b04      	cmp	r3, #4
   d54d8:	bf0c      	ite	eq
   d54da:	2002      	moveq	r0, #2
   d54dc:	200a      	movne	r0, #10
   d54de:	2206      	movs	r2, #6
   d54e0:	2101      	movs	r1, #1
   d54e2:	f7ff f8d9 	bl	d4698 <sock_socket>
   d54e6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d54ea:	696b      	ldr	r3, [r5, #20]
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	2b00      	cmp	r3, #0
   d54f0:	db18      	blt.n	d5524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d54f2:	4628      	mov	r0, r5
   d54f4:	f7ff ffda 	bl	d54ac <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d54f8:	b1d6      	cbz	r6, d5530 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d54fa:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d54fc:	a903      	add	r1, sp, #12
   d54fe:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5500:	9303      	str	r3, [sp, #12]
   d5502:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5506:	f7ff f80f 	bl	d4528 <if_index_to_name>
   d550a:	b958      	cbnz	r0, d5524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d550c:	6968      	ldr	r0, [r5, #20]
   d550e:	2306      	movs	r3, #6
   d5510:	9300      	str	r3, [sp, #0]
   d5512:	f241 020b 	movw	r2, #4107	; 0x100b
   d5516:	ab03      	add	r3, sp, #12
   d5518:	f640 71ff 	movw	r1, #4095	; 0xfff
   d551c:	6800      	ldr	r0, [r0, #0]
   d551e:	f7ff f893 	bl	d4648 <sock_setsockopt>
   d5522:	b128      	cbz	r0, d5530 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5524:	682b      	ldr	r3, [r5, #0]
   d5526:	4628      	mov	r0, r5
   d5528:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d552a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d552c:	4798      	blx	r3
   d552e:	e03b      	b.n	d55a8 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5530:	261c      	movs	r6, #28
   d5532:	4632      	mov	r2, r6
   d5534:	2100      	movs	r1, #0
   d5536:	a803      	add	r0, sp, #12
   d5538:	f000 fb3f 	bl	d5bba <memset>
    if (ip.version() == 4) {
   d553c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d553e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5542:	2b04      	cmp	r3, #4
   d5544:	d10c      	bne.n	d5560 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5546:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5548:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d554a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d554e:	f7ff f83b 	bl	d45c8 <inet_htons>
   d5552:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5556:	6860      	ldr	r0, [r4, #4]
   d5558:	f7ff f82e 	bl	d45b8 <inet_htonl>
   d555c:	9004      	str	r0, [sp, #16]
   d555e:	e013      	b.n	d5588 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5560:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5562:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5564:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5568:	f7ff f82e 	bl	d45c8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d556c:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d556e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5572:	1d23      	adds	r3, r4, #4
   d5574:	f104 0714 	add.w	r7, r4, #20
   d5578:	6818      	ldr	r0, [r3, #0]
   d557a:	6859      	ldr	r1, [r3, #4]
   d557c:	4632      	mov	r2, r6
   d557e:	c203      	stmia	r2!, {r0, r1}
   d5580:	3308      	adds	r3, #8
   d5582:	42bb      	cmp	r3, r7
   d5584:	4616      	mov	r6, r2
   d5586:	d1f7      	bne.n	d5578 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5588:	696b      	ldr	r3, [r5, #20]
   d558a:	221c      	movs	r2, #28
   d558c:	a903      	add	r1, sp, #12
   d558e:	6818      	ldr	r0, [r3, #0]
   d5590:	f7ff f86a 	bl	d4668 <sock_connect>
   d5594:	2800      	cmp	r0, #0
   d5596:	d1c5      	bne.n	d5524 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d5598:	3404      	adds	r4, #4
   d559a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d559c:	696d      	ldr	r5, [r5, #20]
   d559e:	358c      	adds	r5, #140	; 0x8c
   d55a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d55a2:	6823      	ldr	r3, [r4, #0]
   d55a4:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d55a6:	2401      	movs	r4, #1
}
   d55a8:	4620      	mov	r0, r4
   d55aa:	b00a      	add	sp, #40	; 0x28
   d55ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d55b0 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d55b0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d55b2:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d55b4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d55b6:	6818      	ldr	r0, [r3, #0]
   d55b8:	2800      	cmp	r0, #0
   d55ba:	db01      	blt.n	d55c0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d55bc:	f7ff f84c 	bl	d4658 <sock_close>
   d55c0:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d55c2:	f04f 32ff 	mov.w	r2, #4294967295
   d55c6:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55c8:	6960      	ldr	r0, [r4, #20]
   d55ca:	2211      	movs	r2, #17
   d55cc:	2100      	movs	r1, #0
   d55ce:	308c      	adds	r0, #140	; 0x8c
   d55d0:	f000 faf3 	bl	d5bba <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d55d4:	4620      	mov	r0, r4
}
   d55d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d55da:	f7ff bf67 	b.w	d54ac <_ZN9TCPClient12flush_bufferEv>
	...

000d55e0 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d55e0:	b530      	push	{r4, r5, lr}
   d55e2:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d55e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d55e8:	b08b      	sub	sp, #44	; 0x2c
   d55ea:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d55ec:	b11b      	cbz	r3, d55f6 <_ZN9TCPClient9availableEv+0x16>
   d55ee:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d55f2:	429a      	cmp	r2, r3
   d55f4:	d040      	beq.n	d5678 <_ZN9TCPClient9availableEv+0x98>
   d55f6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d55f8:	6818      	ldr	r0, [r3, #0]
   d55fa:	2800      	cmp	r0, #0
   d55fc:	db3f      	blt.n	d567e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d55fe:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5602:	2d7f      	cmp	r5, #127	; 0x7f
   d5604:	d83b      	bhi.n	d567e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5606:	1d19      	adds	r1, r3, #4
   d5608:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d560c:	2308      	movs	r3, #8
   d560e:	4429      	add	r1, r5
   d5610:	f7ff f832 	bl	d4678 <sock_recv>
            if (ret > 0) {
   d5614:	2800      	cmp	r0, #0
   d5616:	dd0c      	ble.n	d5632 <_ZN9TCPClient9availableEv+0x52>
   d5618:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d561a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d561e:	b90a      	cbnz	r2, d5624 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5620:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5624:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5626:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d562a:	4418      	add	r0, r3
   d562c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5630:	e025      	b.n	d567e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5632:	f7ff f90d 	bl	d4850 <__errno>
   d5636:	6803      	ldr	r3, [r0, #0]
   d5638:	2b0b      	cmp	r3, #11
   d563a:	d020      	beq.n	d567e <_ZN9TCPClient9availableEv+0x9e>
   d563c:	f7ff f908 	bl	d4850 <__errno>
   d5640:	6803      	ldr	r3, [r0, #0]
   d5642:	2b0b      	cmp	r3, #11
   d5644:	d01b      	beq.n	d567e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5646:	2320      	movs	r3, #32
   d5648:	2500      	movs	r5, #0
   d564a:	9302      	str	r3, [sp, #8]
   d564c:	9503      	str	r5, [sp, #12]
   d564e:	f7ff f8ff 	bl	d4850 <__errno>
   d5652:	6803      	ldr	r3, [r0, #0]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	4b0e      	ldr	r3, [pc, #56]	; (d5690 <_ZN9TCPClient9availableEv+0xb0>)
   d5658:	9300      	str	r3, [sp, #0]
   d565a:	aa02      	add	r2, sp, #8
   d565c:	462b      	mov	r3, r5
   d565e:	490d      	ldr	r1, [pc, #52]	; (d5694 <_ZN9TCPClient9availableEv+0xb4>)
   d5660:	2032      	movs	r0, #50	; 0x32
   d5662:	f7ff f859 	bl	d4718 <log_message>
                    sock_close(d_->sock);
   d5666:	6963      	ldr	r3, [r4, #20]
   d5668:	6818      	ldr	r0, [r3, #0]
   d566a:	f7fe fff5 	bl	d4658 <sock_close>
   d566e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5670:	f04f 32ff 	mov.w	r2, #4294967295
   d5674:	601a      	str	r2, [r3, #0]
   d5676:	e002      	b.n	d567e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5678:	f7ff ff18 	bl	d54ac <_ZN9TCPClient12flush_bufferEv>
   d567c:	e7bb      	b.n	d55f6 <_ZN9TCPClient9availableEv+0x16>
   d567e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5680:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5684:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d5688:	1a18      	subs	r0, r3, r0
}
   d568a:	b00b      	add	sp, #44	; 0x2c
   d568c:	bd30      	pop	{r4, r5, pc}
   d568e:	bf00      	nop
   d5690:	000d60df 	.word	0x000d60df
   d5694:	000d60d8 	.word	0x000d60d8

000d5698 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5698:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d569a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d569c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d569e:	6001      	str	r1, [r0, #0]
   d56a0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d56a4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d56a8:	3088      	adds	r0, #136	; 0x88
   d56aa:	f7ff fb39 	bl	d4d20 <_ZN9IPAddressC1Ev>
}
   d56ae:	4620      	mov	r0, r4
   d56b0:	bd10      	pop	{r4, pc}
	...

000d56b4 <_ZN9TCPClientC1Ei>:
   d56b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d56b8:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d56ba:	2300      	movs	r3, #0
   d56bc:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d56be:	4a14      	ldr	r2, [pc, #80]	; (d5710 <_ZN9TCPClientC1Ei+0x5c>)
   d56c0:	6043      	str	r3, [r0, #4]
   d56c2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d56c4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d56c6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d56c8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d56ca:	20a0      	movs	r0, #160	; 0xa0
   d56cc:	460e      	mov	r6, r1
   d56ce:	f7fe fce2 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d56d2:	4605      	mov	r5, r0
   d56d4:	b110      	cbz	r0, d56dc <_ZN9TCPClientC1Ei+0x28>
   d56d6:	4631      	mov	r1, r6
   d56d8:	f7ff ffde 	bl	d5698 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d56dc:	2014      	movs	r0, #20
   d56de:	f7fe fcda 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d56e2:	4603      	mov	r3, r0
   d56e4:	b128      	cbz	r0, d56f2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d56e6:	2201      	movs	r2, #1
   d56e8:	6042      	str	r2, [r0, #4]
   d56ea:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d56ec:	4a09      	ldr	r2, [pc, #36]	; (d5714 <_ZN9TCPClientC1Ei+0x60>)
   d56ee:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d56f0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d56f2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d56f4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d56f6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d56f8:	b128      	cbz	r0, d5706 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d56fa:	6843      	ldr	r3, [r0, #4]
   d56fc:	3b01      	subs	r3, #1
   d56fe:	6043      	str	r3, [r0, #4]
   d5700:	b90b      	cbnz	r3, d5706 <_ZN9TCPClientC1Ei+0x52>
   d5702:	f7ff fddf 	bl	d52c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d5706:	4620      	mov	r0, r4
   d5708:	f7ff fed0 	bl	d54ac <_ZN9TCPClient12flush_bufferEv>
}
   d570c:	4620      	mov	r0, r4
   d570e:	bd70      	pop	{r4, r5, r6, pc}
   d5710:	000d6094 	.word	0x000d6094
   d5714:	000d6078 	.word	0x000d6078

000d5718 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5718:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d571a:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d571e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5720:	f7ff ffc8 	bl	d56b4 <_ZN9TCPClientC1Ei>
}
   d5724:	4620      	mov	r0, r4
   d5726:	bd10      	pop	{r4, pc}

000d5728 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d5728:	b510      	push	{r4, lr}
   d572a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d572c:	6800      	ldr	r0, [r0, #0]
   d572e:	2800      	cmp	r0, #0
   d5730:	db01      	blt.n	d5736 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5732:	f7fe ff91 	bl	d4658 <sock_close>
    }
}
   d5736:	4620      	mov	r0, r4
   d5738:	bd10      	pop	{r4, pc}

000d573a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d573a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d573c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d573e:	4620      	mov	r0, r4
   d5740:	f7ff fff2 	bl	d5728 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5744:	b124      	cbz	r4, d5750 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5746:	4620      	mov	r0, r4
   d5748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d574c:	f7fe bca5 	b.w	d409a <_ZdlPv>
   d5750:	bd10      	pop	{r4, pc}

000d5752 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5752:	2300      	movs	r3, #0
   d5754:	461a      	mov	r2, r3
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7ff b80a 	b.w	d4770 <network_connect>

000d575c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d575c:	2200      	movs	r2, #0
   d575e:	2102      	movs	r1, #2
   d5760:	6840      	ldr	r0, [r0, #4]
   d5762:	f7ff b815 	b.w	d4790 <network_disconnect>

000d5766 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5766:	2200      	movs	r2, #0
   d5768:	4611      	mov	r1, r2
   d576a:	6840      	ldr	r0, [r0, #4]
   d576c:	f7ff b808 	b.w	d4780 <network_connecting>

000d5770 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5770:	2200      	movs	r2, #0
   d5772:	4611      	mov	r1, r2
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	f7ff b813 	b.w	d47a0 <network_ready>

000d577a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d577a:	2300      	movs	r3, #0
   d577c:	461a      	mov	r2, r3
   d577e:	4619      	mov	r1, r3
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	f7ff b815 	b.w	d47b0 <network_on>

000d5786 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5786:	2300      	movs	r3, #0
   d5788:	461a      	mov	r2, r3
   d578a:	4619      	mov	r1, r3
   d578c:	6840      	ldr	r0, [r0, #4]
   d578e:	f7ff b817 	b.w	d47c0 <network_off>

000d5792 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5792:	2200      	movs	r2, #0
   d5794:	f081 0101 	eor.w	r1, r1, #1
   d5798:	6840      	ldr	r0, [r0, #4]
   d579a:	f7ff b819 	b.w	d47d0 <network_listen>

000d579e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d579e:	2200      	movs	r2, #0
   d57a0:	6840      	ldr	r0, [r0, #4]
   d57a2:	f7ff b825 	b.w	d47f0 <network_set_listen_timeout>

000d57a6 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d57a6:	2200      	movs	r2, #0
   d57a8:	4611      	mov	r1, r2
   d57aa:	6840      	ldr	r0, [r0, #4]
   d57ac:	f7ff b828 	b.w	d4800 <network_get_listen_timeout>

000d57b0 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d57b0:	2200      	movs	r2, #0
   d57b2:	4611      	mov	r1, r2
   d57b4:	6840      	ldr	r0, [r0, #4]
   d57b6:	f7ff b813 	b.w	d47e0 <network_listening>

000d57ba <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d57ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57be:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d57c0:	b095      	sub	sp, #84	; 0x54
   d57c2:	4616      	mov	r6, r2
   d57c4:	460d      	mov	r5, r1
   d57c6:	4607      	mov	r7, r0
    IPAddress addr;
   d57c8:	f7ff faaa 	bl	d4d20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d57cc:	4621      	mov	r1, r4
   d57ce:	2220      	movs	r2, #32
   d57d0:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57d2:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d57d4:	f000 f9f1 	bl	d5bba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57d8:	2340      	movs	r3, #64	; 0x40
   d57da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57dc:	4621      	mov	r1, r4
   d57de:	466b      	mov	r3, sp
   d57e0:	aa0c      	add	r2, sp, #48	; 0x30
   d57e2:	4630      	mov	r0, r6
   d57e4:	f7fe fe90 	bl	d4508 <netdb_getaddrinfo>
    if (!r) {
   d57e8:	4604      	mov	r4, r0
   d57ea:	2800      	cmp	r0, #0
   d57ec:	d144      	bne.n	d5878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57ee:	4602      	mov	r2, r0
   d57f0:	2101      	movs	r1, #1
   d57f2:	6868      	ldr	r0, [r5, #4]
   d57f4:	f7fe ffd4 	bl	d47a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57f8:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57fc:	4622      	mov	r2, r4
   d57fe:	6868      	ldr	r0, [r5, #4]
   d5800:	f7fe ffce 	bl	d47a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5804:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5806:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5808:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d580a:	2e00      	cmp	r6, #0
   d580c:	d034      	beq.n	d5878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d580e:	2900      	cmp	r1, #0
   d5810:	d132      	bne.n	d5878 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5812:	6873      	ldr	r3, [r6, #4]
   d5814:	2b02      	cmp	r3, #2
   d5816:	d002      	beq.n	d581e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5818:	2b0a      	cmp	r3, #10
   d581a:	d009      	beq.n	d5830 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d581c:	e02a      	b.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d581e:	f1b8 0f00 	cmp.w	r8, #0
   d5822:	d027      	beq.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5824:	6971      	ldr	r1, [r6, #20]
   d5826:	4638      	mov	r0, r7
   d5828:	3104      	adds	r1, #4
   d582a:	f7ff fabc 	bl	d4da6 <_ZN9IPAddressaSEPKh>
   d582e:	e020      	b.n	d5872 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5830:	f1b9 0f00 	cmp.w	r9, #0
   d5834:	d01e      	beq.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5836:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5838:	2211      	movs	r2, #17
   d583a:	a801      	add	r0, sp, #4
   d583c:	f000 f9bd 	bl	d5bba <memset>
                    a.v = 6;
   d5840:	2306      	movs	r3, #6
   d5842:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5846:	ad01      	add	r5, sp, #4
   d5848:	f104 0308 	add.w	r3, r4, #8
   d584c:	3418      	adds	r4, #24
   d584e:	6818      	ldr	r0, [r3, #0]
   d5850:	6859      	ldr	r1, [r3, #4]
   d5852:	462a      	mov	r2, r5
   d5854:	c203      	stmia	r2!, {r0, r1}
   d5856:	3308      	adds	r3, #8
   d5858:	42a3      	cmp	r3, r4
   d585a:	4615      	mov	r5, r2
   d585c:	d1f7      	bne.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d585e:	a901      	add	r1, sp, #4
   d5860:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5862:	ad07      	add	r5, sp, #28
   d5864:	f7ff fa6a 	bl	d4d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d586a:	1d3c      	adds	r4, r7, #4
   d586c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d586e:	682b      	ldr	r3, [r5, #0]
   d5870:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5872:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5874:	69f6      	ldr	r6, [r6, #28]
   d5876:	e7c8      	b.n	d580a <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5878:	9800      	ldr	r0, [sp, #0]
   d587a:	f7fe fe3d 	bl	d44f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d587e:	4638      	mov	r0, r7
   d5880:	b015      	add	sp, #84	; 0x54
   d5882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5888 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5888:	4b02      	ldr	r3, [pc, #8]	; (d5894 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d588a:	4a03      	ldr	r2, [pc, #12]	; (d5898 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d588c:	601a      	str	r2, [r3, #0]
   d588e:	2200      	movs	r2, #0
   d5890:	605a      	str	r2, [r3, #4]
   d5892:	4770      	bx	lr
   d5894:	2003e724 	.word	0x2003e724
   d5898:	000d60f8 	.word	0x000d60f8

000d589c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d589c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d589e:	4c0c      	ldr	r4, [pc, #48]	; (d58d0 <_GLOBAL__sub_I_SPI+0x34>)
   d58a0:	4e0c      	ldr	r6, [pc, #48]	; (d58d4 <_GLOBAL__sub_I_SPI+0x38>)
   d58a2:	4d0d      	ldr	r5, [pc, #52]	; (d58d8 <_GLOBAL__sub_I_SPI+0x3c>)
   d58a4:	2100      	movs	r1, #0
   d58a6:	4620      	mov	r0, r4
   d58a8:	f7ff f820 	bl	d48ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58ae:	4c0b      	ldr	r4, [pc, #44]	; (d58dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d58b0:	4632      	mov	r2, r6
   d58b2:	4629      	mov	r1, r5
   d58b4:	f000 f814 	bl	d58e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58b8:	2101      	movs	r1, #1
   d58ba:	4620      	mov	r0, r4
   d58bc:	f7ff f816 	bl	d48ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58c0:	4632      	mov	r2, r6
   d58c2:	4629      	mov	r1, r5
   d58c4:	4620      	mov	r0, r4
   d58c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d58ca:	f000 b809 	b.w	d58e0 <__aeabi_atexit>
   d58ce:	bf00      	nop
   d58d0:	2003e72c 	.word	0x2003e72c
   d58d4:	2003df34 	.word	0x2003df34
   d58d8:	000d48dd 	.word	0x000d48dd
   d58dc:	2003e73c 	.word	0x2003e73c

000d58e0 <__aeabi_atexit>:
   d58e0:	460b      	mov	r3, r1
   d58e2:	4601      	mov	r1, r0
   d58e4:	4618      	mov	r0, r3
   d58e6:	f000 b94f 	b.w	d5b88 <__cxa_atexit>

000d58ea <_ZdlPvj>:
   d58ea:	f7fe bbd6 	b.w	d409a <_ZdlPv>
	...

000d58f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d58f0:	4b18      	ldr	r3, [pc, #96]	; (d5954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d58f2:	681a      	ldr	r2, [r3, #0]
   d58f4:	07d1      	lsls	r1, r2, #31
   d58f6:	bf5c      	itt	pl
   d58f8:	2201      	movpl	r2, #1
   d58fa:	601a      	strpl	r2, [r3, #0]
   d58fc:	4b16      	ldr	r3, [pc, #88]	; (d5958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d58fe:	681a      	ldr	r2, [r3, #0]
   d5900:	07d2      	lsls	r2, r2, #31
   d5902:	bf5c      	itt	pl
   d5904:	2201      	movpl	r2, #1
   d5906:	601a      	strpl	r2, [r3, #0]
   d5908:	4b14      	ldr	r3, [pc, #80]	; (d595c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d0      	lsls	r0, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b12      	ldr	r3, [pc, #72]	; (d5960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d1      	lsls	r1, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b10      	ldr	r3, [pc, #64]	; (d5964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d2      	lsls	r2, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b0e      	ldr	r3, [pc, #56]	; (d5968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d0      	lsls	r0, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b0c      	ldr	r3, [pc, #48]	; (d596c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d1      	lsls	r1, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b0a      	ldr	r3, [pc, #40]	; (d5970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d2      	lsls	r2, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4770      	bx	lr
   d5952:	bf00      	nop
   d5954:	2003e76c 	.word	0x2003e76c
   d5958:	2003e768 	.word	0x2003e768
   d595c:	2003e764 	.word	0x2003e764
   d5960:	2003e760 	.word	0x2003e760
   d5964:	2003e75c 	.word	0x2003e75c
   d5968:	2003e758 	.word	0x2003e758
   d596c:	2003e754 	.word	0x2003e754
   d5970:	2003e750 	.word	0x2003e750

000d5974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5974:	4b24      	ldr	r3, [pc, #144]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d0      	lsls	r0, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4b22      	ldr	r3, [pc, #136]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d1      	lsls	r1, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4b20      	ldr	r3, [pc, #128]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d598e:	681a      	ldr	r2, [r3, #0]
   d5990:	07d2      	lsls	r2, r2, #31
   d5992:	bf5c      	itt	pl
   d5994:	2201      	movpl	r2, #1
   d5996:	601a      	strpl	r2, [r3, #0]
   d5998:	4b1e      	ldr	r3, [pc, #120]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d599a:	681a      	ldr	r2, [r3, #0]
   d599c:	07d0      	lsls	r0, r2, #31
   d599e:	bf5c      	itt	pl
   d59a0:	2201      	movpl	r2, #1
   d59a2:	601a      	strpl	r2, [r3, #0]
   d59a4:	4b1c      	ldr	r3, [pc, #112]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d1      	lsls	r1, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b1a      	ldr	r3, [pc, #104]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d2      	lsls	r2, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b18      	ldr	r3, [pc, #96]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d0      	lsls	r0, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b16      	ldr	r3, [pc, #88]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d1      	lsls	r1, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b14      	ldr	r3, [pc, #80]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d2      	lsls	r2, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b12      	ldr	r3, [pc, #72]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d0      	lsls	r0, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b10      	ldr	r3, [pc, #64]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d1      	lsls	r1, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b0e      	ldr	r3, [pc, #56]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d2      	lsls	r2, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4770      	bx	lr
   d5a06:	bf00      	nop
   d5a08:	2003e79c 	.word	0x2003e79c
   d5a0c:	2003e798 	.word	0x2003e798
   d5a10:	2003e794 	.word	0x2003e794
   d5a14:	2003e790 	.word	0x2003e790
   d5a18:	2003e78c 	.word	0x2003e78c
   d5a1c:	2003e788 	.word	0x2003e788
   d5a20:	2003e784 	.word	0x2003e784
   d5a24:	2003e780 	.word	0x2003e780
   d5a28:	2003e77c 	.word	0x2003e77c
   d5a2c:	2003e778 	.word	0x2003e778
   d5a30:	2003e774 	.word	0x2003e774
   d5a34:	2003e770 	.word	0x2003e770

000d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5a38:	4b24      	ldr	r3, [pc, #144]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d0      	lsls	r0, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b22      	ldr	r3, [pc, #136]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d1      	lsls	r1, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b20      	ldr	r3, [pc, #128]	; (d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d2      	lsls	r2, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b1e      	ldr	r3, [pc, #120]	; (d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d0      	lsls	r0, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b1c      	ldr	r3, [pc, #112]	; (d5adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b1a      	ldr	r3, [pc, #104]	; (d5ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b18      	ldr	r3, [pc, #96]	; (d5ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d0      	lsls	r0, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b16      	ldr	r3, [pc, #88]	; (d5ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d1      	lsls	r1, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b14      	ldr	r3, [pc, #80]	; (d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d2      	lsls	r2, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b12      	ldr	r3, [pc, #72]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d0      	lsls	r0, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b10      	ldr	r3, [pc, #64]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d1      	lsls	r1, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b0e      	ldr	r3, [pc, #56]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d2      	lsls	r2, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4770      	bx	lr
   d5aca:	bf00      	nop
   d5acc:	2003e7cc 	.word	0x2003e7cc
   d5ad0:	2003e7c8 	.word	0x2003e7c8
   d5ad4:	2003e7c4 	.word	0x2003e7c4
   d5ad8:	2003e7c0 	.word	0x2003e7c0
   d5adc:	2003e7bc 	.word	0x2003e7bc
   d5ae0:	2003e7b8 	.word	0x2003e7b8
   d5ae4:	2003e7b4 	.word	0x2003e7b4
   d5ae8:	2003e7b0 	.word	0x2003e7b0
   d5aec:	2003e7ac 	.word	0x2003e7ac
   d5af0:	2003e7a8 	.word	0x2003e7a8
   d5af4:	2003e7a4 	.word	0x2003e7a4
   d5af8:	2003e7a0 	.word	0x2003e7a0

000d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5afc:	4b18      	ldr	r3, [pc, #96]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d1      	lsls	r1, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b16      	ldr	r3, [pc, #88]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d2      	lsls	r2, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b14      	ldr	r3, [pc, #80]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d0      	lsls	r0, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b12      	ldr	r3, [pc, #72]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d1      	lsls	r1, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b10      	ldr	r3, [pc, #64]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d2      	lsls	r2, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b0e      	ldr	r3, [pc, #56]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d0      	lsls	r0, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b0c      	ldr	r3, [pc, #48]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d1      	lsls	r1, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b0a      	ldr	r3, [pc, #40]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d2      	lsls	r2, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4770      	bx	lr
   d5b5e:	bf00      	nop
   d5b60:	2003e7ec 	.word	0x2003e7ec
   d5b64:	2003e7e8 	.word	0x2003e7e8
   d5b68:	2003e7e4 	.word	0x2003e7e4
   d5b6c:	2003e7e0 	.word	0x2003e7e0
   d5b70:	2003e7dc 	.word	0x2003e7dc
   d5b74:	2003e7d8 	.word	0x2003e7d8
   d5b78:	2003e7d4 	.word	0x2003e7d4
   d5b7c:	2003e7d0 	.word	0x2003e7d0

000d5b80 <atoi>:
   d5b80:	220a      	movs	r2, #10
   d5b82:	2100      	movs	r1, #0
   d5b84:	f000 b8e2 	b.w	d5d4c <strtol>

000d5b88 <__cxa_atexit>:
   d5b88:	b510      	push	{r4, lr}
   d5b8a:	4c05      	ldr	r4, [pc, #20]	; (d5ba0 <__cxa_atexit+0x18>)
   d5b8c:	4613      	mov	r3, r2
   d5b8e:	b12c      	cbz	r4, d5b9c <__cxa_atexit+0x14>
   d5b90:	460a      	mov	r2, r1
   d5b92:	4601      	mov	r1, r0
   d5b94:	2002      	movs	r0, #2
   d5b96:	f3af 8000 	nop.w
   d5b9a:	bd10      	pop	{r4, pc}
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	bd10      	pop	{r4, pc}
   d5ba0:	00000000 	.word	0x00000000

000d5ba4 <memcpy>:
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	1e43      	subs	r3, r0, #1
   d5ba8:	440a      	add	r2, r1
   d5baa:	4291      	cmp	r1, r2
   d5bac:	d004      	beq.n	d5bb8 <memcpy+0x14>
   d5bae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5bb6:	e7f8      	b.n	d5baa <memcpy+0x6>
   d5bb8:	bd10      	pop	{r4, pc}

000d5bba <memset>:
   d5bba:	4402      	add	r2, r0
   d5bbc:	4603      	mov	r3, r0
   d5bbe:	4293      	cmp	r3, r2
   d5bc0:	d002      	beq.n	d5bc8 <memset+0xe>
   d5bc2:	f803 1b01 	strb.w	r1, [r3], #1
   d5bc6:	e7fa      	b.n	d5bbe <memset+0x4>
   d5bc8:	4770      	bx	lr
	...

000d5bcc <srand>:
   d5bcc:	b538      	push	{r3, r4, r5, lr}
   d5bce:	4b12      	ldr	r3, [pc, #72]	; (d5c18 <srand+0x4c>)
   d5bd0:	681c      	ldr	r4, [r3, #0]
   d5bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5bd4:	4605      	mov	r5, r0
   d5bd6:	b9d3      	cbnz	r3, d5c0e <srand+0x42>
   d5bd8:	2018      	movs	r0, #24
   d5bda:	f7fe fe21 	bl	d4820 <malloc>
   d5bde:	f243 330e 	movw	r3, #13070	; 0x330e
   d5be2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5be4:	8003      	strh	r3, [r0, #0]
   d5be6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5bea:	8043      	strh	r3, [r0, #2]
   d5bec:	f241 2334 	movw	r3, #4660	; 0x1234
   d5bf0:	8083      	strh	r3, [r0, #4]
   d5bf2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5bf6:	80c3      	strh	r3, [r0, #6]
   d5bf8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5bfc:	8103      	strh	r3, [r0, #8]
   d5bfe:	2305      	movs	r3, #5
   d5c00:	8143      	strh	r3, [r0, #10]
   d5c02:	230b      	movs	r3, #11
   d5c04:	8183      	strh	r3, [r0, #12]
   d5c06:	2201      	movs	r2, #1
   d5c08:	2300      	movs	r3, #0
   d5c0a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c10:	2200      	movs	r2, #0
   d5c12:	611d      	str	r5, [r3, #16]
   d5c14:	615a      	str	r2, [r3, #20]
   d5c16:	bd38      	pop	{r3, r4, r5, pc}
   d5c18:	2003df30 	.word	0x2003df30

000d5c1c <strcmp>:
   d5c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5c20:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5c24:	2a01      	cmp	r2, #1
   d5c26:	bf28      	it	cs
   d5c28:	429a      	cmpcs	r2, r3
   d5c2a:	d0f7      	beq.n	d5c1c <strcmp>
   d5c2c:	1ad0      	subs	r0, r2, r3
   d5c2e:	4770      	bx	lr

000d5c30 <strlen>:
   d5c30:	4603      	mov	r3, r0
   d5c32:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c36:	2a00      	cmp	r2, #0
   d5c38:	d1fb      	bne.n	d5c32 <strlen+0x2>
   d5c3a:	1a18      	subs	r0, r3, r0
   d5c3c:	3801      	subs	r0, #1
   d5c3e:	4770      	bx	lr

000d5c40 <_strtol_r>:
   d5c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c44:	4680      	mov	r8, r0
   d5c46:	4840      	ldr	r0, [pc, #256]	; (d5d48 <_strtol_r+0x108>)
   d5c48:	f8d0 9000 	ldr.w	r9, [r0]
   d5c4c:	460f      	mov	r7, r1
   d5c4e:	463d      	mov	r5, r7
   d5c50:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5c54:	eb09 0004 	add.w	r0, r9, r4
   d5c58:	7840      	ldrb	r0, [r0, #1]
   d5c5a:	f000 0008 	and.w	r0, r0, #8
   d5c5e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d5c62:	b108      	cbz	r0, d5c68 <_strtol_r+0x28>
   d5c64:	462f      	mov	r7, r5
   d5c66:	e7f2      	b.n	d5c4e <_strtol_r+0xe>
   d5c68:	2c2d      	cmp	r4, #45	; 0x2d
   d5c6a:	d103      	bne.n	d5c74 <_strtol_r+0x34>
   d5c6c:	1cbd      	adds	r5, r7, #2
   d5c6e:	787c      	ldrb	r4, [r7, #1]
   d5c70:	2601      	movs	r6, #1
   d5c72:	e003      	b.n	d5c7c <_strtol_r+0x3c>
   d5c74:	2c2b      	cmp	r4, #43	; 0x2b
   d5c76:	bf04      	itt	eq
   d5c78:	787c      	ldrbeq	r4, [r7, #1]
   d5c7a:	1cbd      	addeq	r5, r7, #2
   d5c7c:	b113      	cbz	r3, d5c84 <_strtol_r+0x44>
   d5c7e:	2b10      	cmp	r3, #16
   d5c80:	d10a      	bne.n	d5c98 <_strtol_r+0x58>
   d5c82:	e05b      	b.n	d5d3c <_strtol_r+0xfc>
   d5c84:	2c30      	cmp	r4, #48	; 0x30
   d5c86:	d157      	bne.n	d5d38 <_strtol_r+0xf8>
   d5c88:	7828      	ldrb	r0, [r5, #0]
   d5c8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5c8e:	2858      	cmp	r0, #88	; 0x58
   d5c90:	d14d      	bne.n	d5d2e <_strtol_r+0xee>
   d5c92:	786c      	ldrb	r4, [r5, #1]
   d5c94:	2310      	movs	r3, #16
   d5c96:	3502      	adds	r5, #2
   d5c98:	2e00      	cmp	r6, #0
   d5c9a:	bf14      	ite	ne
   d5c9c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d5ca0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d5ca4:	2700      	movs	r7, #0
   d5ca6:	fbbc faf3 	udiv	sl, ip, r3
   d5caa:	4638      	mov	r0, r7
   d5cac:	fb03 cc1a 	mls	ip, r3, sl, ip
   d5cb0:	eb09 0e04 	add.w	lr, r9, r4
   d5cb4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d5cb8:	f01e 0f04 	tst.w	lr, #4
   d5cbc:	d001      	beq.n	d5cc2 <_strtol_r+0x82>
   d5cbe:	3c30      	subs	r4, #48	; 0x30
   d5cc0:	e00b      	b.n	d5cda <_strtol_r+0x9a>
   d5cc2:	f01e 0e03 	ands.w	lr, lr, #3
   d5cc6:	d01b      	beq.n	d5d00 <_strtol_r+0xc0>
   d5cc8:	f1be 0f01 	cmp.w	lr, #1
   d5ccc:	bf0c      	ite	eq
   d5cce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d5cd2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d5cd6:	ebce 0404 	rsb	r4, lr, r4
   d5cda:	42a3      	cmp	r3, r4
   d5cdc:	dd10      	ble.n	d5d00 <_strtol_r+0xc0>
   d5cde:	f1b7 3fff 	cmp.w	r7, #4294967295
   d5ce2:	d00a      	beq.n	d5cfa <_strtol_r+0xba>
   d5ce4:	4550      	cmp	r0, sl
   d5ce6:	d806      	bhi.n	d5cf6 <_strtol_r+0xb6>
   d5ce8:	d101      	bne.n	d5cee <_strtol_r+0xae>
   d5cea:	4564      	cmp	r4, ip
   d5cec:	dc03      	bgt.n	d5cf6 <_strtol_r+0xb6>
   d5cee:	fb03 4000 	mla	r0, r3, r0, r4
   d5cf2:	2701      	movs	r7, #1
   d5cf4:	e001      	b.n	d5cfa <_strtol_r+0xba>
   d5cf6:	f04f 37ff 	mov.w	r7, #4294967295
   d5cfa:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5cfe:	e7d7      	b.n	d5cb0 <_strtol_r+0x70>
   d5d00:	1c7b      	adds	r3, r7, #1
   d5d02:	d10c      	bne.n	d5d1e <_strtol_r+0xde>
   d5d04:	2e00      	cmp	r6, #0
   d5d06:	f04f 0322 	mov.w	r3, #34	; 0x22
   d5d0a:	bf14      	ite	ne
   d5d0c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d5d10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5d14:	f8c8 3000 	str.w	r3, [r8]
   d5d18:	b92a      	cbnz	r2, d5d26 <_strtol_r+0xe6>
   d5d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5d1e:	b106      	cbz	r6, d5d22 <_strtol_r+0xe2>
   d5d20:	4240      	negs	r0, r0
   d5d22:	b172      	cbz	r2, d5d42 <_strtol_r+0x102>
   d5d24:	b107      	cbz	r7, d5d28 <_strtol_r+0xe8>
   d5d26:	1e69      	subs	r1, r5, #1
   d5d28:	6011      	str	r1, [r2, #0]
   d5d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5d2e:	2430      	movs	r4, #48	; 0x30
   d5d30:	2b00      	cmp	r3, #0
   d5d32:	d1b1      	bne.n	d5c98 <_strtol_r+0x58>
   d5d34:	2308      	movs	r3, #8
   d5d36:	e7af      	b.n	d5c98 <_strtol_r+0x58>
   d5d38:	230a      	movs	r3, #10
   d5d3a:	e7ad      	b.n	d5c98 <_strtol_r+0x58>
   d5d3c:	2c30      	cmp	r4, #48	; 0x30
   d5d3e:	d0a3      	beq.n	d5c88 <_strtol_r+0x48>
   d5d40:	e7aa      	b.n	d5c98 <_strtol_r+0x58>
   d5d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5d46:	bf00      	nop
   d5d48:	2003decc 	.word	0x2003decc

000d5d4c <strtol>:
   d5d4c:	4613      	mov	r3, r2
   d5d4e:	460a      	mov	r2, r1
   d5d50:	4601      	mov	r1, r0
   d5d52:	4802      	ldr	r0, [pc, #8]	; (d5d5c <strtol+0x10>)
   d5d54:	6800      	ldr	r0, [r0, #0]
   d5d56:	f7ff bf73 	b.w	d5c40 <_strtol_r>
   d5d5a:	bf00      	nop
   d5d5c:	2003df30 	.word	0x2003df30

000d5d60 <dynalib_user>:
   d5d60:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d5d70:	00000000 6c707041 74616369 3e6e6f69     ....Application>
   d5d80:	61745309 6f207472 6f4c2066 002e706f     .Start of Loop..
   d5d90:	752e7377 62756373 632e6465 2f006d6f     ws.uscubed.com./
   d5da0:	74726150 656c6369 65726944 612e7463     ParticleDirect.a
   d5db0:	00787073 4e415952 53495254 4f4a4f4e     spx.RYANTRISNOJO
   d5dc0:	47004f59 41005445 696c7070 69746163     YO.GET.Applicati
   d5dd0:	093e6e6f 70736552 65736e6f 61747320     on>.Response sta
   d5de0:	3a737574 70410020 63696c70 6f697461     tus: .Applicatio
   d5df0:	48093e6e 20505454 70736552 65736e6f     n>.HTTP Response
   d5e00:	646f4220 00203a79 65636341 2a007470      Body: .Accept.*
   d5e10:	20002a2f 50545448 302e312f 63000a0d     /*. HTTP/1.0...c
   d5e20:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
   d5e30:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
   d5e40:	00687467 54534f50 00000000              gth.POST....

000d5e4c <_ZTVN5spark13EthernetClassE>:
	...
   d5e54:	000d48bf 000d48b5 000d48ab 000d48a1     .H...H...H...H..
   d5e64:	000d4895 000d4889 000d487d 000d4875     .H...H..}H..uH..
   d5e74:	000d486b 000d4861 000d57bb              kH..aH...W..

000d5e80 <_ZTV8SPIClass>:
	...
   d5e88:	000d48dd 000d48df 64756162 72655300     .H...H..baud.Ser
   d5e98:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d5ea8:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d5eb8:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d5ec8:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d5ed8:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d5ee8:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d5ef8:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d5f08:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d5f18:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d5f28:	69617465 3d20736c 00660020 66006e6c     etails = .f.ln.f
   d5f38:	6f63006e 64006564 69617465 6f6e006c     n.code.detail.no
   d5f48:	7400656e 65636172 666e6900 6177006f     ne.trace.info.wa
   d5f58:	65006e72 726f7272 6e617000 61006369     rn.error.panic.a
   d5f68:	5a006c6c 302b2500 253a6433 00753230     ll.Z.%+03d:%02u.
   d5f78:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d5f88:	007a2553 74637361 00656d69              S%z.asctime.

000d5f94 <_ZTV9IPAddress>:
	...
   d5f9c:	000d4cbd 000d4cad 000d4caf              .L...L...L..

000d5fa8 <_ZTV9USBSerial>:
	...
   d5fb0:	000d4dc1 000d4e11 000d4e1f 000d4a39     .M...N...N..9J..
   d5fc0:	000d4dfd 000d4dc3 000d4dd9 000d4e0b     .M...M...M...N..
   d5fd0:	000d4def 000d4dbd                       .M...M..

000d5fd8 <_ZTVN5spark13CellularClassE>:
	...
   d5fe0:	000d4f2b 000d4f21 000d4f17 000d4ecd     +O..!O...O...N..
   d5ff0:	000d4f0b 000d4eff 000d4ef3 000d4eeb     .O...N...N...N..
   d6000:	000d4ee1 000d4ed7 000d57bb              .N...N...W..

000d600c <_ZTV11USARTSerial>:
	...
   d6014:	000d4f65 000d4fb5 000d4fc3 000d4a39     eO...O...O..9J..
   d6024:	000d4f79 000d4f9b 000d4f87 000d4faf     yO...O...O...O..
   d6034:	000d4f67 000d4f6b                       gO..kO..

000d603c <_ZTVN5spark9MeshClassE>:
	...
   d6044:	000d50bf 000d50b5 000d50ab 000d50a1     .P...P...P...P..
   d6054:	000d5095 000d5089 000d507d 000d5075     .P...P..}P..uP..
   d6064:	000d506b 000d5061 000d57bb              kP..aP...W..

000d6070 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6078:	000d524d 000d5253 000d573b 000d5261     MR..SR..;W..aR..
   d6088:	000d524f                                OR..

000d608c <_ZTV9TCPClient>:
	...
   d6094:	000d40dd 000d411d 000d51c5 000d51df     .@...A...Q...Q..
   d60a4:	000d55e1 000d5333 000d5305 000d5209     .U..3S...S...R..
   d60b4:	000d54bd 000d53b9 000d5367 000d55b1     .T...S..gS...U..
   d60c4:	000d520b 000d5243 000d51f1 000d5265     .R..CR...Q..eR..
   d60d4:	000d52e5 69726977 7200676e 20766365     .R..wiring.recv 
   d60e4:	6f727265 203d2072 00006425              error = %d..

000d60f0 <_ZTVN5spark12NetworkClassE>:
	...
   d60f8:	000d5753 000d575d 000d5767 000d5771     SW..]W..gW..qW..
   d6108:	000d577b 000d5787 000d5793 000d579f     {W...W...W...W..
   d6118:	000d57a7 000d57b1 000d57bb              .W...W...W..

000d6124 <_ctype_>:
   d6124:	20202000 20202020 28282020 20282828     .         ((((( 
   d6134:	20202020 20202020 20202020 20202020                     
   d6144:	10108820 10101010 10101010 10101010      ...............
   d6154:	04040410 04040404 10040404 10101010     ................
   d6164:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6174:	01010101 01010101 01010101 10101010     ................
   d6184:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6194:	02020202 02020202 02020202 10101010     ................
   d61a4:	00000020 00000000 00000000 00000000      ...............
	...

000d6228 <__sf_fake_stdin>:
	...

000d6248 <__sf_fake_stdout>:
	...

000d6268 <__sf_fake_stderr>:
	...
   d6288:	00000043                                         C.

000d628a <link_const_variable_data_end>:
	...

000d628c <link_constructors_location>:
   d628c:	000d4205 	.word	0x000d4205
   d6290:	000d48c9 	.word	0x000d48c9
   d6294:	000d4915 	.word	0x000d4915
   d6298:	000d4a29 	.word	0x000d4a29
   d629c:	000d4b75 	.word	0x000d4b75
   d62a0:	000d4b85 	.word	0x000d4b85
   d62a4:	000d4bbd 	.word	0x000d4bbd
   d62a8:	000d4f35 	.word	0x000d4f35
   d62ac:	000d5175 	.word	0x000d5175
   d62b0:	000d5889 	.word	0x000d5889
   d62b4:	000d589d 	.word	0x000d589d
   d62b8:	000d58f1 	.word	0x000d58f1
   d62bc:	000d5975 	.word	0x000d5975
   d62c0:	000d5a39 	.word	0x000d5a39
   d62c4:	000d5afd 	.word	0x000d5afd

000d62c8 <link_constructors_end>:
	...
