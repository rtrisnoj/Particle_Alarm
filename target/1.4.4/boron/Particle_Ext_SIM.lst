
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Particle_Ext_SIM/target/1.4.4/boron/Particle_Ext_SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016e54  2**0
                  CONTENTS
  4 .data         00000098  2003de64  000d6d90  0000de64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008f4  2003defc  2003defc  0001defc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e28  000d6e28  00016e28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e50  000d6e50  00016e50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c7617  00000000  00000000  00016e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f9a8  00000000  00000000  000de46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d578  00000000  00000000  000ede13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002730  00000000  00000000  0010b38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000048d8  00000000  00000000  0010dabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000331e0  00000000  00000000  00112393  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000266ed  00000000  00000000  00145573  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001013e6  00000000  00000000  0016bc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d044  00000000  00000000  0026d048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa97 	bl	d6560 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa9c 	bl	d6576 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de64 	.word	0x2003de64
   d4048:	000d6d90 	.word	0x000d6d90
   d404c:	2003defc 	.word	0x2003defc
   d4050:	2003defc 	.word	0x2003defc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fadb 	bl	d5614 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6d84 	.word	0x000d6d84
   d4080:	000d6d48 	.word	0x000d6d48

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9cc 	b.w	d4420 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9f9 	bl	d4480 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba8d 	b.w	d55b0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bec9 	b.w	d4e2c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 becf 	b.w	d4e3c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 becd 	b.w	d4e3c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
   d40b6:	3004      	adds	r0, #4
   d40b8:	f001 f81a 	bl	d50f0 <_ZN6StringD1Ev>
   d40bc:	4620      	mov	r0, r4
   d40be:	bd10      	pop	{r4, pc}

000d40c0 <_ZN14http_request_tD1Ev>:
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
  uint16_t timeout;
} http_request_t;
   d40c0:	b510      	push	{r4, lr}
   d40c2:	4604      	mov	r4, r0
   d40c4:	303c      	adds	r0, #60	; 0x3c
   d40c6:	f001 f813 	bl	d50f0 <_ZN6StringD1Ev>
   d40ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40ce:	f001 f80f 	bl	d50f0 <_ZN6StringD1Ev>
   d40d2:	4620      	mov	r0, r4
   d40d4:	f001 f80c 	bl	d50f0 <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d40dc:	2200      	movs	r2, #0
   d40de:	4611      	mov	r1, r2
   d40e0:	6840      	ldr	r0, [r0, #4]
   d40e2:	f000 be33 	b.w	d4d4c <network_ready>
	...

000d40e8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ea:	6984      	ldr	r4, [r0, #24]
   d40ec:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZN9TCPClientD1Ev+0x30>)
   d40ee:	6003      	str	r3, [r0, #0]
   d40f0:	4605      	mov	r5, r0
   d40f2:	b17c      	cbz	r4, d4114 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f4:	6863      	ldr	r3, [r4, #4]
   d40f6:	3b01      	subs	r3, #1
   d40f8:	6063      	str	r3, [r4, #4]
   d40fa:	b95b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40fc:	6823      	ldr	r3, [r4, #0]
   d40fe:	4620      	mov	r0, r4
   d4100:	689b      	ldr	r3, [r3, #8]
   d4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4104:	68a3      	ldr	r3, [r4, #8]
   d4106:	3b01      	subs	r3, #1
   d4108:	60a3      	str	r3, [r4, #8]
   d410a:	b91b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	68db      	ldr	r3, [r3, #12]
   d4112:	4798      	blx	r3
   d4114:	4628      	mov	r0, r5
   d4116:	bd38      	pop	{r3, r4, r5, pc}
   d4118:	000d6b50 	.word	0x000d6b50

000d411c <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN9TCPClientD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <_ZN9TCPClientD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f7ff ffdc 	bl	d40e8 <_ZN9TCPClientD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	211c      	movs	r1, #28
   d4134:	f002 f8a3 	bl	d627e <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <_Z15sendHttpRequestv>:
    System.sleep(D5,RISING,sendInterval);
   }
}

void sendHttpRequest()
{
   d413c:	b530      	push	{r4, r5, lr}
   d413e:	b087      	sub	sp, #28
    Serial.println();
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4140:	4c26      	ldr	r4, [pc, #152]	; (d41dc <_Z15sendHttpRequestv+0xa0>)
    request.port = 80;
    request.path = "/ParticleDirect.aspx";

    // The library also supports sending a body with your request:
    temp_payload = String(Time.now());
   d4142:	4d27      	ldr	r5, [pc, #156]	; (d41e0 <_Z15sendHttpRequestv+0xa4>)
   }
}

void sendHttpRequest()
{
    Serial.println();
   d4144:	f001 fb6a 	bl	d581c <_Z16_fetch_usbserialv>
   d4148:	f001 f931 	bl	d53ae <_ZN5Print7printlnEv>
    Serial.println("Application>\tStart of Loop.");
   d414c:	f001 fb66 	bl	d581c <_Z16_fetch_usbserialv>
   d4150:	4924      	ldr	r1, [pc, #144]	; (d41e4 <_Z15sendHttpRequestv+0xa8>)
   d4152:	f001 f938 	bl	d53c6 <_ZN5Print7printlnEPKc>
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4156:	4924      	ldr	r1, [pc, #144]	; (d41e8 <_Z15sendHttpRequestv+0xac>)
   d4158:	4620      	mov	r0, r4
   d415a:	f001 f862 	bl	d5222 <_ZN6StringaSEPKc>
    request.port = 80;
   d415e:	2350      	movs	r3, #80	; 0x50
    request.path = "/ParticleDirect.aspx";
   d4160:	4922      	ldr	r1, [pc, #136]	; (d41ec <_Z15sendHttpRequestv+0xb0>)
{
    Serial.println();
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
    request.port = 80;
   d4162:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = "/ParticleDirect.aspx";
   d4164:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4168:	f001 f85b 	bl	d5222 <_ZN6StringaSEPKc>

    // The library also supports sending a body with your request:
    temp_payload = String(Time.now());
   d416c:	f001 f9d0 	bl	d5510 <_ZN9TimeClass3nowEv>
   d4170:	220a      	movs	r2, #10
   d4172:	4601      	mov	r1, r0
   d4174:	a802      	add	r0, sp, #8
   d4176:	f001 f878 	bl	d526a <_ZN6StringC1Elh>
   d417a:	a902      	add	r1, sp, #8
   d417c:	4628      	mov	r0, r5
   d417e:	f001 f848 	bl	d5212 <_ZN6StringaSEOS_>
   d4182:	a802      	add	r0, sp, #8
   d4184:	f000 ffb4 	bl	d50f0 <_ZN6StringD1Ev>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4188:	4919      	ldr	r1, [pc, #100]	; (d41f0 <_Z15sendHttpRequestv+0xb4>)
   d418a:	4628      	mov	r0, r5
   d418c:	f001 f89b 	bl	d52c6 <_ZN6String6concatEPKc>
    temp_payload += ",7,1;";

    request.body = temp_payload;
   d4190:	4629      	mov	r1, r5
   d4192:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d4196:	4d17      	ldr	r5, [pc, #92]	; (d41f4 <_Z15sendHttpRequestv+0xb8>)
   d4198:	f001 f821 	bl	d51de <_ZN6StringaSERKS_>
   d419c:	4b16      	ldr	r3, [pc, #88]	; (d41f8 <_Z15sendHttpRequestv+0xbc>)
   d419e:	9300      	str	r3, [sp, #0]
   d41a0:	462a      	mov	r2, r5
   d41a2:	4b16      	ldr	r3, [pc, #88]	; (d41fc <_Z15sendHttpRequestv+0xc0>)
   d41a4:	4816      	ldr	r0, [pc, #88]	; (d4200 <_Z15sendHttpRequestv+0xc4>)
   d41a6:	4621      	mov	r1, r4
   d41a8:	f000 fb2a 	bl	d4800 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    Serial.print("Application>\tResponse status: ");
   d41ac:	f001 fb36 	bl	d581c <_Z16_fetch_usbserialv>
   d41b0:	4914      	ldr	r1, [pc, #80]	; (d4204 <_Z15sendHttpRequestv+0xc8>)
   d41b2:	f001 f8f5 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.println(response.status);
   d41b6:	f001 fb31 	bl	d581c <_Z16_fetch_usbserialv>
   d41ba:	220a      	movs	r2, #10
   d41bc:	6829      	ldr	r1, [r5, #0]
   d41be:	f001 f95d 	bl	d547c <_ZN5Print7printlnEii>

    Serial.print("Application>\tHTTP Response Body: ");
   d41c2:	f001 fb2b 	bl	d581c <_Z16_fetch_usbserialv>
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <_Z15sendHttpRequestv+0xcc>)
   d41c8:	f001 f8ea 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.println(response.body);
   d41cc:	f001 fb26 	bl	d581c <_Z16_fetch_usbserialv>
   d41d0:	6869      	ldr	r1, [r5, #4]
   d41d2:	f001 f8f8 	bl	d53c6 <_ZN5Print7printlnEPKc>
}
   d41d6:	b007      	add	sp, #28
   d41d8:	bd30      	pop	{r4, r5, pc}
   d41da:	bf00      	nop
   d41dc:	2003e350 	.word	0x2003e350
   d41e0:	2003e33c 	.word	0x2003e33c
   d41e4:	000d6740 	.word	0x000d6740
   d41e8:	000d675c 	.word	0x000d675c
   d41ec:	000d676b 	.word	0x000d676b
   d41f0:	000d6780 	.word	0x000d6780
   d41f4:	2003e324 	.word	0x2003e324
   d41f8:	000d6786 	.word	0x000d6786
   d41fc:	2003de6c 	.word	0x2003de6c
   d4200:	2003df08 	.word	0x2003df08
   d4204:	000d678a 	.word	0x000d678a
   d4208:	000d67a9 	.word	0x000d67a9

000d420c <_Z13statusMessagev>:

/****  Every version of code should contain a daily status message  ****/

void statusMessage()
{
   d420c:	b530      	push	{r4, r5, lr}
   d420e:	b08f      	sub	sp, #60	; 0x3c
    Serial.println();
   d4210:	f001 fb04 	bl	d581c <_Z16_fetch_usbserialv>
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4214:	4c44      	ldr	r4, [pc, #272]	; (d4328 <_Z13statusMessagev+0x11c>)
   d4216:	4d45      	ldr	r5, [pc, #276]	; (d432c <_Z13statusMessagev+0x120>)

/****  Every version of code should contain a daily status message  ****/

void statusMessage()
{
    Serial.println();
   d4218:	f001 f8c9 	bl	d53ae <_ZN5Print7printlnEv>
    Serial.println("Application>\tStart of Loop.");
   d421c:	f001 fafe 	bl	d581c <_Z16_fetch_usbserialv>
   d4220:	4943      	ldr	r1, [pc, #268]	; (d4330 <_Z13statusMessagev+0x124>)
   d4222:	f001 f8d0 	bl	d53c6 <_ZN5Print7printlnEPKc>
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
   d4226:	4943      	ldr	r1, [pc, #268]	; (d4334 <_Z13statusMessagev+0x128>)
   d4228:	4620      	mov	r0, r4
   d422a:	f000 fffa 	bl	d5222 <_ZN6StringaSEPKc>
    request.port = 80;
   d422e:	2350      	movs	r3, #80	; 0x50
    request.path = "/ParticleDirect.aspx";
   d4230:	4941      	ldr	r1, [pc, #260]	; (d4338 <_Z13statusMessagev+0x12c>)
{
    Serial.println();
    Serial.println("Application>\tStart of Loop.");
    // Request path and body can be set at runtime or at setup.
    request.hostname = "ws.uscubed.com";
    request.port = 80;
   d4232:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = "/ParticleDirect.aspx";
   d4234:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4238:	f000 fff3 	bl	d5222 <_ZN6StringaSEPKc>

    // The library also supports sending a body with your request:
    String message =  String(Time.now()) + ",Status,";
   d423c:	f001 f968 	bl	d5510 <_ZN9TimeClass3nowEv>
   d4240:	220a      	movs	r2, #10
   d4242:	4601      	mov	r1, r0
   d4244:	a806      	add	r0, sp, #24
   d4246:	f001 f810 	bl	d526a <_ZN6StringC1Elh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d424a:	a906      	add	r1, sp, #24
   d424c:	a80a      	add	r0, sp, #40	; 0x28
   d424e:	f000 ffd5 	bl	d51fc <_ZN6StringC1ERKS_>
   d4252:	493a      	ldr	r1, [pc, #232]	; (d433c <_Z13statusMessagev+0x130>)
   d4254:	a80a      	add	r0, sp, #40	; 0x28
   d4256:	f001 f851 	bl	d52fc <_ZplRK15StringSumHelperPKc>
   d425a:	4601      	mov	r1, r0
   d425c:	a802      	add	r0, sp, #8
   d425e:	f000 ffcd 	bl	d51fc <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4262:	a80a      	add	r0, sp, #40	; 0x28
   d4264:	f000 ff44 	bl	d50f0 <_ZN6StringD1Ev>
   d4268:	a806      	add	r0, sp, #24
   d426a:	f000 ff41 	bl	d50f0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d426e:	4934      	ldr	r1, [pc, #208]	; (d4340 <_Z13statusMessagev+0x134>)
   d4270:	a80a      	add	r0, sp, #40	; 0x28
   d4272:	f000 ff84 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
    message += ",si:" + (String)sendInterval;
   d4276:	4b33      	ldr	r3, [pc, #204]	; (d4344 <_Z13statusMessagev+0x138>)
   d4278:	220a      	movs	r2, #10
   d427a:	6819      	ldr	r1, [r3, #0]
   d427c:	a806      	add	r0, sp, #24
   d427e:	f000 ffe1 	bl	d5244 <_ZN6StringC1Eih>
   d4282:	a906      	add	r1, sp, #24
   d4284:	a80a      	add	r0, sp, #40	; 0x28
   d4286:	f001 f82d 	bl	d52e4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d428a:	4601      	mov	r1, r0
   d428c:	a802      	add	r0, sp, #8
   d428e:	f001 f816 	bl	d52be <_ZN6String6concatERKS_>
   d4292:	a806      	add	r0, sp, #24
   d4294:	f000 ff2c 	bl	d50f0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4298:	a80a      	add	r0, sp, #40	; 0x28
   d429a:	f000 ff29 	bl	d50f0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d429e:	492a      	ldr	r1, [pc, #168]	; (d4348 <_Z13statusMessagev+0x13c>)
   d42a0:	a80a      	add	r0, sp, #40	; 0x28
   d42a2:	f000 ff6c 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
    message += ",to:" + (String)timeout + ",ver:" + Version ;
   d42a6:	4b29      	ldr	r3, [pc, #164]	; (d434c <_Z13statusMessagev+0x140>)
   d42a8:	220a      	movs	r2, #10
   d42aa:	6819      	ldr	r1, [r3, #0]
   d42ac:	a806      	add	r0, sp, #24
   d42ae:	f000 ffc9 	bl	d5244 <_ZN6StringC1Eih>
   d42b2:	a906      	add	r1, sp, #24
   d42b4:	a80a      	add	r0, sp, #40	; 0x28
   d42b6:	f001 f815 	bl	d52e4 <_ZplRK15StringSumHelperRK6String>
   d42ba:	4925      	ldr	r1, [pc, #148]	; (d4350 <_Z13statusMessagev+0x144>)
   d42bc:	f001 f81e 	bl	d52fc <_ZplRK15StringSumHelperPKc>
   d42c0:	4924      	ldr	r1, [pc, #144]	; (d4354 <_Z13statusMessagev+0x148>)
   d42c2:	f001 f80f 	bl	d52e4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d42c6:	4601      	mov	r1, r0
   d42c8:	a802      	add	r0, sp, #8
   d42ca:	f000 fff8 	bl	d52be <_ZN6String6concatERKS_>
   d42ce:	a806      	add	r0, sp, #24
   d42d0:	f000 ff0e 	bl	d50f0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d42d4:	a80a      	add	r0, sp, #40	; 0x28
   d42d6:	f000 ff0b 	bl	d50f0 <_ZN6StringD1Ev>

    request.body = message;
   d42da:	a902      	add	r1, sp, #8
   d42dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d42e0:	f000 ff7d 	bl	d51de <_ZN6StringaSERKS_>
   d42e4:	4b1c      	ldr	r3, [pc, #112]	; (d4358 <_Z13statusMessagev+0x14c>)
   d42e6:	9300      	str	r3, [sp, #0]
   d42e8:	462a      	mov	r2, r5
   d42ea:	4b1c      	ldr	r3, [pc, #112]	; (d435c <_Z13statusMessagev+0x150>)
   d42ec:	481c      	ldr	r0, [pc, #112]	; (d4360 <_Z13statusMessagev+0x154>)
   d42ee:	4621      	mov	r1, r4
   d42f0:	f000 fa86 	bl	d4800 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    Serial.print("Application>\tResponse status: ");
   d42f4:	f001 fa92 	bl	d581c <_Z16_fetch_usbserialv>
   d42f8:	491a      	ldr	r1, [pc, #104]	; (d4364 <_Z13statusMessagev+0x158>)
   d42fa:	f001 f851 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.println(response.status);
   d42fe:	f001 fa8d 	bl	d581c <_Z16_fetch_usbserialv>
   d4302:	220a      	movs	r2, #10
   d4304:	6829      	ldr	r1, [r5, #0]
   d4306:	f001 f8b9 	bl	d547c <_ZN5Print7printlnEii>

    Serial.print("Application>\tHTTP Response Body: ");
   d430a:	f001 fa87 	bl	d581c <_Z16_fetch_usbserialv>
   d430e:	4916      	ldr	r1, [pc, #88]	; (d4368 <_Z13statusMessagev+0x15c>)
   d4310:	f001 f846 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.println(response.body);
   d4314:	f001 fa82 	bl	d581c <_Z16_fetch_usbserialv>
   d4318:	6869      	ldr	r1, [r5, #4]
   d431a:	f001 f854 	bl	d53c6 <_ZN5Print7printlnEPKc>
    request.hostname = "ws.uscubed.com";
    request.port = 80;
    request.path = "/ParticleDirect.aspx";

    // The library also supports sending a body with your request:
    String message =  String(Time.now()) + ",Status,";
   d431e:	a802      	add	r0, sp, #8
   d4320:	f000 fee6 	bl	d50f0 <_ZN6StringD1Ev>
    Serial.println(response.status);

    Serial.print("Application>\tHTTP Response Body: ");
    Serial.println(response.body);
  
}
   d4324:	b00f      	add	sp, #60	; 0x3c
   d4326:	bd30      	pop	{r4, r5, pc}
   d4328:	2003e350 	.word	0x2003e350
   d432c:	2003e324 	.word	0x2003e324
   d4330:	000d6740 	.word	0x000d6740
   d4334:	000d675c 	.word	0x000d675c
   d4338:	000d676b 	.word	0x000d676b
   d433c:	000d67cb 	.word	0x000d67cb
   d4340:	000d67d4 	.word	0x000d67d4
   d4344:	2003de8c 	.word	0x2003de8c
   d4348:	000d67d9 	.word	0x000d67d9
   d434c:	2003de68 	.word	0x2003de68
   d4350:	000d67de 	.word	0x000d67de
   d4354:	2003e3a8 	.word	0x2003e3a8
   d4358:	000d6786 	.word	0x000d6786
   d435c:	2003de6c 	.word	0x2003de6c
   d4360:	2003df08 	.word	0x2003df08
   d4364:	000d678a 	.word	0x000d678a
   d4368:	000d67a9 	.word	0x000d67a9

000d436c <_Z14initConnectionv>:

bool initConnection()
{
   d436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4370:	4c29      	ldr	r4, [pc, #164]	; (d4418 <_Z14initConnectionv+0xac>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4372:	2300      	movs	r3, #0
   d4374:	461a      	mov	r2, r3
   d4376:	4619      	mov	r1, r3
   d4378:	6860      	ldr	r0, [r4, #4]
   d437a:	f000 fcef 	bl	d4d5c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d437e:	2300      	movs	r3, #0
   d4380:	6860      	ldr	r0, [r4, #4]
  bool retVal = false;
  Cellular.on();
  Cellular.connect();
  waitFor(Cellular.ready,timeout);
   d4382:	4c26      	ldr	r4, [pc, #152]	; (d441c <_Z14initConnectionv+0xb0>)
   d4384:	461a      	mov	r2, r3
   d4386:	4619      	mov	r1, r3
   d4388:	f000 fcc8 	bl	d4d1c <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d438c:	2000      	movs	r0, #0
   d438e:	6826      	ldr	r6, [r4, #0]
   d4390:	f000 fb8e 	bl	d4ab0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4394:	f04f 0900 	mov.w	r9, #0
   d4398:	4680      	mov	r8, r0
   d439a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d439c:	2000      	movs	r0, #0
   d439e:	f000 fb87 	bl	d4ab0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43a2:	ebb0 0008 	subs.w	r0, r0, r8
   d43a6:	eb61 0109 	sbc.w	r1, r1, r9
   d43aa:	42b9      	cmp	r1, r7
   d43ac:	bf08      	it	eq
   d43ae:	42b0      	cmpeq	r0, r6
   d43b0:	d206      	bcs.n	d43c0 <_Z14initConnectionv+0x54>
   d43b2:	4819      	ldr	r0, [pc, #100]	; (d4418 <_Z14initConnectionv+0xac>)
   d43b4:	f7ff fe92 	bl	d40dc <_ZN5spark13CellularClass5readyEv>
   d43b8:	b910      	cbnz	r0, d43c0 <_Z14initConnectionv+0x54>
            spark_process();
   d43ba:	f000 fcff 	bl	d4dbc <spark_process>
   d43be:	e7ed      	b.n	d439c <_Z14initConnectionv+0x30>
   d43c0:	4815      	ldr	r0, [pc, #84]	; (d4418 <_Z14initConnectionv+0xac>)
   d43c2:	f7ff fe8b 	bl	d40dc <_ZN5spark13CellularClass5readyEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d43c6:	f000 fd01 	bl	d4dcc <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d43ca:	2000      	movs	r0, #0
  Particle.connect();
  waitFor(Particle.connected,timeout);
   d43cc:	6824      	ldr	r4, [r4, #0]
   d43ce:	f000 fb6f 	bl	d4ab0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43d2:	2700      	movs	r7, #0
   d43d4:	4606      	mov	r6, r0
   d43d6:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d43d8:	2000      	movs	r0, #0
   d43da:	f000 fb69 	bl	d4ab0 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43de:	1b80      	subs	r0, r0, r6
   d43e0:	eb61 0107 	sbc.w	r1, r1, r7
   d43e4:	42a9      	cmp	r1, r5
   d43e6:	bf08      	it	eq
   d43e8:	42a0      	cmpeq	r0, r4
   d43ea:	d202      	bcs.n	d43f2 <_Z14initConnectionv+0x86>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ec:	f000 fcfe 	bl	d4dec <spark_cloud_flag_connected>
   d43f0:	b160      	cbz	r0, d440c <_Z14initConnectionv+0xa0>
   d43f2:	f000 fcfb 	bl	d4dec <spark_cloud_flag_connected>
  if (Cellular.ready())
   d43f6:	4808      	ldr	r0, [pc, #32]	; (d4418 <_Z14initConnectionv+0xac>)
   d43f8:	f7ff fe70 	bl	d40dc <_ZN5spark13CellularClass5readyEv>
   d43fc:	4604      	mov	r4, r0
   d43fe:	f000 fcf5 	bl	d4dec <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4402:	b130      	cbz	r0, d4412 <_Z14initConnectionv+0xa6>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4404:	2000      	movs	r0, #0
   d4406:	f000 fcf9 	bl	d4dfc <spark_sync_time>
   d440a:	e002      	b.n	d4412 <_Z14initConnectionv+0xa6>
            spark_process();
   d440c:	f000 fcd6 	bl	d4dbc <spark_process>
   d4410:	e7e2      	b.n	d43d8 <_Z14initConnectionv+0x6c>
    retVal = true;

  Particle.syncTime();
  return retVal;
}
   d4412:	4620      	mov	r0, r4
   d4414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4418:	2003e400 	.word	0x2003e400
   d441c:	2003de68 	.word	0x2003de68

000d4420 <setup>:
};

http_request_t request;
http_response_t response;

void setup() {
   d4420:	b508      	push	{r3, lr}
    Serial.begin(9600);
   d4422:	f001 f9fb 	bl	d581c <_Z16_fetch_usbserialv>
   d4426:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d442a:	f001 f9eb 	bl	d5804 <_ZN9USBSerial5beginEl>

    initConnection();
   d442e:	f7ff ff9d 	bl	d436c <_Z14initConnectionv>
    prevTime = Time.now(); 
   d4432:	f001 f86d 	bl	d5510 <_ZN9TimeClass3nowEv>
   d4436:	4b04      	ldr	r3, [pc, #16]	; (d4448 <setup+0x28>)
   d4438:	6018      	str	r0, [r3, #0]
    Serial.println("Starting");
   d443a:	f001 f9ef 	bl	d581c <_Z16_fetch_usbserialv>
   d443e:	4903      	ldr	r1, [pc, #12]	; (d444c <setup+0x2c>)
}
   d4440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
    Serial.begin(9600);

    initConnection();
    prevTime = Time.now(); 
    Serial.println("Starting");
   d4444:	f000 bfbf 	b.w	d53c6 <_ZN5Print7printlnEPKc>
   d4448:	2003e338 	.word	0x2003e338
   d444c:	000d67e4 	.word	0x000d67e4

000d4450 <_Z20disconnectConnectionv>:
  Particle.syncTime();
  return retVal;
}

void disconnectConnection()
{
   d4450:	b510      	push	{r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4452:	f000 fcc3 	bl	d4ddc <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4456:	f000 fcc9 	bl	d4dec <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d445a:	4604      	mov	r4, r0
   d445c:	b950      	cbnz	r0, d4474 <_Z20disconnectConnectionv+0x24>
   d445e:	f000 fcc5 	bl	d4dec <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4462:	4806      	ldr	r0, [pc, #24]	; (d447c <_Z20disconnectConnectionv+0x2c>)
   d4464:	4623      	mov	r3, r4
   d4466:	4622      	mov	r2, r4
   d4468:	4621      	mov	r1, r4
   d446a:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d446c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4470:	f000 bc7c 	b.w	d4d6c <network_off>
            spark_process();
   d4474:	f000 fca2 	bl	d4dbc <spark_process>
   d4478:	e7ed      	b.n	d4456 <_Z20disconnectConnectionv+0x6>
   d447a:	bf00      	nop
   d447c:	2003e400 	.word	0x2003e400

000d4480 <loop>:
    initConnection();
    prevTime = Time.now(); 
    Serial.println("Starting");
}

void loop() {
   d4480:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4482:	b08d      	sub	sp, #52	; 0x34
  currentTime = Time.now();
   d4484:	f001 f844 	bl	d5510 <_ZN9TimeClass3nowEv>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d4488:	4b7f      	ldr	r3, [pc, #508]	; (d4688 <loop+0x208>)
   d448a:	4d80      	ldr	r5, [pc, #512]	; (d468c <loop+0x20c>)
   d448c:	781e      	ldrb	r6, [r3, #0]
   d448e:	6028      	str	r0, [r5, #0]
   d4490:	4c7f      	ldr	r4, [pc, #508]	; (d4690 <loop+0x210>)
   d4492:	b97e      	cbnz	r6, d44b4 <loop+0x34>
            f = true;
   d4494:	2201      	movs	r2, #1
   d4496:	701a      	strb	r2, [r3, #0]
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4498:	4631      	mov	r1, r6
   d449a:	4632      	mov	r2, r6
   d449c:	a80a      	add	r0, sp, #40	; 0x28
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d449e:	960a      	str	r6, [sp, #40]	; 0x28
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d44a0:	f000 fb0e 	bl	d4ac0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d44a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d44a6:	2b1e      	cmp	r3, #30
   d44a8:	d104      	bne.n	d44b4 <loop+0x34>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d44aa:	2303      	movs	r3, #3
   d44ac:	7023      	strb	r3, [r4, #0]
   d44ae:	2308      	movs	r3, #8
   d44b0:	8066      	strh	r6, [r4, #2]
   d44b2:	80a3      	strh	r3, [r4, #4]
            }
        }
        return sleepResult_;
   d44b4:	88a3      	ldrh	r3, [r4, #4]
   d44b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  SleepResult result = System.sleepResult();
 
 /********** Send Status Message***********/
  if (currentTime - prevTime >= (sendInterval)){
   d44ba:	4b76      	ldr	r3, [pc, #472]	; (d4694 <loop+0x214>)
   d44bc:	6820      	ldr	r0, [r4, #0]
   d44be:	6819      	ldr	r1, [r3, #0]
   d44c0:	682a      	ldr	r2, [r5, #0]
   d44c2:	4c75      	ldr	r4, [pc, #468]	; (d4698 <loop+0x218>)
   d44c4:	9008      	str	r0, [sp, #32]
   d44c6:	1a52      	subs	r2, r2, r1
   d44c8:	6821      	ldr	r1, [r4, #0]
   d44ca:	428a      	cmp	r2, r1
   d44cc:	461e      	mov	r6, r3
   d44ce:	db0d      	blt.n	d44ec <loop+0x6c>
   d44d0:	f000 fc8c 	bl	d4dec <spark_cloud_flag_connected>
    if (!Particle.connected()){
   d44d4:	b908      	cbnz	r0, d44da <loop+0x5a>
    initConnection();
   d44d6:	f7ff ff49 	bl	d436c <_Z14initConnectionv>
    }
    statusMessage();
   d44da:	f7ff fe97 	bl	d420c <_Z13statusMessagev>
    Serial.println("Status Message");
   d44de:	f001 f99d 	bl	d581c <_Z16_fetch_usbserialv>
   d44e2:	496e      	ldr	r1, [pc, #440]	; (d469c <loop+0x21c>)
   d44e4:	f000 ff6f 	bl	d53c6 <_ZN5Print7printlnEPKc>
    prevTime = currentTime;
   d44e8:	682b      	ldr	r3, [r5, #0]
   d44ea:	6033      	str	r3, [r6, #0]
  }

   ////////******* Wake Up with PIN and Send Data ********/////////////
  Serial.print("Sleep Result: ");
   d44ec:	f001 f996 	bl	d581c <_Z16_fetch_usbserialv>
   d44f0:	496b      	ldr	r1, [pc, #428]	; (d46a0 <loop+0x220>)
   d44f2:	4f6c      	ldr	r7, [pc, #432]	; (d46a4 <loop+0x224>)
   d44f4:	4e6c      	ldr	r6, [pc, #432]	; (d46a8 <loop+0x228>)
   d44f6:	f000 ff53 	bl	d53a0 <_ZN5Print5printEPKc>
  Serial.println(result.reason());
   d44fa:	f001 f98f 	bl	d581c <_Z16_fetch_usbserialv>
   d44fe:	4605      	mov	r5, r0
   d4500:	a808      	add	r0, sp, #32
   d4502:	f000 fd4b 	bl	d4f9c <_ZNK11SleepResult6reasonEv>
   d4506:	220a      	movs	r2, #10
   d4508:	4601      	mov	r1, r0
   d450a:	4628      	mov	r0, r5
   d450c:	f000 ffb6 	bl	d547c <_ZN5Print7printlnEii>
 // Serial.println(result.wakeUpReason());
  Serial.println(result.wokenUpByPin());
   d4510:	f001 f984 	bl	d581c <_Z16_fetch_usbserialv>
   d4514:	4605      	mov	r5, r0
   d4516:	a808      	add	r0, sp, #32
   d4518:	f000 fd49 	bl	d4fae <_ZNK11SleepResult12wokenUpByPinEv>
   d451c:	220a      	movs	r2, #10
   d451e:	4601      	mov	r1, r0
   d4520:	4628      	mov	r0, r5
   d4522:	f000 ffab 	bl	d547c <_ZN5Print7printlnEii>
  Serial.println(result.wokenUpByRtc());
   d4526:	f001 f979 	bl	d581c <_Z16_fetch_usbserialv>
   d452a:	4605      	mov	r5, r0
   d452c:	a808      	add	r0, sp, #32
   d452e:	f000 fd37 	bl	d4fa0 <_ZNK11SleepResult12wokenUpByRtcEv>
   d4532:	220a      	movs	r2, #10
   d4534:	4601      	mov	r1, r0
   d4536:	4628      	mov	r0, r5
  //Serial.println(result.wakeUpPin());
  Serial.print("Booting: ");
  Serial.println(booting);
   d4538:	4d5c      	ldr	r5, [pc, #368]	; (d46ac <loop+0x22c>)
   ////////******* Wake Up with PIN and Send Data ********/////////////
  Serial.print("Sleep Result: ");
  Serial.println(result.reason());
 // Serial.println(result.wakeUpReason());
  Serial.println(result.wokenUpByPin());
  Serial.println(result.wokenUpByRtc());
   d453a:	f000 ff9f 	bl	d547c <_ZN5Print7printlnEii>
  //Serial.println(result.wakeUpPin());
  Serial.print("Booting: ");
   d453e:	f001 f96d 	bl	d581c <_Z16_fetch_usbserialv>
   d4542:	495b      	ldr	r1, [pc, #364]	; (d46b0 <loop+0x230>)
   d4544:	f000 ff2c 	bl	d53a0 <_ZN5Print5printEPKc>
  Serial.println(booting);
   d4548:	f001 f968 	bl	d581c <_Z16_fetch_usbserialv>
   d454c:	220a      	movs	r2, #10
   d454e:	7829      	ldrb	r1, [r5, #0]
   d4550:	f000 ff94 	bl	d547c <_ZN5Print7printlnEii>
  

  if (result.wokenUpByPin()){       // Back to sleep for remainder of normal log interval
   d4554:	a808      	add	r0, sp, #32
   d4556:	f000 fd2a 	bl	d4fae <_ZNK11SleepResult12wokenUpByPinEv>
   d455a:	2800      	cmp	r0, #0
   d455c:	d062      	beq.n	d4624 <loop+0x1a4>
   d455e:	f000 fc45 	bl	d4dec <spark_cloud_flag_connected>
    if (!Particle.connected()){
   d4562:	b908      	cbnz	r0, d4568 <loop+0xe8>
    initConnection();
   d4564:	f7ff ff02 	bl	d436c <_Z14initConnectionv>
    }
    sendHttpRequest();
   d4568:	f7ff fde8 	bl	d413c <_Z15sendHttpRequestv>
    Serial.println("Send Data");
   d456c:	f001 f956 	bl	d581c <_Z16_fetch_usbserialv>
   d4570:	4950      	ldr	r1, [pc, #320]	; (d46b4 <loop+0x234>)
   d4572:	f000 ff28 	bl	d53c6 <_ZN5Print7printlnEPKc>
    int sleepRemainder = (sendInterval) - (Time.now() - sleepTime);
   d4576:	6825      	ldr	r5, [r4, #0]
   d4578:	f000 ffca 	bl	d5510 <_ZN9TimeClass3nowEv>
   d457c:	683b      	ldr	r3, [r7, #0]
   d457e:	1ac0      	subs	r0, r0, r3
   d4580:	1a2d      	subs	r5, r5, r0
    delay(200);
   d4582:	20c8      	movs	r0, #200	; 0xc8
   d4584:	f000 ffd6 	bl	d5534 <delay>
    Serial.print("Sleep Again ");
   d4588:	f001 f948 	bl	d581c <_Z16_fetch_usbserialv>
   d458c:	494a      	ldr	r1, [pc, #296]	; (d46b8 <loop+0x238>)
   d458e:	f000 ff07 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.println(sendInterval);
   d4592:	f001 f943 	bl	d581c <_Z16_fetch_usbserialv>
   d4596:	6821      	ldr	r1, [r4, #0]
   d4598:	220a      	movs	r2, #10
   d459a:	f000 ff6f 	bl	d547c <_ZN5Print7printlnEii>
    Serial.println(Time.now());
   d459e:	f001 f93d 	bl	d581c <_Z16_fetch_usbserialv>
   d45a2:	4604      	mov	r4, r0
   d45a4:	f000 ffb4 	bl	d5510 <_ZN9TimeClass3nowEv>
   d45a8:	220a      	movs	r2, #10
   d45aa:	4601      	mov	r1, r0
   d45ac:	4620      	mov	r0, r4
   d45ae:	f000 ff6f 	bl	d5490 <_ZN5Print7printlnEli>
    Serial.println(sleepTime);
   d45b2:	f001 f933 	bl	d581c <_Z16_fetch_usbserialv>
   d45b6:	220a      	movs	r2, #10
   d45b8:	6839      	ldr	r1, [r7, #0]
   d45ba:	f000 ff69 	bl	d5490 <_ZN5Print7printlnEli>
    Serial.println(sleepRemainder);
   d45be:	f001 f92d 	bl	d581c <_Z16_fetch_usbserialv>
   d45c2:	220a      	movs	r2, #10
   d45c4:	4629      	mov	r1, r5
   d45c6:	f000 ff59 	bl	d547c <_ZN5Print7printlnEii>
    Serial.println("Disconnecting ......");
   d45ca:	f001 f927 	bl	d581c <_Z16_fetch_usbserialv>
   d45ce:	493b      	ldr	r1, [pc, #236]	; (d46bc <loop+0x23c>)
   d45d0:	f000 fef9 	bl	d53c6 <_ZN5Print7printlnEPKc>
    disconnectConnection();
   d45d4:	f7ff ff3c 	bl	d4450 <_Z20disconnectConnectionv>
    if (sleepRemainder < 0){
   d45d8:	2d00      	cmp	r5, #0
   d45da:	da16      	bge.n	d460a <loop+0x18a>
        Serial.println("Good Night");
   d45dc:	f001 f91e 	bl	d581c <_Z16_fetch_usbserialv>
   d45e0:	4937      	ldr	r1, [pc, #220]	; (d46c0 <loop+0x240>)
   d45e2:	f000 fef0 	bl	d53c6 <_ZN5Print7printlnEPKc>
         System.sleep(D5,RISING, sendInterval);
   d45e6:	4b2c      	ldr	r3, [pc, #176]	; (d4698 <loop+0x218>)
   d45e8:	6830      	ldr	r0, [r6, #0]
   d45ea:	6819      	ldr	r1, [r3, #0]
   d45ec:	2305      	movs	r3, #5
   d45ee:	f8ad 301a 	strh.w	r3, [sp, #26]
   d45f2:	ab0c      	add	r3, sp, #48	; 0x30
   d45f4:	2201      	movs	r2, #1
   d45f6:	f803 2d19 	strb.w	r2, [r3, #-25]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d45fa:	9002      	str	r0, [sp, #8]
   d45fc:	9101      	str	r1, [sp, #4]
   d45fe:	9200      	str	r2, [sp, #0]
   d4600:	f10d 011a 	add.w	r1, sp, #26
   d4604:	a80a      	add	r0, sp, #40	; 0x28
   d4606:	f000 fca3 	bl	d4f50 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d460a:	2305      	movs	r3, #5
   d460c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d4610:	ab0c      	add	r3, sp, #48	; 0x30
   d4612:	6831      	ldr	r1, [r6, #0]
   d4614:	2201      	movs	r2, #1
   d4616:	f803 2d18 	strb.w	r2, [r3, #-24]!
   d461a:	9102      	str	r1, [sp, #8]
   d461c:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4620:	a907      	add	r1, sp, #28
   d4622:	e02b      	b.n	d467c <loop+0x1fc>
   d4624:	f000 fbe2 	bl	d4dec <spark_cloud_flag_connected>
    // debugMessage("Sleep from Pin Wake: " + (String)sleepRemainder);
    System.sleep(D5,RISING, sleepRemainder);
    }
     /********  Good night!  Sleep!************/
  else{
    if (!Particle.connected()){
   d4628:	b930      	cbnz	r0, d4638 <loop+0x1b8>
      Serial.println("Reconnecting.........");
   d462a:	f001 f8f7 	bl	d581c <_Z16_fetch_usbserialv>
   d462e:	4925      	ldr	r1, [pc, #148]	; (d46c4 <loop+0x244>)
   d4630:	f000 fec9 	bl	d53c6 <_ZN5Print7printlnEPKc>
      initConnection();
   d4634:	f7ff fe9a 	bl	d436c <_Z14initConnectionv>
    }
    sleepTime = Time.now();
   d4638:	f000 ff6a 	bl	d5510 <_ZN9TimeClass3nowEv>
    booting = false;
   d463c:	2300      	movs	r3, #0
   d463e:	702b      	strb	r3, [r5, #0]
  else{
    if (!Particle.connected()){
      Serial.println("Reconnecting.........");
      initConnection();
    }
    sleepTime = Time.now();
   d4640:	6038      	str	r0, [r7, #0]
    booting = false;
    // debugMessage("Normal sleep");
    Serial.println("Disconnecting ......");
   d4642:	f001 f8eb 	bl	d581c <_Z16_fetch_usbserialv>
   d4646:	491d      	ldr	r1, [pc, #116]	; (d46bc <loop+0x23c>)
   d4648:	f000 febd 	bl	d53c6 <_ZN5Print7printlnEPKc>
    Serial.print("Normal Sleep ");
   d464c:	f001 f8e6 	bl	d581c <_Z16_fetch_usbserialv>
   d4650:	491d      	ldr	r1, [pc, #116]	; (d46c8 <loop+0x248>)
   d4652:	f000 fea5 	bl	d53a0 <_ZN5Print5printEPKc>
   
    //Serial.println(sendInterval);
    //Serial.println(sleepTime);
    disconnectConnection();
   d4656:	f7ff fefb 	bl	d4450 <_Z20disconnectConnectionv>
    delay(200);
   d465a:	20c8      	movs	r0, #200	; 0xc8
   d465c:	f000 ff6a 	bl	d5534 <delay>
   d4660:	2305      	movs	r3, #5
   d4662:	f8ad 301e 	strh.w	r3, [sp, #30]
   d4666:	ab0c      	add	r3, sp, #48	; 0x30
    System.sleep(D5,RISING,sendInterval);
   d4668:	6821      	ldr	r1, [r4, #0]
   d466a:	6830      	ldr	r0, [r6, #0]
   d466c:	2201      	movs	r2, #1
   d466e:	f803 2d17 	strb.w	r2, [r3, #-23]!
   d4672:	9101      	str	r1, [sp, #4]
   d4674:	9002      	str	r0, [sp, #8]
   d4676:	9200      	str	r2, [sp, #0]
   d4678:	f10d 011e 	add.w	r1, sp, #30
   d467c:	a80a      	add	r0, sp, #40	; 0x28
   d467e:	f000 fc67 	bl	d4f50 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   }
}
   d4682:	b00d      	add	sp, #52	; 0x34
   d4684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4686:	bf00      	nop
   d4688:	2003df00 	.word	0x2003df00
   d468c:	2003e3a4 	.word	0x2003e3a4
   d4690:	2003e3c0 	.word	0x2003e3c0
   d4694:	2003e338 	.word	0x2003e338
   d4698:	2003de8c 	.word	0x2003de8c
   d469c:	000d67ed 	.word	0x000d67ed
   d46a0:	000d67fc 	.word	0x000d67fc
   d46a4:	2003e3a0 	.word	0x2003e3a0
   d46a8:	2003e34c 	.word	0x2003e34c
   d46ac:	2003de64 	.word	0x2003de64
   d46b0:	000d680b 	.word	0x000d680b
   d46b4:	000d6815 	.word	0x000d6815
   d46b8:	000d681f 	.word	0x000d681f
   d46bc:	000d682c 	.word	0x000d682c
   d46c0:	000d6841 	.word	0x000d6841
   d46c4:	000d684c 	.word	0x000d684c
   d46c8:	000d6862 	.word	0x000d6862

000d46cc <_GLOBAL__sub_I_Version>:
void disconnectConnection()
{
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d46cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d46ce:	4b29      	ldr	r3, [pc, #164]	; (d4774 <_GLOBAL__sub_I_Version+0xa8>)
#include "HttpClient.h"

/**
* Declaring the variables.
*/
String Version = "1.0.0";
   d46d0:	4e29      	ldr	r6, [pc, #164]	; (d4778 <_GLOBAL__sub_I_Version+0xac>)
   d46d2:	4c2a      	ldr	r4, [pc, #168]	; (d477c <_GLOBAL__sub_I_Version+0xb0>)
   d46d4:	4f2a      	ldr	r7, [pc, #168]	; (d4780 <_GLOBAL__sub_I_Version+0xb4>)
   d46d6:	2500      	movs	r5, #0
   d46d8:	601d      	str	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d46da:	f000 f9b1 	bl	d4a40 <HAL_Pin_Map>
   d46de:	4929      	ldr	r1, [pc, #164]	; (d4784 <_GLOBAL__sub_I_Version+0xb8>)
   d46e0:	4630      	mov	r0, r6
   d46e2:	f000 fd4c 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
   d46e6:	4639      	mov	r1, r7
   d46e8:	4622      	mov	r2, r4
   d46ea:	4630      	mov	r0, r6
   d46ec:	f001 fdc2 	bl	d6274 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46f0:	4b25      	ldr	r3, [pc, #148]	; (d4788 <_GLOBAL__sub_I_Version+0xbc>)
long int currentTime;
long int sleepTime;
int sendInterval = 600; //Send Interval in seconds
pin_t wakeUpPins[1] = {D4};
int timeout = 10000;   // length of time to wait for cellular connection (milliseconds)
String temp_payload;
   d46f2:	4e26      	ldr	r6, [pc, #152]	; (d478c <_GLOBAL__sub_I_Version+0xc0>)
   d46f4:	701d      	strb	r5, [r3, #0]
   d46f6:	805d      	strh	r5, [r3, #2]
   d46f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46fc:	4d24      	ldr	r5, [pc, #144]	; (d4790 <_GLOBAL__sub_I_Version+0xc4>)
   d46fe:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4700:	2003      	movs	r0, #3
   d4702:	f000 fad5 	bl	d4cb0 <set_system_mode>
   d4706:	4629      	mov	r1, r5
   d4708:	4630      	mov	r0, r6
   d470a:	f000 fd38 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
   d470e:	4630      	mov	r0, r6
bool booting = true;



unsigned int nextTime = 0;    // Next time to contact the server
HttpClient http;
   d4710:	4e20      	ldr	r6, [pc, #128]	; (d4794 <_GLOBAL__sub_I_Version+0xc8>)
long int currentTime;
long int sleepTime;
int sendInterval = 600; //Send Interval in seconds
pin_t wakeUpPins[1] = {D4};
int timeout = 10000;   // length of time to wait for cellular connection (milliseconds)
String temp_payload;
   d4712:	4622      	mov	r2, r4
   d4714:	4639      	mov	r1, r7
   d4716:	f001 fdad 	bl	d6274 <__aeabi_atexit>
bool booting = true;



unsigned int nextTime = 0;    // Next time to contact the server
HttpClient http;
   d471a:	4630      	mov	r0, r6
   d471c:	f000 f846 	bl	d47ac <_ZN10HttpClientC1Ev>
   d4720:	4630      	mov	r0, r6
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d4722:	4e1d      	ldr	r6, [pc, #116]	; (d4798 <_GLOBAL__sub_I_Version+0xcc>)
   d4724:	491d      	ldr	r1, [pc, #116]	; (d479c <_GLOBAL__sub_I_Version+0xd0>)
   d4726:	4622      	mov	r2, r4
   d4728:	f001 fda4 	bl	d6274 <__aeabi_atexit>
   d472c:	4629      	mov	r1, r5
   d472e:	4630      	mov	r0, r6
   d4730:	f000 fd25 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
   d4734:	f106 0010 	add.w	r0, r6, #16
   d4738:	f000 ffc0 	bl	d56bc <_ZN9IPAddressC1Ev>
   d473c:	4629      	mov	r1, r5
   d473e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   d4742:	f000 fd1c 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
   d4746:	4629      	mov	r1, r5
   d4748:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   d474c:	f000 fd17 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
   { "Authorization" , "Basic yWNjZXNzMlVTMzo4Mzk0Rkdmbw==" },
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
   d4750:	4630      	mov	r0, r6
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4752:	4e13      	ldr	r6, [pc, #76]	; (d47a0 <_GLOBAL__sub_I_Version+0xd4>)
   d4754:	4913      	ldr	r1, [pc, #76]	; (d47a4 <_GLOBAL__sub_I_Version+0xd8>)
   d4756:	4622      	mov	r2, r4
   d4758:	f001 fd8c 	bl	d6274 <__aeabi_atexit>
   d475c:	4629      	mov	r1, r5
   d475e:	1d30      	adds	r0, r6, #4
   d4760:	f000 fd0d 	bl	d517e <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d4764:	4622      	mov	r2, r4
   d4766:	4630      	mov	r0, r6
   d4768:	490f      	ldr	r1, [pc, #60]	; (d47a8 <_GLOBAL__sub_I_Version+0xdc>)
void disconnectConnection()
{
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d476a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
http_response_t response;
   d476e:	f001 bd81 	b.w	d6274 <__aeabi_atexit>
   d4772:	bf00      	nop
   d4774:	2003e34c 	.word	0x2003e34c
   d4778:	2003e3a8 	.word	0x2003e3a8
   d477c:	2003defc 	.word	0x2003defc
   d4780:	000d50f1 	.word	0x000d50f1
   d4784:	000d6870 	.word	0x000d6870
   d4788:	2003df02 	.word	0x2003df02
   d478c:	2003e33c 	.word	0x2003e33c
   d4790:	000d68db 	.word	0x000d68db
   d4794:	2003df08 	.word	0x2003df08
   d4798:	2003e350 	.word	0x2003e350
   d479c:	000d411d 	.word	0x000d411d
   d47a0:	2003e324 	.word	0x2003e324
   d47a4:	000d40c1 	.word	0x000d40c1
   d47a8:	000d40b3 	.word	0x000d40b3

000d47ac <_ZN10HttpClientC1Ev>:
static const uint16_t DEFAULT_TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d47ac:	b510      	push	{r4, lr}
   d47ae:	4604      	mov	r4, r0
   d47b0:	f001 fc7c 	bl	d60ac <_ZN9TCPClientC1Ev>
{

}
   d47b4:	4620      	mov	r0, r4
   d47b6:	bd10      	pop	{r4, pc}

000d47b8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d47b8:	b538      	push	{r3, r4, r5, lr}
   d47ba:	4604      	mov	r4, r0
   d47bc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d47be:	f000 fdef 	bl	d53a0 <_ZN5Print5printEPKc>
    client.print(": ");
   d47c2:	4905      	ldr	r1, [pc, #20]	; (d47d8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d47c4:	4620      	mov	r0, r4
   d47c6:	f000 fdeb 	bl	d53a0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d47ca:	4629      	mov	r1, r5
   d47cc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d47ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d47d2:	f000 bdf8 	b.w	d53c6 <_ZN5Print7printlnEPKc>
   d47d6:	bf00      	nop
   d47d8:	000d69d2 	.word	0x000d69d2

000d47dc <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d47dc:	b538      	push	{r3, r4, r5, lr}
   d47de:	4604      	mov	r4, r0
   d47e0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d47e2:	f000 fddd 	bl	d53a0 <_ZN5Print5printEPKc>
    client.print(": ");
   d47e6:	4905      	ldr	r1, [pc, #20]	; (d47fc <_ZN10HttpClient10sendHeaderEPKci+0x20>)
   d47e8:	4620      	mov	r0, r4
   d47ea:	f000 fdd9 	bl	d53a0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d47ee:	4629      	mov	r1, r5
   d47f0:	4620      	mov	r0, r4
   d47f2:	220a      	movs	r2, #10
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d47f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d47f8:	f000 be40 	b.w	d547c <_ZN5Print7printlnEii>
   d47fc:	000d69d2 	.word	0x000d69d2

000d4800 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4804:	460d      	mov	r5, r1
   d4806:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4808:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d480c:	b089      	sub	sp, #36	; 0x24
   d480e:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4810:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4812:	2100      	movs	r1, #0
   d4814:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4816:	4692      	mov	sl, r2
   d4818:	f000 fd82 	bl	d5320 <_ZNK6String6equalsEPKc>
   d481c:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4820:	b960      	cbnz	r0, d483c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d4822:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4824:	f1bc 0f00 	cmp.w	ip, #0
   d4828:	d002      	beq.n	d4830 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d482a:	fa1f f28c 	uxth.w	r2, ip
   d482e:	e000      	b.n	d4832 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d4830:	2250      	movs	r2, #80	; 0x50
   d4832:	2300      	movs	r3, #0
   d4834:	4620      	mov	r0, r4
   d4836:	f001 fa89 	bl	d5d4c <_ZN9TCPClient7connectEPKctm>
   d483a:	e011      	b.n	d4860 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x60>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d483c:	4b70      	ldr	r3, [pc, #448]	; (d4a00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x200>)
   d483e:	9302      	str	r3, [sp, #8]
   d4840:	f105 0e14 	add.w	lr, r5, #20
   d4844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   d4848:	af03      	add	r7, sp, #12
   d484a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   d484c:	f8de 3000 	ldr.w	r3, [lr]
   d4850:	703b      	strb	r3, [r7, #0]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4852:	fa1f f28c 	uxth.w	r2, ip
   d4856:	2300      	movs	r3, #0
   d4858:	a902      	add	r1, sp, #8
   d485a:	4620      	mov	r0, r4
   d485c:	f001 faf8 	bl	d5e50 <_ZN9TCPClient7connectE9IPAddresstm>
   d4860:	3000      	adds	r0, #0
   d4862:	bf18      	it	ne
   d4864:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d4866:	b918      	cbnz	r0, d4870 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x70>
        client.stop();
   d4868:	4620      	mov	r0, r4
   d486a:	f001 fb6b 	bl	d5f44 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d486e:	e0c3      	b.n	d49f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4870:	9912      	ldr	r1, [sp, #72]	; 0x48
   d4872:	4620      	mov	r0, r4
   d4874:	f000 fd94 	bl	d53a0 <_ZN5Print5printEPKc>
    client.print(" ");
   d4878:	4962      	ldr	r1, [pc, #392]	; (d4a04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>)
   d487a:	4620      	mov	r0, r4
   d487c:	f000 fd90 	bl	d53a0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4880:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d4882:	4620      	mov	r0, r4
   d4884:	f000 fd8c 	bl	d53a0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4888:	495f      	ldr	r1, [pc, #380]	; (d4a08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>)
   d488a:	4620      	mov	r0, r4
   d488c:	f000 fd88 	bl	d53a0 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4890:	495e      	ldr	r1, [pc, #376]	; (d4a0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>)
   d4892:	4a5f      	ldr	r2, [pc, #380]	; (d4a10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d4894:	4620      	mov	r0, r4
   d4896:	f7ff ff8f 	bl	d47b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d489a:	2100      	movs	r1, #0
   d489c:	4628      	mov	r0, r5
   d489e:	f000 fd3f 	bl	d5320 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d48a2:	b920      	cbnz	r0, d48ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xae>
        sendHeader("HOST", aRequest.hostname.c_str());
   d48a4:	682a      	ldr	r2, [r5, #0]
   d48a6:	495b      	ldr	r1, [pc, #364]	; (d4a14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff ff85 	bl	d47b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d48ae:	f105 073c 	add.w	r7, r5, #60	; 0x3c
   d48b2:	2100      	movs	r1, #0
   d48b4:	4638      	mov	r0, r7
   d48b6:	f000 fd33 	bl	d5320 <_ZNK6String6equalsEPKc>
   d48ba:	b908      	cbnz	r0, d48c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc0>
        sendHeader("Content-Length", (aRequest.body).length());
   d48bc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d48be:	e005      	b.n	d48cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xcc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d48c0:	4955      	ldr	r1, [pc, #340]	; (d4a18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d48c2:	9812      	ldr	r0, [sp, #72]	; 0x48
   d48c4:	f001 fe88 	bl	d65d8 <strcmp>
   d48c8:	4602      	mov	r2, r0
   d48ca:	b918      	cbnz	r0, d48d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd4>
        sendHeader("Content-Length", 0);
   d48cc:	4953      	ldr	r1, [pc, #332]	; (d4a1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d48ce:	4620      	mov	r0, r4
   d48d0:	f7ff ff84 	bl	d47dc <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d48d4:	b15e      	cbz	r6, d48ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d48d6:	6831      	ldr	r1, [r6, #0]
   d48d8:	b149      	cbz	r1, d48ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        {
            if (headers[i].value != NULL) {
   d48da:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d48dc:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d48de:	b112      	cbz	r2, d48e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe6>
                sendHeader(headers[i].header, headers[i].value);
   d48e0:	f7ff ff6a 	bl	d47b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d48e4:	e001      	b.n	d48ea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xea>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d48e6:	f000 fd6e 	bl	d53c6 <_ZN5Print7printlnEPKc>
   d48ea:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d48ec:	e7f3      	b.n	d48d6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd6>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d48ee:	4620      	mov	r0, r4
   d48f0:	f000 fd5d 	bl	d53ae <_ZN5Print7printlnEv>
    client.flush();
   d48f4:	4620      	mov	r0, r4
   d48f6:	f001 f951 	bl	d5b9c <_ZN9TCPClient5flushEv>
   d48fa:	2100      	movs	r1, #0
   d48fc:	4638      	mov	r0, r7
   d48fe:	f000 fd0f 	bl	d5320 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d4902:	b918      	cbnz	r0, d490c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x10c>
        client.println(aRequest.body);
   d4904:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d4906:	4620      	mov	r0, r4
   d4908:	f000 fd5d 	bl	d53c6 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d490c:	f104 0b1c 	add.w	fp, r4, #28
   d4910:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4914:	2100      	movs	r1, #0
   d4916:	4658      	mov	r0, fp
   d4918:	f001 fe2d 	bl	d6576 <memset>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d491c:	f000 f8b0 	bl	d4a80 <HAL_Timer_Get_Milli_Seconds>
   d4920:	9000      	str	r0, [sp, #0]
   d4922:	f000 f8ad 	bl	d4a80 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4926:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
   d492a:	f241 3388 	movw	r3, #5000	; 0x1388
    char lastChar = 0;
   d492e:	2600      	movs	r6, #0
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4930:	f1b8 0f00 	cmp.w	r8, #0
   d4934:	bf08      	it	eq
   d4936:	4698      	moveq	r8, r3
    char lastChar = 0;
    bool inHeaders = true;
   d4938:	f04f 0901 	mov.w	r9, #1
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d493c:	4635      	mov	r5, r6
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d493e:	4620      	mov	r0, r4
   d4940:	f001 fb18 	bl	d5f74 <_ZN9TCPClient9availableEv>
   d4944:	b3c0      	cbz	r0, d49b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b8>
            char c = client.read();
   d4946:	4620      	mov	r0, r4
   d4948:	f001 f9bd 	bl	d5cc6 <_ZN9TCPClient4readEv>
   d494c:	b2c7      	uxtb	r7, r0
   d494e:	f000 f897 	bl	d4a80 <HAL_Timer_Get_Milli_Seconds>
   d4952:	9000      	str	r0, [sp, #0]
                #endif

                break;
            }

            if (inHeaders) {
   d4954:	f1b9 0f00 	cmp.w	r9, #0
   d4958:	d018      	beq.n	d498c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
                if ((c == '\n') && (lastChar == '\n')) {
   d495a:	2f0a      	cmp	r7, #10
   d495c:	d111      	bne.n	d4982 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
   d495e:	2e0a      	cmp	r6, #10
   d4960:	d113      	bne.n	d498a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18a>
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4962:	f104 0025 	add.w	r0, r4, #37	; 0x25
   d4966:	f001 fdd5 	bl	d6514 <atoi>

                    memset(&buffer[0], 0, sizeof(buffer));
                    bufferPosition = 0;
                    inHeaders = false;
   d496a:	f04f 0900 	mov.w	r9, #0
            }

            if (inHeaders) {
                if ((c == '\n') && (lastChar == '\n')) {
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d496e:	f8ca 0000 	str.w	r0, [sl]

                    memset(&buffer[0], 0, sizeof(buffer));
   d4972:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4976:	2100      	movs	r1, #0
   d4978:	4658      	mov	r0, fp
   d497a:	f001 fdfc 	bl	d6576 <memset>
                    bufferPosition = 0;
   d497e:	464d      	mov	r5, r9
                    #ifdef LOGGING
                    Serial.print("\r\nHttpClient>\tEnd of HTTP Headers (");
                    Serial.print(aResponse.status);
                    Serial.println(")");
                    #endif
                    continue;
   d4980:	e7dd      	b.n	d493e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
                } else if (c != '\r') {
   d4982:	2f0d      	cmp	r7, #13
   d4984:	bf18      	it	ne
   d4986:	463e      	movne	r6, r7
   d4988:	e000      	b.n	d498c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d498a:	463e      	mov	r6, r7
                    lastChar = c;
                }
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d498c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4990:	429d      	cmp	r5, r3
   d4992:	d802      	bhi.n	d499a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19a>
                buffer[bufferPosition] = c;
   d4994:	1963      	adds	r3, r4, r5
   d4996:	771f      	strb	r7, [r3, #28]
   d4998:	e00c      	b.n	d49b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d499a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d499e:	429d      	cmp	r5, r3
   d49a0:	d108      	bne.n	d49b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d49a2:	f04f 0300 	mov.w	r3, #0
   d49a6:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d49aa:	4620      	mov	r0, r4
   d49ac:	f001 faca 	bl	d5f44 <_ZN9TCPClient4stopEv>
                error = true;
   d49b0:	2701      	movs	r7, #1

                #ifdef LOGGING
                Serial.println("\r\nHttpClient>\tError: Response body larger than buffer.");
                #endif
                break;
   d49b2:	e002      	b.n	d49ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ba>
            }
            bufferPosition++;
   d49b4:	3501      	adds	r5, #1
   d49b6:	e7c2      	b.n	d493e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
   d49b8:	4607      	mov	r7, r0
   d49ba:	f000 f861 	bl	d4a80 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > actualTimeout;
   d49be:	9b00      	ldr	r3, [sp, #0]
   d49c0:	1ac3      	subs	r3, r0, r3
   d49c2:	9301      	str	r3, [sp, #4]

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d49c4:	b927      	cbnz	r7, d49d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
   d49c6:	4543      	cmp	r3, r8
   d49c8:	d802      	bhi.n	d49d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
            delay(200);
   d49ca:	20c8      	movs	r0, #200	; 0xc8
   d49cc:	f000 fdb2 	bl	d5534 <delay>
        }
    } while (client.connected() && !timeout && !error);
   d49d0:	4620      	mov	r0, r4
   d49d2:	f001 f8e4 	bl	d5b9e <_ZN9TCPClient9connectedEv>
   d49d6:	b120      	cbz	r0, d49e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d49d8:	9b01      	ldr	r3, [sp, #4]
   d49da:	4543      	cmp	r3, r8
   d49dc:	d801      	bhi.n	d49e2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d49de:	2f00      	cmp	r7, #0
   d49e0:	d0ad      	beq.n	d493e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d49e2:	4620      	mov	r0, r4
   d49e4:	f001 faae 	bl	d5f44 <_ZN9TCPClient4stopEv>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(aResponse.status);
    #endif

    if (inHeaders) {
   d49e8:	f1b9 0f00 	cmp.w	r9, #0
   d49ec:	d104      	bne.n	d49f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = buffer;
   d49ee:	4659      	mov	r1, fp
   d49f0:	f10a 0004 	add.w	r0, sl, #4
   d49f4:	f000 fc15 	bl	d5222 <_ZN6StringaSEPKc>
}
   d49f8:	b009      	add	sp, #36	; 0x24
   d49fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d49fe:	bf00      	nop
   d4a00:	000d6a58 	.word	0x000d6a58
   d4a04:	000d69ce 	.word	0x000d69ce
   d4a08:	000d68d0 	.word	0x000d68d0
   d4a0c:	000d68e2 	.word	0x000d68e2
   d4a10:	000d68dc 	.word	0x000d68dc
   d4a14:	000d68ed 	.word	0x000d68ed
   d4a18:	000d6901 	.word	0x000d6901
   d4a1c:	000d68f2 	.word	0x000d68f2

000d4a20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <netdb_freeaddrinfo+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	689b      	ldr	r3, [r3, #8]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030268 	.word	0x00030268

000d4a30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <netdb_getaddrinfo+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	68db      	ldr	r3, [r3, #12]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030268 	.word	0x00030268

000d4a40 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_Pin_Map+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	681b      	ldr	r3, [r3, #0]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	0003022c 	.word	0x0003022c

000d4a50 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_SPI_Init+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	69db      	ldr	r3, [r3, #28]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030230 	.word	0x00030230

000d4a60 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <if_index_to_name+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	695b      	ldr	r3, [r3, #20]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003026c 	.word	0x0003026c

000d4a70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_RNG_GetRandomNumber+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	685b      	ldr	r3, [r3, #4]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030218 	.word	0x00030218

000d4a80 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	695b      	ldr	r3, [r3, #20]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030218 	.word	0x00030218

000d4a90 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_RTC_Get_UnixTime+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	69db      	ldr	r3, [r3, #28]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030218 	.word	0x00030218

000d4aa0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_RTC_Time_Is_Valid+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030218 	.word	0x00030218

000d4ab0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <hal_timer_millis+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030218 	.word	0x00030218

000d4ac0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_Core_Get_Last_Reset_Info+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030234 	.word	0x00030234

000d4ad0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <os_thread_is_current+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	689b      	ldr	r3, [r3, #8]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030248 	.word	0x00030248

000d4ae0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <os_thread_join+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	691b      	ldr	r3, [r3, #16]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030248 	.word	0x00030248

000d4af0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <os_thread_cleanup+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	695b      	ldr	r3, [r3, #20]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030248 	.word	0x00030248

000d4b00 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <os_mutex_create+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030248 	.word	0x00030248

000d4b10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <os_mutex_recursive_create+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030248 	.word	0x00030248

000d4b20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <inet_inet_ntop+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	695b      	ldr	r3, [r3, #20]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030264 	.word	0x00030264

000d4b30 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <inet_htonl+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6a1b      	ldr	r3, [r3, #32]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030264 	.word	0x00030264

000d4b40 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <inet_htons+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030264 	.word	0x00030264

000d4b50 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <HAL_USART_Init+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	681b      	ldr	r3, [r3, #0]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003023c 	.word	0x0003023c

000d4b60 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <HAL_USART_Write_Data+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	68db      	ldr	r3, [r3, #12]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003023c 	.word	0x0003023c

000d4b70 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_USART_Available_Data+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	691b      	ldr	r3, [r3, #16]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003023c 	.word	0x0003023c

000d4b80 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <HAL_USART_Read_Data+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	695b      	ldr	r3, [r3, #20]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003023c 	.word	0x0003023c

000d4b90 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_USART_Peek_Data+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	699b      	ldr	r3, [r3, #24]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003023c 	.word	0x0003023c

000d4ba0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_USART_Flush_Data+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	69db      	ldr	r3, [r3, #28]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003023c 	.word	0x0003023c

000d4bb0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <HAL_USART_Available_Data_For_Write+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003023c 	.word	0x0003023c

000d4bc0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <sock_setsockopt+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	699b      	ldr	r3, [r3, #24]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030238 	.word	0x00030238

000d4bd0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <sock_close+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	69db      	ldr	r3, [r3, #28]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030238 	.word	0x00030238

000d4be0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <sock_connect+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6a1b      	ldr	r3, [r3, #32]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030238 	.word	0x00030238

000d4bf0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <sock_recv+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030238 	.word	0x00030238

000d4c00 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <sock_send+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030238 	.word	0x00030238

000d4c10 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <sock_socket+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030238 	.word	0x00030238

000d4c20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <HAL_USB_USART_Init+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	681b      	ldr	r3, [r3, #0]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003024c 	.word	0x0003024c

000d4c30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <HAL_USB_USART_Begin+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	685b      	ldr	r3, [r3, #4]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	0003024c 	.word	0x0003024c

000d4c40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <HAL_USB_USART_Available_Data+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	691b      	ldr	r3, [r3, #16]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003024c 	.word	0x0003024c

000d4c50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	695b      	ldr	r3, [r3, #20]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	0003024c 	.word	0x0003024c

000d4c60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <HAL_USB_USART_Receive_Data+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	699b      	ldr	r3, [r3, #24]
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	0003024c 	.word	0x0003024c

000d4c70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <HAL_USB_USART_Send_Data+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	69db      	ldr	r3, [r3, #28]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	0003024c 	.word	0x0003024c

000d4c80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <HAL_USB_USART_Flush_Data+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6a1b      	ldr	r3, [r3, #32]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	0003024c 	.word	0x0003024c

000d4c90 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <log_message+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030260 	.word	0x00030260

000d4ca0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <system_mode+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	681b      	ldr	r3, [r3, #0]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030220 	.word	0x00030220

000d4cb0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <set_system_mode+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	685b      	ldr	r3, [r3, #4]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030220 	.word	0x00030220

000d4cc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <system_delay_ms+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	695b      	ldr	r3, [r3, #20]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030220 	.word	0x00030220

000d4cd0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <system_thread_get_state+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030220 	.word	0x00030220

000d4ce0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b03      	ldr	r3, [pc, #12]	; (d4cf0 <system_ctrl_set_app_request_handler+0x10>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cea:	9301      	str	r3, [sp, #4]
   d4cec:	bd08      	pop	{r3, pc}
   d4cee:	0000      	.short	0x0000
   d4cf0:	00030220 	.word	0x00030220

000d4cf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b03      	ldr	r3, [pc, #12]	; (d4d04 <system_ctrl_set_result+0x10>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cfe:	9301      	str	r3, [sp, #4]
   d4d00:	bd08      	pop	{r3, pc}
   d4d02:	0000      	.short	0x0000
   d4d04:	00030220 	.word	0x00030220

000d4d08 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b03      	ldr	r3, [pc, #12]	; (d4d18 <system_sleep_pins+0x10>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d4d12:	9301      	str	r3, [sp, #4]
   d4d14:	bd08      	pop	{r3, pc}
   d4d16:	0000      	.short	0x0000
   d4d18:	00030220 	.word	0x00030220

000d4d1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <network_connect+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	685b      	ldr	r3, [r3, #4]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030240 	.word	0x00030240

000d4d2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <network_connecting+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	689b      	ldr	r3, [r3, #8]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030240 	.word	0x00030240

000d4d3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <network_disconnect+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	68db      	ldr	r3, [r3, #12]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030240 	.word	0x00030240

000d4d4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <network_ready+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	691b      	ldr	r3, [r3, #16]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030240 	.word	0x00030240

000d4d5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <network_on+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	695b      	ldr	r3, [r3, #20]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030240 	.word	0x00030240

000d4d6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <network_off+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	699b      	ldr	r3, [r3, #24]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030240 	.word	0x00030240

000d4d7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <network_listen+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	69db      	ldr	r3, [r3, #28]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030240 	.word	0x00030240

000d4d8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <network_listening+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6a1b      	ldr	r3, [r3, #32]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030240 	.word	0x00030240

000d4d9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <network_set_listen_timeout+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030240 	.word	0x00030240

000d4dac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <network_get_listen_timeout+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030240 	.word	0x00030240

000d4dbc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <spark_process+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	689b      	ldr	r3, [r3, #8]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030244 	.word	0x00030244

000d4dcc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <spark_cloud_flag_connect+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	68db      	ldr	r3, [r3, #12]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030244 	.word	0x00030244

000d4ddc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <spark_cloud_flag_disconnect+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	691b      	ldr	r3, [r3, #16]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030244 	.word	0x00030244

000d4dec <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <spark_cloud_flag_connected+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	695b      	ldr	r3, [r3, #20]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030244 	.word	0x00030244

000d4dfc <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <spark_sync_time+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030244 	.word	0x00030244

000d4e0c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <spark_sync_time_pending+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030244 	.word	0x00030244

000d4e1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030244 	.word	0x00030244

000d4e2c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <malloc+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	681b      	ldr	r3, [r3, #0]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <free+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	685b      	ldr	r3, [r3, #4]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003021c 	.word	0x0003021c

000d4e4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <realloc+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	689b      	ldr	r3, [r3, #8]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003021c 	.word	0x0003021c

000d4e5c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <__errno+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003021c 	.word	0x0003021c

000d4e6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	4611      	mov	r1, r2
   d4e70:	6840      	ldr	r0, [r0, #4]
   d4e72:	f7ff bf8b 	b.w	d4d8c <network_listening>

000d4e76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e76:	2200      	movs	r2, #0
   d4e78:	4611      	mov	r1, r2
   d4e7a:	6840      	ldr	r0, [r0, #4]
   d4e7c:	f7ff bf96 	b.w	d4dac <network_get_listen_timeout>

000d4e80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e80:	2200      	movs	r2, #0
   d4e82:	6840      	ldr	r0, [r0, #4]
   d4e84:	f7ff bf8a 	b.w	d4d9c <network_set_listen_timeout>

000d4e88 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e88:	2200      	movs	r2, #0
   d4e8a:	f081 0101 	eor.w	r1, r1, #1
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	f7ff bf74 	b.w	d4d7c <network_listen>

000d4e94 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e94:	2300      	movs	r3, #0
   d4e96:	461a      	mov	r2, r3
   d4e98:	4619      	mov	r1, r3
   d4e9a:	6840      	ldr	r0, [r0, #4]
   d4e9c:	f7ff bf66 	b.w	d4d6c <network_off>

000d4ea0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ea0:	2300      	movs	r3, #0
   d4ea2:	461a      	mov	r2, r3
   d4ea4:	4619      	mov	r1, r3
   d4ea6:	6840      	ldr	r0, [r0, #4]
   d4ea8:	f7ff bf58 	b.w	d4d5c <network_on>

000d4eac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	4611      	mov	r1, r2
   d4eb0:	6840      	ldr	r0, [r0, #4]
   d4eb2:	f7ff bf4b 	b.w	d4d4c <network_ready>

000d4eb6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	4611      	mov	r1, r2
   d4eba:	6840      	ldr	r0, [r0, #4]
   d4ebc:	f7ff bf36 	b.w	d4d2c <network_connecting>

000d4ec0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ec0:	2200      	movs	r2, #0
   d4ec2:	2102      	movs	r1, #2
   d4ec4:	6840      	ldr	r0, [r0, #4]
   d4ec6:	f7ff bf39 	b.w	d4d3c <network_disconnect>

000d4eca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eca:	2300      	movs	r3, #0
   d4ecc:	461a      	mov	r2, r3
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff bf24 	b.w	d4d1c <network_connect>

000d4ed4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ed4:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ed6:	2203      	movs	r2, #3
   d4ed8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4eda:	4a02      	ldr	r2, [pc, #8]	; (d4ee4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4edc:	601a      	str	r2, [r3, #0]
   d4ede:	4770      	bx	lr
   d4ee0:	2003e3b8 	.word	0x2003e3b8
   d4ee4:	000d6910 	.word	0x000d6910

000d4ee8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ee8:	4770      	bx	lr

000d4eea <_ZN8SPIClassD0Ev>:
   d4eea:	b510      	push	{r4, lr}
   d4eec:	2110      	movs	r1, #16
   d4eee:	4604      	mov	r4, r0
   d4ef0:	f001 f9c5 	bl	d627e <_ZdlPvj>
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ef8:	b570      	push	{r4, r5, r6, lr}
   d4efa:	4b08      	ldr	r3, [pc, #32]	; (d4f1c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4efc:	6003      	str	r3, [r0, #0]
   d4efe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4f00:	2500      	movs	r5, #0
   d4f02:	460e      	mov	r6, r1
   d4f04:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4f08:	f7ff fdfa 	bl	d4b00 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4f0c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4f0e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4f10:	f7ff fd9e 	bl	d4a50 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4f14:	60a5      	str	r5, [r4, #8]
}
   d4f16:	4620      	mov	r0, r4
   d4f18:	bd70      	pop	{r4, r5, r6, pc}
   d4f1a:	bf00      	nop
   d4f1c:	000d6944 	.word	0x000d6944

000d4f20 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d4f20:	b510      	push	{r4, lr}
   d4f22:	2400      	movs	r4, #0
   d4f24:	7004      	strb	r4, [r0, #0]
   d4f26:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d4f28:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d4f2a:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d4f2e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d4f30:	dd07      	ble.n	d4f42 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d4f32:	3901      	subs	r1, #1
   d4f34:	4299      	cmp	r1, r3
   d4f36:	d209      	bcs.n	d4f4c <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d4f38:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d4f3c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d4f3e:	2301      	movs	r3, #1
   d4f40:	e001      	b.n	d4f46 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d4f42:	d102      	bne.n	d4f4a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d4f44:	2302      	movs	r3, #2
   d4f46:	7003      	strb	r3, [r0, #0]
   d4f48:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d4f4a:	8041      	strh	r1, [r0, #2]
    }
}
   d4f4c:	bd10      	pop	{r4, pc}
	...

000d4f50 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4f50:	b570      	push	{r4, r5, r6, lr}
   d4f52:	b086      	sub	sp, #24
   d4f54:	4616      	mov	r6, r2
   d4f56:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4f58:	2300      	movs	r3, #0
   d4f5a:	9302      	str	r3, [sp, #8]
   d4f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4f5e:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4f60:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4f64:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4f66:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f6a:	4631      	mov	r1, r6
   d4f6c:	4628      	mov	r0, r5
   d4f6e:	f7ff fecb 	bl	d4d08 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d4f72:	4633      	mov	r3, r6
   d4f74:	462a      	mov	r2, r5
   d4f76:	4601      	mov	r1, r0
   d4f78:	a804      	add	r0, sp, #16
   d4f7a:	f7ff ffd1 	bl	d4f20 <_ZN11SleepResultC1EiPKtj>
   d4f7e:	4b06      	ldr	r3, [pc, #24]	; (d4f98 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d4f80:	9804      	ldr	r0, [sp, #16]
   d4f82:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d4f86:	6018      	str	r0, [r3, #0]
   d4f88:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d4f8a:	681a      	ldr	r2, [r3, #0]
   d4f8c:	889b      	ldrh	r3, [r3, #4]
   d4f8e:	6022      	str	r2, [r4, #0]
}
   d4f90:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d4f92:	80a3      	strh	r3, [r4, #4]
}
   d4f94:	b006      	add	sp, #24
   d4f96:	bd70      	pop	{r4, r5, r6, pc}
   d4f98:	2003e3c0 	.word	0x2003e3c0

000d4f9c <_ZNK11SleepResult6reasonEv>:
    }
}

WakeupReason SleepResult::reason() const {
    return reason_;
}
   d4f9c:	7800      	ldrb	r0, [r0, #0]
   d4f9e:	4770      	bx	lr

000d4fa0 <_ZNK11SleepResult12wokenUpByRtcEv>:
   d4fa0:	7800      	ldrb	r0, [r0, #0]
   d4fa2:	3802      	subs	r0, #2
   d4fa4:	2801      	cmp	r0, #1
   d4fa6:	bf8c      	ite	hi
   d4fa8:	2000      	movhi	r0, #0
   d4faa:	2001      	movls	r0, #1
   d4fac:	4770      	bx	lr

000d4fae <_ZNK11SleepResult12wokenUpByPinEv>:
bool SleepResult::wokenUpByRtc() const {
    return reason_ == WAKEUP_REASON_RTC || reason_ == WAKEUP_REASON_PIN_OR_RTC;
}

bool SleepResult::wokenUpByPin() const {
    return reason_ == WAKEUP_REASON_PIN || reason_ == WAKEUP_REASON_PIN_OR_RTC;
   d4fae:	7800      	ldrb	r0, [r0, #0]
   d4fb0:	2801      	cmp	r0, #1
   d4fb2:	d002      	beq.n	d4fba <_ZNK11SleepResult12wokenUpByPinEv+0xc>
   d4fb4:	1ec3      	subs	r3, r0, #3
   d4fb6:	4258      	negs	r0, r3
   d4fb8:	4158      	adcs	r0, r3
}
   d4fba:	4770      	bx	lr

000d4fbc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4fbc:	4b04      	ldr	r3, [pc, #16]	; (d4fd0 <_GLOBAL__sub_I_System+0x14>)
   d4fbe:	2000      	movs	r0, #0
   d4fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4fc4:	7018      	strb	r0, [r3, #0]
   d4fc6:	8058      	strh	r0, [r3, #2]
   d4fc8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4fca:	f7ff be71 	b.w	d4cb0 <set_system_mode>
   d4fce:	bf00      	nop
   d4fd0:	2003e3c0 	.word	0x2003e3c0

000d4fd4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4fd4:	b510      	push	{r4, lr}
   d4fd6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4fd8:	f001 fb10 	bl	d65fc <strlen>
   d4fdc:	3801      	subs	r0, #1
   d4fde:	1823      	adds	r3, r4, r0
   d4fe0:	4620      	mov	r0, r4
	while(i<j){
   d4fe2:	4298      	cmp	r0, r3
   d4fe4:	d206      	bcs.n	d4ff4 <_Z11str_reversePc+0x20>
		c = *i;
   d4fe6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4fe8:	7819      	ldrb	r1, [r3, #0]
   d4fea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4fee:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4ff2:	e7f6      	b.n	d4fe2 <_Z11str_reversePc+0xe>
   d4ff4:	bd10      	pop	{r4, pc}

000d4ff6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4ffa:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d4ffc:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ffe:	4615      	mov	r5, r2
   d5000:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d5002:	bf34      	ite	cc
   d5004:	4615      	movcc	r5, r2
   d5006:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5008:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d500a:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d500c:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d500e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d5012:	d107      	bne.n	d5024 <ltoa+0x2e>
   d5014:	4298      	cmp	r0, r3
   d5016:	da05      	bge.n	d5024 <ltoa+0x2e>
      {
            *head++ = '-';
   d5018:	232d      	movs	r3, #45	; 0x2d
   d501a:	f101 0801 	add.w	r8, r1, #1
   d501e:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d5020:	4240      	negs	r0, r0
   d5022:	e001      	b.n	d5028 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d5024:	b1b0      	cbz	r0, d5054 <ltoa+0x5e>
   d5026:	46a0      	mov	r8, r4
   d5028:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d502c:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d502e:	462a      	mov	r2, r5
   d5030:	4601      	mov	r1, r0
   d5032:	a801      	add	r0, sp, #4
   d5034:	f001 fa80 	bl	d6538 <ldiv>
   d5038:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d503a:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d503c:	2b09      	cmp	r3, #9
   d503e:	bfcc      	ite	gt
   d5040:	2237      	movgt	r2, #55	; 0x37
   d5042:	2230      	movle	r2, #48	; 0x30
   d5044:	fa52 f383 	uxtab	r3, r2, r3
   d5048:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d504c:	3701      	adds	r7, #1
   d504e:	2800      	cmp	r0, #0
   d5050:	d1ed      	bne.n	d502e <ltoa+0x38>
   d5052:	e006      	b.n	d5062 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5054:	2330      	movs	r3, #48	; 0x30
   d5056:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d505a:	46a0      	mov	r8, r4
   d505c:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5060:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5062:	463a      	mov	r2, r7
   d5064:	1c71      	adds	r1, r6, #1
   d5066:	4640      	mov	r0, r8
   d5068:	f001 fa7a 	bl	d6560 <memcpy>
      return str;
}
   d506c:	4620      	mov	r0, r4
   d506e:	b00c      	add	sp, #48	; 0x30
   d5070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5074 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5074:	b570      	push	{r4, r5, r6, lr}
   d5076:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5078:	1e91      	subs	r1, r2, #2
   d507a:	2922      	cmp	r1, #34	; 0x22
   d507c:	d820      	bhi.n	d50c0 <ultoa+0x4c>
   d507e:	4625      	mov	r5, r4
   d5080:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5082:	b910      	cbnz	r0, d508a <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5084:	4423      	add	r3, r4
            *ptr++ = '0';
   d5086:	2230      	movs	r2, #48	; 0x30
   d5088:	e00e      	b.n	d50a8 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d508a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d508e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5092:	b2c1      	uxtb	r1, r0
   d5094:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5098:	2809      	cmp	r0, #9
                *ptr += '0';
   d509a:	bf94      	ite	ls
   d509c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d509e:	3157      	addhi	r1, #87	; 0x57
   d50a0:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d50a4:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d50a6:	e7eb      	b.n	d5080 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d50a8:	4299      	cmp	r1, r3
   d50aa:	d202      	bcs.n	d50b2 <ultoa+0x3e>
            *ptr++ = '0';
   d50ac:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d50b0:	e7fa      	b.n	d50a8 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d50b2:	2300      	movs	r3, #0
	str_reverse(buffer);
   d50b4:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d50b6:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d50b8:	f7ff ff8c 	bl	d4fd4 <_Z11str_reversePc>
	return buffer;
   d50bc:	4620      	mov	r0, r4
   d50be:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d50c0:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d50c2:	bd70      	pop	{r4, r5, r6, pc}

000d50c4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d50c4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d50c6:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d50c8:	460c      	mov	r4, r1
   d50ca:	4615      	mov	r5, r2
	if(a<0){
   d50cc:	da0b      	bge.n	d50e6 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d50ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d50d2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d50d6:	bf14      	ite	ne
   d50d8:	4258      	negne	r0, r3
   d50da:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d50dc:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d50de:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d50e0:	462a      	mov	r2, r5
   d50e2:	4419      	add	r1, r3
   d50e4:	e000      	b.n	d50e8 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d50e6:	2301      	movs	r3, #1
   d50e8:	f7ff ffc4 	bl	d5074 <ultoa>
	}
	return buffer;
}
   d50ec:	4620      	mov	r0, r4
   d50ee:	bd38      	pop	{r3, r4, r5, pc}

000d50f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d50f0:	b510      	push	{r4, lr}
   d50f2:	4604      	mov	r4, r0
{
	free(buffer);
   d50f4:	6800      	ldr	r0, [r0, #0]
   d50f6:	f7ff fea1 	bl	d4e3c <free>
}
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}

000d50fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d50fe:	b510      	push	{r4, lr}
   d5100:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5102:	6800      	ldr	r0, [r0, #0]
   d5104:	b108      	cbz	r0, d510a <_ZN6String10invalidateEv+0xc>
   d5106:	f7ff fe99 	bl	d4e3c <free>
	buffer = NULL;
   d510a:	2300      	movs	r3, #0
   d510c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d510e:	60a3      	str	r3, [r4, #8]
   d5110:	6063      	str	r3, [r4, #4]
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5114:	b538      	push	{r3, r4, r5, lr}
   d5116:	4604      	mov	r4, r0
   d5118:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d511a:	6800      	ldr	r0, [r0, #0]
   d511c:	3101      	adds	r1, #1
   d511e:	f7ff fe95 	bl	d4e4c <realloc>
	if (newbuffer) {
   d5122:	b110      	cbz	r0, d512a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5124:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5128:	2001      	movs	r0, #1
	}
	return 0;
}
   d512a:	bd38      	pop	{r3, r4, r5, pc}

000d512c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d512c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d512e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5130:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5132:	b113      	cbz	r3, d513a <_ZN6String7reserveEj+0xe>
   d5134:	6843      	ldr	r3, [r0, #4]
   d5136:	428b      	cmp	r3, r1
   d5138:	d207      	bcs.n	d514a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d513a:	4620      	mov	r0, r4
   d513c:	f7ff ffea 	bl	d5114 <_ZN6String12changeBufferEj>
   d5140:	b120      	cbz	r0, d514c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5142:	68a3      	ldr	r3, [r4, #8]
   d5144:	b90b      	cbnz	r3, d514a <_ZN6String7reserveEj+0x1e>
   d5146:	6822      	ldr	r2, [r4, #0]
   d5148:	7013      	strb	r3, [r2, #0]
   d514a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d514c:	bd10      	pop	{r4, pc}

000d514e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d514e:	b570      	push	{r4, r5, r6, lr}
   d5150:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5152:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5154:	4604      	mov	r4, r0
   d5156:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5158:	f7ff ffe8 	bl	d512c <_ZN6String7reserveEj>
   d515c:	b918      	cbnz	r0, d5166 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d515e:	4620      	mov	r0, r4
   d5160:	f7ff ffcd 	bl	d50fe <_ZN6String10invalidateEv>
		return *this;
   d5164:	e009      	b.n	d517a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5166:	462a      	mov	r2, r5
   d5168:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d516a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d516c:	6820      	ldr	r0, [r4, #0]
   d516e:	f001 f9f7 	bl	d6560 <memcpy>
	buffer[len] = 0;
   d5172:	6822      	ldr	r2, [r4, #0]
   d5174:	68a3      	ldr	r3, [r4, #8]
   d5176:	2100      	movs	r1, #0
   d5178:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d517a:	4620      	mov	r0, r4
   d517c:	bd70      	pop	{r4, r5, r6, pc}

000d517e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d517e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5180:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5182:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5184:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5186:	6043      	str	r3, [r0, #4]
	len = 0;
   d5188:	6083      	str	r3, [r0, #8]
	flags = 0;
   d518a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d518c:	460d      	mov	r5, r1
   d518e:	b139      	cbz	r1, d51a0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5190:	4608      	mov	r0, r1
   d5192:	f001 fa33 	bl	d65fc <strlen>
   d5196:	4629      	mov	r1, r5
   d5198:	4602      	mov	r2, r0
   d519a:	4620      	mov	r0, r4
   d519c:	f7ff ffd7 	bl	d514e <_ZN6String4copyEPKcj>
}
   d51a0:	4620      	mov	r0, r4
   d51a2:	bd38      	pop	{r3, r4, r5, pc}

000d51a4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d51a4:	b538      	push	{r3, r4, r5, lr}
   d51a6:	4605      	mov	r5, r0
	if (buffer) {
   d51a8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d51aa:	460c      	mov	r4, r1
	if (buffer) {
   d51ac:	b160      	cbz	r0, d51c8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d51ae:	686a      	ldr	r2, [r5, #4]
   d51b0:	688b      	ldr	r3, [r1, #8]
   d51b2:	429a      	cmp	r2, r3
   d51b4:	d306      	bcc.n	d51c4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d51b6:	6809      	ldr	r1, [r1, #0]
   d51b8:	f001 fa18 	bl	d65ec <strcpy>
			len = rhs.len;
   d51bc:	68a3      	ldr	r3, [r4, #8]
   d51be:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d51c0:	2300      	movs	r3, #0
   d51c2:	e00a      	b.n	d51da <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d51c4:	f7ff fe3a 	bl	d4e3c <free>
		}
	}
	buffer = rhs.buffer;
   d51c8:	6823      	ldr	r3, [r4, #0]
   d51ca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d51cc:	6863      	ldr	r3, [r4, #4]
   d51ce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d51d0:	68a3      	ldr	r3, [r4, #8]
   d51d2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d51d4:	2300      	movs	r3, #0
   d51d6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d51d8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d51da:	60a3      	str	r3, [r4, #8]
   d51dc:	bd38      	pop	{r3, r4, r5, pc}

000d51de <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d51de:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d51e0:	b510      	push	{r4, lr}
   d51e2:	460b      	mov	r3, r1
   d51e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d51e6:	d007      	beq.n	d51f8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d51e8:	6809      	ldr	r1, [r1, #0]
   d51ea:	b119      	cbz	r1, d51f4 <_ZN6StringaSERKS_+0x16>
   d51ec:	689a      	ldr	r2, [r3, #8]
   d51ee:	f7ff ffae 	bl	d514e <_ZN6String4copyEPKcj>
   d51f2:	e001      	b.n	d51f8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d51f4:	f7ff ff83 	bl	d50fe <_ZN6String10invalidateEv>

	return *this;
}
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d51fc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51fe:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5200:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5202:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5204:	6043      	str	r3, [r0, #4]
	len = 0;
   d5206:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5208:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d520a:	f7ff ffe8 	bl	d51de <_ZN6StringaSERKS_>
}
   d520e:	4620      	mov	r0, r4
   d5210:	bd10      	pop	{r4, pc}

000d5212 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5212:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5214:	b510      	push	{r4, lr}
   d5216:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5218:	d001      	beq.n	d521e <_ZN6StringaSEOS_+0xc>
   d521a:	f7ff ffc3 	bl	d51a4 <_ZN6String4moveERS_>
	return *this;
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd10      	pop	{r4, pc}

000d5222 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5222:	b538      	push	{r3, r4, r5, lr}
   d5224:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5226:	460c      	mov	r4, r1
   d5228:	b141      	cbz	r1, d523c <_ZN6StringaSEPKc+0x1a>
   d522a:	4608      	mov	r0, r1
   d522c:	f001 f9e6 	bl	d65fc <strlen>
   d5230:	4621      	mov	r1, r4
   d5232:	4602      	mov	r2, r0
   d5234:	4628      	mov	r0, r5
   d5236:	f7ff ff8a 	bl	d514e <_ZN6String4copyEPKcj>
   d523a:	e001      	b.n	d5240 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d523c:	f7ff ff5f 	bl	d50fe <_ZN6String10invalidateEv>

	return *this;
}
   d5240:	4628      	mov	r0, r5
   d5242:	bd38      	pop	{r3, r4, r5, pc}

000d5244 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5248:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d524a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d524c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d524e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5250:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5252:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5254:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5256:	a901      	add	r1, sp, #4
   d5258:	f7ff ff34 	bl	d50c4 <itoa>
	*this = buf;
   d525c:	a901      	add	r1, sp, #4
   d525e:	4620      	mov	r0, r4
   d5260:	f7ff ffdf 	bl	d5222 <_ZN6StringaSEPKc>
}
   d5264:	4620      	mov	r0, r4
   d5266:	b00a      	add	sp, #40	; 0x28
   d5268:	bd10      	pop	{r4, pc}

000d526a <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d526a:	b510      	push	{r4, lr}
   d526c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d526e:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5270:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5272:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5274:	6063      	str	r3, [r4, #4]
	len = 0;
   d5276:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5278:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d527a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d527c:	a901      	add	r1, sp, #4
   d527e:	f7ff feba 	bl	d4ff6 <ltoa>
	*this = buf;
   d5282:	a901      	add	r1, sp, #4
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff ffcc 	bl	d5222 <_ZN6StringaSEPKc>
}
   d528a:	4620      	mov	r0, r4
   d528c:	b00a      	add	sp, #40	; 0x28
   d528e:	bd10      	pop	{r4, pc}

000d5290 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5290:	b570      	push	{r4, r5, r6, lr}
   d5292:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5294:	460e      	mov	r6, r1
   d5296:	b909      	cbnz	r1, d529c <_ZN6String6concatEPKcj+0xc>
   d5298:	2000      	movs	r0, #0
   d529a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d529c:	b16a      	cbz	r2, d52ba <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d529e:	6883      	ldr	r3, [r0, #8]
   d52a0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d52a2:	4629      	mov	r1, r5
   d52a4:	f7ff ff42 	bl	d512c <_ZN6String7reserveEj>
   d52a8:	2800      	cmp	r0, #0
   d52aa:	d0f5      	beq.n	d5298 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d52ac:	6820      	ldr	r0, [r4, #0]
   d52ae:	68a3      	ldr	r3, [r4, #8]
   d52b0:	4631      	mov	r1, r6
   d52b2:	4418      	add	r0, r3
   d52b4:	f001 f99a 	bl	d65ec <strcpy>
	len = newlen;
   d52b8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d52ba:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d52bc:	bd70      	pop	{r4, r5, r6, pc}

000d52be <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d52be:	688a      	ldr	r2, [r1, #8]
   d52c0:	6809      	ldr	r1, [r1, #0]
   d52c2:	f7ff bfe5 	b.w	d5290 <_ZN6String6concatEPKcj>

000d52c6 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d52c6:	b538      	push	{r3, r4, r5, lr}
   d52c8:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d52ca:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d52cc:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d52ce:	b141      	cbz	r1, d52e2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d52d0:	f001 f994 	bl	d65fc <strlen>
   d52d4:	4621      	mov	r1, r4
   d52d6:	4602      	mov	r2, r0
   d52d8:	4628      	mov	r0, r5
}
   d52da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d52de:	f7ff bfd7 	b.w	d5290 <_ZN6String6concatEPKcj>
}
   d52e2:	bd38      	pop	{r3, r4, r5, pc}

000d52e4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d52e4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d52e6:	688a      	ldr	r2, [r1, #8]
   d52e8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d52ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d52ec:	f7ff ffd0 	bl	d5290 <_ZN6String6concatEPKcj>
   d52f0:	b910      	cbnz	r0, d52f8 <_ZplRK15StringSumHelperRK6String+0x14>
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff ff03 	bl	d50fe <_ZN6String10invalidateEv>
	return a;
}
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d52fc:	b538      	push	{r3, r4, r5, lr}
   d52fe:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5300:	460d      	mov	r5, r1
   d5302:	b141      	cbz	r1, d5316 <_ZplRK15StringSumHelperPKc+0x1a>
   d5304:	4608      	mov	r0, r1
   d5306:	f001 f979 	bl	d65fc <strlen>
   d530a:	4629      	mov	r1, r5
   d530c:	4602      	mov	r2, r0
   d530e:	4620      	mov	r0, r4
   d5310:	f7ff ffbe 	bl	d5290 <_ZN6String6concatEPKcj>
   d5314:	b910      	cbnz	r0, d531c <_ZplRK15StringSumHelperPKc+0x20>
   d5316:	4620      	mov	r0, r4
   d5318:	f7ff fef1 	bl	d50fe <_ZN6String10invalidateEv>
	return a;
}
   d531c:	4620      	mov	r0, r4
   d531e:	bd38      	pop	{r3, r4, r5, pc}

000d5320 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5320:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5322:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5324:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5326:	b912      	cbnz	r2, d532e <_ZNK6String6equalsEPKc+0xe>
   d5328:	b919      	cbnz	r1, d5332 <_ZNK6String6equalsEPKc+0x12>
   d532a:	2001      	movs	r0, #1
   d532c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d532e:	b911      	cbnz	r1, d5336 <_ZNK6String6equalsEPKc+0x16>
   d5330:	6803      	ldr	r3, [r0, #0]
   d5332:	7818      	ldrb	r0, [r3, #0]
   d5334:	e002      	b.n	d533c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5336:	6800      	ldr	r0, [r0, #0]
   d5338:	f001 f94e 	bl	d65d8 <strcmp>
   d533c:	fab0 f080 	clz	r0, r0
   d5340:	0940      	lsrs	r0, r0, #5
}
   d5342:	bd08      	pop	{r3, pc}

000d5344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5344:	4802      	ldr	r0, [pc, #8]	; (d5350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5346:	2300      	movs	r3, #0
   d5348:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d534a:	f7ff bbe1 	b.w	d4b10 <os_mutex_recursive_create>
   d534e:	bf00      	nop
   d5350:	2003e3c8 	.word	0x2003e3c8

000d5354 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5356:	4606      	mov	r6, r0
   d5358:	460d      	mov	r5, r1
   d535a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d535c:	2400      	movs	r4, #0
  while (size--) {
   d535e:	42bd      	cmp	r5, r7
   d5360:	d00c      	beq.n	d537c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5362:	6833      	ldr	r3, [r6, #0]
   d5364:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5368:	689b      	ldr	r3, [r3, #8]
   d536a:	4630      	mov	r0, r6
   d536c:	4798      	blx	r3
     if (chunk>=0)
   d536e:	2800      	cmp	r0, #0
   d5370:	db01      	blt.n	d5376 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5372:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5374:	e7f3      	b.n	d535e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5376:	2c00      	cmp	r4, #0
   d5378:	bf08      	it	eq
   d537a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d537c:	4620      	mov	r0, r4
   d537e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5380 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5380:	b570      	push	{r4, r5, r6, lr}
   d5382:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5384:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5386:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5388:	b149      	cbz	r1, d539e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d538a:	f001 f937 	bl	d65fc <strlen>
   d538e:	682b      	ldr	r3, [r5, #0]
   d5390:	4602      	mov	r2, r0
   d5392:	4621      	mov	r1, r4
   d5394:	4628      	mov	r0, r5
   d5396:	68db      	ldr	r3, [r3, #12]
    }
   d5398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d539c:	4718      	bx	r3
    }
   d539e:	bd70      	pop	{r4, r5, r6, pc}

000d53a0 <_ZN5Print5printEPKc>:
   d53a0:	b508      	push	{r3, lr}
   d53a2:	f7ff ffed 	bl	d5380 <_ZN5Print5writeEPKc>
   d53a6:	bd08      	pop	{r3, pc}

000d53a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53a8:	6803      	ldr	r3, [r0, #0]
   d53aa:	689b      	ldr	r3, [r3, #8]
   d53ac:	4718      	bx	r3

000d53ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53b0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d53b4:	f7ff fff8 	bl	d53a8 <_ZN5Print5printEc>
  n += print('\n');
   d53b8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d53ba:	4604      	mov	r4, r0
  n += print('\n');
   d53bc:	4628      	mov	r0, r5
   d53be:	f7ff fff3 	bl	d53a8 <_ZN5Print5printEc>
  return n;
}
   d53c2:	4420      	add	r0, r4
   d53c4:	bd38      	pop	{r3, r4, r5, pc}

000d53c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d53c6:	b538      	push	{r3, r4, r5, lr}
   d53c8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53ca:	f7ff ffd9 	bl	d5380 <_ZN5Print5writeEPKc>
   d53ce:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d53d0:	4628      	mov	r0, r5
   d53d2:	f7ff ffec 	bl	d53ae <_ZN5Print7printlnEv>
  return n;
}
   d53d6:	4420      	add	r0, r4
   d53d8:	bd38      	pop	{r3, r4, r5, pc}

000d53da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53da:	b530      	push	{r4, r5, lr}
   d53dc:	b08b      	sub	sp, #44	; 0x2c
   d53de:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53e0:	2100      	movs	r1, #0
   d53e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53e6:	2a01      	cmp	r2, #1
   d53e8:	bf98      	it	ls
   d53ea:	220a      	movls	r2, #10
   d53ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d53f0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d53f4:	fb05 3312 	mls	r3, r5, r2, r3
   d53f8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53fc:	2b09      	cmp	r3, #9
   d53fe:	bf94      	ite	ls
   d5400:	3330      	addls	r3, #48	; 0x30
   d5402:	3337      	addhi	r3, #55	; 0x37
   d5404:	b2db      	uxtb	r3, r3
   d5406:	4621      	mov	r1, r4
   d5408:	f804 3901 	strb.w	r3, [r4], #-1
   d540c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d540e:	2d00      	cmp	r5, #0
   d5410:	d1ee      	bne.n	d53f0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5412:	f7ff ffb5 	bl	d5380 <_ZN5Print5writeEPKc>
}
   d5416:	b00b      	add	sp, #44	; 0x2c
   d5418:	bd30      	pop	{r4, r5, pc}

000d541a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d541a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d541c:	b92a      	cbnz	r2, d542a <_ZN5Print5printEmi+0x10>
   d541e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5420:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5424:	689b      	ldr	r3, [r3, #8]
   d5426:	b2c9      	uxtb	r1, r1
   d5428:	4718      	bx	r3
  else return printNumber(n, base);
   d542a:	b2d2      	uxtb	r2, r2
}
   d542c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5430:	f7ff bfd3 	b.w	d53da <_ZN5Print11printNumberEmh>

000d5434 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5434:	f7ff bff1 	b.w	d541a <_ZN5Print5printEmi>

000d5438 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d543c:	4607      	mov	r7, r0
   d543e:	460e      	mov	r6, r1
  if (base == 0) {
   d5440:	4615      	mov	r5, r2
   d5442:	b92a      	cbnz	r2, d5450 <_ZN5Print5printEli+0x18>
    return write(n);
   d5444:	6803      	ldr	r3, [r0, #0]
   d5446:	b2c9      	uxtb	r1, r1
   d5448:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d544e:	4718      	bx	r3
  } else if (base == 10) {
   d5450:	2a0a      	cmp	r2, #10
   d5452:	d102      	bne.n	d545a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5454:	2900      	cmp	r1, #0
   d5456:	da01      	bge.n	d545c <_ZN5Print5printEli+0x24>
   d5458:	e004      	b.n	d5464 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d545a:	b2d2      	uxtb	r2, r2
  }
}
   d545c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5460:	f7ff bfbb 	b.w	d53da <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5464:	212d      	movs	r1, #45	; 0x2d
   d5466:	f7ff ff9f 	bl	d53a8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d546a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d546c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d546e:	4271      	negs	r1, r6
   d5470:	4638      	mov	r0, r7
   d5472:	f7ff ffb2 	bl	d53da <_ZN5Print11printNumberEmh>
   d5476:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d547c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d547c:	b538      	push	{r3, r4, r5, lr}
   d547e:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5480:	f7ff ffda 	bl	d5438 <_ZN5Print5printEli>
   d5484:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5486:	4628      	mov	r0, r5
   d5488:	f7ff ff91 	bl	d53ae <_ZN5Print7printlnEv>
  return n;
}
   d548c:	4420      	add	r0, r4
   d548e:	bd38      	pop	{r3, r4, r5, pc}

000d5490 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
   d5490:	b538      	push	{r3, r4, r5, lr}
   d5492:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d5494:	f7ff ffd0 	bl	d5438 <_ZN5Print5printEli>
   d5498:	4604      	mov	r4, r0
  n += println();
   d549a:	4628      	mov	r0, r5
   d549c:	f7ff ff87 	bl	d53ae <_ZN5Print7printlnEv>
  return n;
}
   d54a0:	4420      	add	r0, r4
   d54a2:	bd38      	pop	{r3, r4, r5, pc}

000d54a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d54a4:	4b01      	ldr	r3, [pc, #4]	; (d54ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d54a6:	4a02      	ldr	r2, [pc, #8]	; (d54b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d54a8:	601a      	str	r2, [r3, #0]
   d54aa:	4770      	bx	lr
   d54ac:	2003e3cc 	.word	0x2003e3cc
   d54b0:	000d69bf 	.word	0x000d69bf

000d54b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d54b4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d54b6:	2000      	movs	r0, #0
   d54b8:	f7ff fca8 	bl	d4e0c <spark_sync_time_pending>
   d54bc:	b128      	cbz	r0, d54ca <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d54be:	f7ff fc95 	bl	d4dec <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d54c2:	f080 0001 	eor.w	r0, r0, #1
   d54c6:	b2c0      	uxtb	r0, r0
   d54c8:	bd08      	pop	{r3, pc}
   d54ca:	2001      	movs	r0, #1
    }
   d54cc:	bd08      	pop	{r3, pc}

000d54ce <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d54ce:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d54d0:	2000      	movs	r0, #0
   d54d2:	f7ff fae5 	bl	d4aa0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d54d6:	4604      	mov	r4, r0
   d54d8:	b968      	cbnz	r0, d54f6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d54da:	f7ff fbe1 	bl	d4ca0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d54de:	2801      	cmp	r0, #1
   d54e0:	d10b      	bne.n	d54fa <_ZN9TimeClass7isValidEv+0x2c>
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff fbf4 	bl	d4cd0 <system_thread_get_state>
   d54e8:	b938      	cbnz	r0, d54fa <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d54ea:	f7ff ffe3 	bl	d54b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d54ee:	b930      	cbnz	r0, d54fe <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d54f0:	f7ff fc64 	bl	d4dbc <spark_process>
   d54f4:	e7f9      	b.n	d54ea <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d54f6:	2001      	movs	r0, #1
   d54f8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d54fa:	2000      	movs	r0, #0
   d54fc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d54fe:	f7ff ffd9 	bl	d54b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5502:	2000      	movs	r0, #0
   d5504:	f7ff facc 	bl	d4aa0 <HAL_RTC_Time_Is_Valid>
   d5508:	3000      	adds	r0, #0
   d550a:	bf18      	it	ne
   d550c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d550e:	bd10      	pop	{r4, pc}

000d5510 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5510:	b508      	push	{r3, lr}
    (void)isValid();
   d5512:	f7ff ffdc 	bl	d54ce <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d551a:	f7ff bab9 	b.w	d4a90 <HAL_RTC_Get_UnixTime>
	...

000d5520 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5520:	4b02      	ldr	r3, [pc, #8]	; (d552c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	4b02      	ldr	r3, [pc, #8]	; (d5530 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5526:	601a      	str	r2, [r3, #0]
   d5528:	4770      	bx	lr
   d552a:	bf00      	nop
   d552c:	2003de90 	.word	0x2003de90
   d5530:	2003e3d0 	.word	0x2003e3d0

000d5534 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5534:	2100      	movs	r1, #0
   d5536:	f7ff bbc3 	b.w	d4cc0 <system_delay_ms>

000d553a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d553a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d553c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d553e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5540:	b113      	cbz	r3, d5548 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5542:	2203      	movs	r2, #3
   d5544:	4601      	mov	r1, r0
   d5546:	4798      	blx	r3
    }
   d5548:	4620      	mov	r0, r4
   d554a:	bd10      	pop	{r4, pc}

000d554c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d554c:	b510      	push	{r4, lr}
   d554e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5550:	f7ff fff3 	bl	d553a <_ZNSt14_Function_baseD1Ev>
   d5554:	4620      	mov	r0, r4
   d5556:	bd10      	pop	{r4, pc}

000d5558 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5558:	4803      	ldr	r0, [pc, #12]	; (d5568 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d555a:	4a04      	ldr	r2, [pc, #16]	; (d556c <_GLOBAL__sub_I_RGB+0x14>)
   d555c:	4904      	ldr	r1, [pc, #16]	; (d5570 <_GLOBAL__sub_I_RGB+0x18>)
   d555e:	2300      	movs	r3, #0
   d5560:	6083      	str	r3, [r0, #8]
   d5562:	f000 be87 	b.w	d6274 <__aeabi_atexit>
   d5566:	bf00      	nop
   d5568:	2003e3d4 	.word	0x2003e3d4
   d556c:	2003defc 	.word	0x2003defc
   d5570:	000d554d 	.word	0x000d554d

000d5574 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5574:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5576:	4b0c      	ldr	r3, [pc, #48]	; (d55a8 <serialEventRun+0x34>)
   d5578:	b133      	cbz	r3, d5588 <serialEventRun+0x14>
   d557a:	f000 f94f 	bl	d581c <_Z16_fetch_usbserialv>
   d557e:	6803      	ldr	r3, [r0, #0]
   d5580:	691b      	ldr	r3, [r3, #16]
   d5582:	4798      	blx	r3
   d5584:	2800      	cmp	r0, #0
   d5586:	dc09      	bgt.n	d559c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5588:	4b08      	ldr	r3, [pc, #32]	; (d55ac <serialEventRun+0x38>)
   d558a:	b163      	cbz	r3, d55a6 <serialEventRun+0x32>
   d558c:	f000 fa0c 	bl	d59a8 <_Z22__fetch_global_Serial1v>
   d5590:	6803      	ldr	r3, [r0, #0]
   d5592:	691b      	ldr	r3, [r3, #16]
   d5594:	4798      	blx	r3
   d5596:	2800      	cmp	r0, #0
   d5598:	dc03      	bgt.n	d55a2 <serialEventRun+0x2e>
   d559a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d559c:	f3af 8000 	nop.w
   d55a0:	e7f2      	b.n	d5588 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d55a2:	f3af 8000 	nop.w
   d55a6:	bd08      	pop	{r3, pc}
	...

000d55b0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d55b0:	b508      	push	{r3, lr}
	serialEventRun();
   d55b2:	f7ff ffdf 	bl	d5574 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55b6:	f7ff fa63 	bl	d4a80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55ba:	4b01      	ldr	r3, [pc, #4]	; (d55c0 <_post_loop+0x10>)
   d55bc:	6018      	str	r0, [r3, #0]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	2003e74c 	.word	0x2003e74c

000d55c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55c6:	2300      	movs	r3, #0
   d55c8:	9300      	str	r3, [sp, #0]
   d55ca:	461a      	mov	r2, r3
   d55cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55d0:	f7ff fb90 	bl	d4cf4 <system_ctrl_set_result>
}
   d55d4:	b003      	add	sp, #12
   d55d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55dc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55de:	8843      	ldrh	r3, [r0, #2]
   d55e0:	2b0a      	cmp	r3, #10
   d55e2:	d008      	beq.n	d55f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d55e4:	2b50      	cmp	r3, #80	; 0x50
   d55e6:	d109      	bne.n	d55fc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d55e8:	4b09      	ldr	r3, [pc, #36]	; (d5610 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d55ea:	681b      	ldr	r3, [r3, #0]
   d55ec:	b13b      	cbz	r3, d55fe <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d55ee:	b003      	add	sp, #12
   d55f0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d55f4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d55f6:	f7ff ffe5 	bl	d55c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d55fa:	e006      	b.n	d560a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55fc:	2300      	movs	r3, #0
   d55fe:	9300      	str	r3, [sp, #0]
   d5600:	461a      	mov	r2, r3
   d5602:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5606:	f7ff fb75 	bl	d4cf4 <system_ctrl_set_result>
        break;
    }
}
   d560a:	b003      	add	sp, #12
   d560c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5610:	2003e3e4 	.word	0x2003e3e4

000d5614 <module_user_init_hook>:

void module_user_init_hook()
{
   d5614:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5616:	f7ff fa2b 	bl	d4a70 <HAL_RNG_GetRandomNumber>
   d561a:	4604      	mov	r4, r0
    srand(seed);
   d561c:	f000 ffb4 	bl	d6588 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5620:	4b07      	ldr	r3, [pc, #28]	; (d5640 <module_user_init_hook+0x2c>)
   d5622:	b113      	cbz	r3, d562a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5624:	4620      	mov	r0, r4
   d5626:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d562a:	2100      	movs	r1, #0
   d562c:	4804      	ldr	r0, [pc, #16]	; (d5640 <module_user_init_hook+0x2c>)
   d562e:	f7ff fbf5 	bl	d4e1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5632:	2100      	movs	r1, #0
   d5634:	4803      	ldr	r0, [pc, #12]	; (d5644 <module_user_init_hook+0x30>)
}
   d5636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d563a:	f7ff bb51 	b.w	d4ce0 <system_ctrl_set_app_request_handler>
   d563e:	bf00      	nop
   d5640:	00000000 	.word	0x00000000
   d5644:	000d55dd 	.word	0x000d55dd

000d5648 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5648:	4770      	bx	lr

000d564a <_ZN9IPAddressD0Ev>:
   d564a:	b510      	push	{r4, lr}
   d564c:	2118      	movs	r1, #24
   d564e:	4604      	mov	r4, r0
   d5650:	f000 fe15 	bl	d627e <_ZdlPvj>
   d5654:	4620      	mov	r0, r4
   d5656:	bd10      	pop	{r4, pc}

000d5658 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5658:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d565a:	7d03      	ldrb	r3, [r0, #20]
   d565c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d565e:	b08d      	sub	sp, #52	; 0x34
   d5660:	460e      	mov	r6, r1
   d5662:	f100 0704 	add.w	r7, r0, #4
   d5666:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d566a:	d002      	beq.n	d5672 <_ZNK9IPAddress7printToER5Print+0x1a>
   d566c:	f100 0508 	add.w	r5, r0, #8
   d5670:	e018      	b.n	d56a4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5672:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5674:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5676:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d567a:	232f      	movs	r3, #47	; 0x2f
   d567c:	462a      	mov	r2, r5
   d567e:	200a      	movs	r0, #10
   d5680:	f7ff fa4e 	bl	d4b20 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5684:	4628      	mov	r0, r5
   d5686:	f000 ffb9 	bl	d65fc <strlen>
   d568a:	6833      	ldr	r3, [r6, #0]
   d568c:	4602      	mov	r2, r0
   d568e:	68db      	ldr	r3, [r3, #12]
   d5690:	4629      	mov	r1, r5
   d5692:	4630      	mov	r0, r6
   d5694:	4798      	blx	r3
   d5696:	e00f      	b.n	d56b8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5698:	b124      	cbz	r4, d56a4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d569a:	212e      	movs	r1, #46	; 0x2e
   d569c:	4630      	mov	r0, r6
   d569e:	f7ff fe83 	bl	d53a8 <_ZN5Print5printEc>
   d56a2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d56a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56a8:	220a      	movs	r2, #10
   d56aa:	4630      	mov	r0, r6
   d56ac:	f7ff fec2 	bl	d5434 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56b0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56b2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56b4:	d1f0      	bne.n	d5698 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56b6:	4620      	mov	r0, r4
    }
    return n;
}
   d56b8:	b00d      	add	sp, #52	; 0x34
   d56ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56bc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d56bc:	b510      	push	{r4, lr}
   d56be:	4b05      	ldr	r3, [pc, #20]	; (d56d4 <_ZN9IPAddressC1Ev+0x18>)
   d56c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d56c2:	2211      	movs	r2, #17
   d56c4:	f840 3b04 	str.w	r3, [r0], #4
   d56c8:	2100      	movs	r1, #0
   d56ca:	f000 ff54 	bl	d6576 <memset>
{
    clear();
}
   d56ce:	4620      	mov	r0, r4
   d56d0:	bd10      	pop	{r4, pc}
   d56d2:	bf00      	nop
   d56d4:	000d6a58 	.word	0x000d6a58

000d56d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56d8:	4603      	mov	r3, r0
   d56da:	4a07      	ldr	r2, [pc, #28]	; (d56f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56dc:	b510      	push	{r4, lr}
   d56de:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56e2:	f101 0210 	add.w	r2, r1, #16
   d56e6:	f851 4b04 	ldr.w	r4, [r1], #4
   d56ea:	f843 4b04 	str.w	r4, [r3], #4
   d56ee:	4291      	cmp	r1, r2
   d56f0:	d1f9      	bne.n	d56e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56f2:	780a      	ldrb	r2, [r1, #0]
   d56f4:	701a      	strb	r2, [r3, #0]
}
   d56f6:	bd10      	pop	{r4, pc}
   d56f8:	000d6a58 	.word	0x000d6a58

000d56fc <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d56fc:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d56fe:	2b04      	cmp	r3, #4
   d5700:	d101      	bne.n	d5706 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5702:	6840      	ldr	r0, [r0, #4]
   d5704:	e008      	b.n	d5718 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5706:	2b06      	cmp	r3, #6
   d5708:	d10a      	bne.n	d5720 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d570a:	6843      	ldr	r3, [r0, #4]
   d570c:	b953      	cbnz	r3, d5724 <_ZNK9IPAddresscvbEv+0x28>
   d570e:	6883      	ldr	r3, [r0, #8]
   d5710:	b943      	cbnz	r3, d5724 <_ZNK9IPAddresscvbEv+0x28>
   d5712:	68c3      	ldr	r3, [r0, #12]
   d5714:	b933      	cbnz	r3, d5724 <_ZNK9IPAddresscvbEv+0x28>
   d5716:	6900      	ldr	r0, [r0, #16]
   d5718:	3000      	adds	r0, #0
   d571a:	bf18      	it	ne
   d571c:	2001      	movne	r0, #1
   d571e:	4770      	bx	lr
    } else {
        return false;
   d5720:	2000      	movs	r0, #0
   d5722:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5724:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5726:	4770      	bx	lr

000d5728 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5728:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d572a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d572e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5732:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5736:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d573a:	2304      	movs	r3, #4
   d573c:	6041      	str	r1, [r0, #4]
   d573e:	7503      	strb	r3, [r0, #20]
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5742:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5744:	780d      	ldrb	r5, [r1, #0]
   d5746:	788b      	ldrb	r3, [r1, #2]
   d5748:	784a      	ldrb	r2, [r1, #1]
   d574a:	78c9      	ldrb	r1, [r1, #3]
   d574c:	9100      	str	r1, [sp, #0]
   d574e:	4629      	mov	r1, r5
   d5750:	f7ff ffea 	bl	d5728 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5754:	b003      	add	sp, #12
   d5756:	bd30      	pop	{r4, r5, pc}

000d5758 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5758:	7441      	strb	r1, [r0, #17]
   d575a:	4770      	bx	lr

000d575c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d575c:	4770      	bx	lr

000d575e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d575e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5760:	2100      	movs	r1, #0
   d5762:	7c00      	ldrb	r0, [r0, #16]
   d5764:	f7ff fa7c 	bl	d4c60 <HAL_USB_USART_Receive_Data>
}
   d5768:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d576c:	bf28      	it	cs
   d576e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5772:	bd08      	pop	{r3, pc}

000d5774 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5774:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5776:	2101      	movs	r1, #1
   d5778:	7c00      	ldrb	r0, [r0, #16]
   d577a:	f7ff fa71 	bl	d4c60 <HAL_USB_USART_Receive_Data>
}
   d577e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5782:	bf28      	it	cs
   d5784:	f04f 30ff 	movcs.w	r0, #4294967295
   d5788:	bd08      	pop	{r3, pc}

000d578a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d578a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d578c:	7c00      	ldrb	r0, [r0, #16]
   d578e:	f7ff fa5f 	bl	d4c50 <HAL_USB_USART_Available_Data_For_Write>
}
   d5792:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5796:	bd08      	pop	{r3, pc}

000d5798 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5798:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d579a:	7c00      	ldrb	r0, [r0, #16]
   d579c:	f7ff fa50 	bl	d4c40 <HAL_USB_USART_Available_Data>
}
   d57a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57a4:	bd08      	pop	{r3, pc}

000d57a6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d57a6:	7c00      	ldrb	r0, [r0, #16]
   d57a8:	f7ff ba6a 	b.w	d4c80 <HAL_USB_USART_Flush_Data>

000d57ac <_ZN9USBSerialD0Ev>:
   d57ac:	b510      	push	{r4, lr}
   d57ae:	2114      	movs	r1, #20
   d57b0:	4604      	mov	r4, r0
   d57b2:	f000 fd64 	bl	d627e <_ZdlPvj>
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57ba:	b538      	push	{r3, r4, r5, lr}
   d57bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57be:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57c2:	f7ff fa45 	bl	d4c50 <HAL_USB_USART_Available_Data_For_Write>
   d57c6:	2800      	cmp	r0, #0
   d57c8:	dc01      	bgt.n	d57ce <_ZN9USBSerial5writeEh+0x14>
   d57ca:	7c60      	ldrb	r0, [r4, #17]
   d57cc:	b128      	cbz	r0, d57da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d57ce:	4629      	mov	r1, r5
   d57d0:	7c20      	ldrb	r0, [r4, #16]
   d57d2:	f7ff fa4d 	bl	d4c70 <HAL_USB_USART_Send_Data>
   d57d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d57da:	bd38      	pop	{r3, r4, r5, pc}

000d57dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57dc:	b510      	push	{r4, lr}
   d57de:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57e0:	2300      	movs	r3, #0
   d57e2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57e8:	60a3      	str	r3, [r4, #8]
   d57ea:	4b05      	ldr	r3, [pc, #20]	; (d5800 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d57ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d57ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d57f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d57f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d57f6:	4611      	mov	r1, r2
   d57f8:	f7ff fa12 	bl	d4c20 <HAL_USB_USART_Init>
}
   d57fc:	4620      	mov	r0, r4
   d57fe:	bd10      	pop	{r4, pc}
   d5800:	000d6a6c 	.word	0x000d6a6c

000d5804 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5804:	2200      	movs	r2, #0
   d5806:	7c00      	ldrb	r0, [r0, #16]
   d5808:	f7ff ba12 	b.w	d4c30 <HAL_USB_USART_Begin>

000d580c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d580c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d580e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5810:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5812:	2100      	movs	r1, #0
   d5814:	f000 feaf 	bl	d6576 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5818:	4620      	mov	r0, r4
   d581a:	bd10      	pop	{r4, pc}

000d581c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d581c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d581e:	4d0e      	ldr	r5, [pc, #56]	; (d5858 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5820:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5822:	a801      	add	r0, sp, #4
   d5824:	f7ff fff2 	bl	d580c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5828:	6829      	ldr	r1, [r5, #0]
   d582a:	f011 0401 	ands.w	r4, r1, #1
   d582e:	d110      	bne.n	d5852 <_Z16_fetch_usbserialv+0x36>
   d5830:	4628      	mov	r0, r5
   d5832:	f7fe fc36 	bl	d40a2 <__cxa_guard_acquire>
   d5836:	b160      	cbz	r0, d5852 <_Z16_fetch_usbserialv+0x36>
   d5838:	aa01      	add	r2, sp, #4
   d583a:	4621      	mov	r1, r4
   d583c:	4807      	ldr	r0, [pc, #28]	; (d585c <_Z16_fetch_usbserialv+0x40>)
   d583e:	f7ff ffcd 	bl	d57dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5842:	4628      	mov	r0, r5
   d5844:	f7fe fc32 	bl	d40ac <__cxa_guard_release>
   d5848:	4a05      	ldr	r2, [pc, #20]	; (d5860 <_Z16_fetch_usbserialv+0x44>)
   d584a:	4906      	ldr	r1, [pc, #24]	; (d5864 <_Z16_fetch_usbserialv+0x48>)
   d584c:	4803      	ldr	r0, [pc, #12]	; (d585c <_Z16_fetch_usbserialv+0x40>)
   d584e:	f000 fd11 	bl	d6274 <__aeabi_atexit>
	return _usbserial;
}
   d5852:	4802      	ldr	r0, [pc, #8]	; (d585c <_Z16_fetch_usbserialv+0x40>)
   d5854:	b007      	add	sp, #28
   d5856:	bd30      	pop	{r4, r5, pc}
   d5858:	2003e3e8 	.word	0x2003e3e8
   d585c:	2003e3ec 	.word	0x2003e3ec
   d5860:	2003defc 	.word	0x2003defc
   d5864:	000d575d 	.word	0x000d575d

000d5868 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5868:	2200      	movs	r2, #0
   d586a:	4611      	mov	r1, r2
   d586c:	6840      	ldr	r0, [r0, #4]
   d586e:	f7ff ba8d 	b.w	d4d8c <network_listening>

000d5872 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5872:	2200      	movs	r2, #0
   d5874:	4611      	mov	r1, r2
   d5876:	6840      	ldr	r0, [r0, #4]
   d5878:	f7ff ba98 	b.w	d4dac <network_get_listen_timeout>

000d587c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d587c:	2200      	movs	r2, #0
   d587e:	6840      	ldr	r0, [r0, #4]
   d5880:	f7ff ba8c 	b.w	d4d9c <network_set_listen_timeout>

000d5884 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5884:	2200      	movs	r2, #0
   d5886:	f081 0101 	eor.w	r1, r1, #1
   d588a:	6840      	ldr	r0, [r0, #4]
   d588c:	f7ff ba76 	b.w	d4d7c <network_listen>

000d5890 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5890:	2300      	movs	r3, #0
   d5892:	461a      	mov	r2, r3
   d5894:	4619      	mov	r1, r3
   d5896:	6840      	ldr	r0, [r0, #4]
   d5898:	f7ff ba68 	b.w	d4d6c <network_off>

000d589c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d589c:	2300      	movs	r3, #0
   d589e:	461a      	mov	r2, r3
   d58a0:	4619      	mov	r1, r3
   d58a2:	6840      	ldr	r0, [r0, #4]
   d58a4:	f7ff ba5a 	b.w	d4d5c <network_on>

000d58a8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58a8:	2200      	movs	r2, #0
   d58aa:	4611      	mov	r1, r2
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f7ff ba3d 	b.w	d4d2c <network_connecting>

000d58b2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58b2:	2200      	movs	r2, #0
   d58b4:	2102      	movs	r1, #2
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7ff ba40 	b.w	d4d3c <network_disconnect>

000d58bc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58bc:	2300      	movs	r3, #0
   d58be:	461a      	mov	r2, r3
   d58c0:	6840      	ldr	r0, [r0, #4]
   d58c2:	f7ff ba2b 	b.w	d4d1c <network_connect>
	...

000d58c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d58c8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d58ca:	4c08      	ldr	r4, [pc, #32]	; (d58ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d58cc:	2528      	movs	r5, #40	; 0x28
   d58ce:	462a      	mov	r2, r5
   d58d0:	2100      	movs	r1, #0
   d58d2:	4620      	mov	r0, r4
   d58d4:	f000 fe4f 	bl	d6576 <memset>
        cid = -1;
   d58d8:	f04f 33ff 	mov.w	r3, #4294967295
   d58dc:	6063      	str	r3, [r4, #4]
   d58de:	4b04      	ldr	r3, [pc, #16]	; (d58f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d58e0:	8025      	strh	r5, [r4, #0]
   d58e2:	2204      	movs	r2, #4
   d58e4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d58e6:	4a03      	ldr	r2, [pc, #12]	; (d58f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d58e8:	601a      	str	r2, [r3, #0]
   d58ea:	bd38      	pop	{r3, r4, r5, pc}
   d58ec:	2003e408 	.word	0x2003e408
   d58f0:	2003e400 	.word	0x2003e400
   d58f4:	000d6a9c 	.word	0x000d6a9c

000d58f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d58f8:	4770      	bx	lr

000d58fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58fa:	7441      	strb	r1, [r0, #17]
   d58fc:	4770      	bx	lr

000d58fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d58fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5900:	7c00      	ldrb	r0, [r0, #16]
   d5902:	f7ff f955 	bl	d4bb0 <HAL_USART_Available_Data_For_Write>
}
   d5906:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d590a:	bd08      	pop	{r3, pc}

000d590c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d590c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d590e:	7c00      	ldrb	r0, [r0, #16]
   d5910:	f7ff f92e 	bl	d4b70 <HAL_USART_Available_Data>
}
   d5914:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5918:	bd08      	pop	{r3, pc}

000d591a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d591a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d591c:	7c00      	ldrb	r0, [r0, #16]
   d591e:	f7ff f937 	bl	d4b90 <HAL_USART_Peek_Data>
}
   d5922:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5926:	bf28      	it	cs
   d5928:	f04f 30ff 	movcs.w	r0, #4294967295
   d592c:	bd08      	pop	{r3, pc}

000d592e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d592e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5930:	7c00      	ldrb	r0, [r0, #16]
   d5932:	f7ff f925 	bl	d4b80 <HAL_USART_Read_Data>
}
   d5936:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d593a:	bf28      	it	cs
   d593c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5940:	bd08      	pop	{r3, pc}

000d5942 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5942:	7c00      	ldrb	r0, [r0, #16]
   d5944:	f7ff b92c 	b.w	d4ba0 <HAL_USART_Flush_Data>

000d5948 <_ZN11USARTSerialD0Ev>:
   d5948:	b510      	push	{r4, lr}
   d594a:	2114      	movs	r1, #20
   d594c:	4604      	mov	r4, r0
   d594e:	f000 fc96 	bl	d627e <_ZdlPvj>
   d5952:	4620      	mov	r0, r4
   d5954:	bd10      	pop	{r4, pc}

000d5956 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5956:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5958:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d595a:	4604      	mov	r4, r0
   d595c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d595e:	b925      	cbnz	r5, d596a <_ZN11USARTSerial5writeEh+0x14>
   d5960:	7c00      	ldrb	r0, [r0, #16]
   d5962:	f7ff f925 	bl	d4bb0 <HAL_USART_Available_Data_For_Write>
   d5966:	2800      	cmp	r0, #0
   d5968:	dd05      	ble.n	d5976 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d596a:	4631      	mov	r1, r6
   d596c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d596e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5972:	f7ff b8f5 	b.w	d4b60 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5976:	4628      	mov	r0, r5
   d5978:	bd70      	pop	{r4, r5, r6, pc}
	...

000d597c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d597c:	b510      	push	{r4, lr}
   d597e:	4604      	mov	r4, r0
   d5980:	4608      	mov	r0, r1
   d5982:	4611      	mov	r1, r2
   d5984:	2200      	movs	r2, #0
   d5986:	6062      	str	r2, [r4, #4]
   d5988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d598c:	60a2      	str	r2, [r4, #8]
   d598e:	4a05      	ldr	r2, [pc, #20]	; (d59a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5990:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5992:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5994:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5996:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5998:	461a      	mov	r2, r3
   d599a:	f7ff f8d9 	bl	d4b50 <HAL_USART_Init>
}
   d599e:	4620      	mov	r0, r4
   d59a0:	bd10      	pop	{r4, pc}
   d59a2:	bf00      	nop
   d59a4:	000d6ad0 	.word	0x000d6ad0

000d59a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d59a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d59aa:	4d0c      	ldr	r5, [pc, #48]	; (d59dc <_Z22__fetch_global_Serial1v+0x34>)
   d59ac:	6829      	ldr	r1, [r5, #0]
   d59ae:	f011 0401 	ands.w	r4, r1, #1
   d59b2:	d111      	bne.n	d59d8 <_Z22__fetch_global_Serial1v+0x30>
   d59b4:	4628      	mov	r0, r5
   d59b6:	f7fe fb74 	bl	d40a2 <__cxa_guard_acquire>
   d59ba:	b168      	cbz	r0, d59d8 <_Z22__fetch_global_Serial1v+0x30>
   d59bc:	4a08      	ldr	r2, [pc, #32]	; (d59e0 <_Z22__fetch_global_Serial1v+0x38>)
   d59be:	4b09      	ldr	r3, [pc, #36]	; (d59e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d59c0:	4809      	ldr	r0, [pc, #36]	; (d59e8 <_Z22__fetch_global_Serial1v+0x40>)
   d59c2:	4621      	mov	r1, r4
   d59c4:	f7ff ffda 	bl	d597c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d59c8:	4628      	mov	r0, r5
   d59ca:	f7fe fb6f 	bl	d40ac <__cxa_guard_release>
   d59ce:	4a07      	ldr	r2, [pc, #28]	; (d59ec <_Z22__fetch_global_Serial1v+0x44>)
   d59d0:	4907      	ldr	r1, [pc, #28]	; (d59f0 <_Z22__fetch_global_Serial1v+0x48>)
   d59d2:	4805      	ldr	r0, [pc, #20]	; (d59e8 <_Z22__fetch_global_Serial1v+0x40>)
   d59d4:	f000 fc4e 	bl	d6274 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d59d8:	4803      	ldr	r0, [pc, #12]	; (d59e8 <_Z22__fetch_global_Serial1v+0x40>)
   d59da:	bd38      	pop	{r3, r4, r5, pc}
   d59dc:	2003e4c8 	.word	0x2003e4c8
   d59e0:	2003e4cc 	.word	0x2003e4cc
   d59e4:	2003e444 	.word	0x2003e444
   d59e8:	2003e430 	.word	0x2003e430
   d59ec:	2003defc 	.word	0x2003defc
   d59f0:	000d58f9 	.word	0x000d58f9

000d59f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59f4:	2200      	movs	r2, #0
   d59f6:	4611      	mov	r1, r2
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	f7ff b9c7 	b.w	d4d8c <network_listening>

000d59fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59fe:	2200      	movs	r2, #0
   d5a00:	4611      	mov	r1, r2
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	f7ff b9d2 	b.w	d4dac <network_get_listen_timeout>

000d5a08 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a08:	2200      	movs	r2, #0
   d5a0a:	6840      	ldr	r0, [r0, #4]
   d5a0c:	f7ff b9c6 	b.w	d4d9c <network_set_listen_timeout>

000d5a10 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a10:	2200      	movs	r2, #0
   d5a12:	f081 0101 	eor.w	r1, r1, #1
   d5a16:	6840      	ldr	r0, [r0, #4]
   d5a18:	f7ff b9b0 	b.w	d4d7c <network_listen>

000d5a1c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5a1c:	2300      	movs	r3, #0
   d5a1e:	461a      	mov	r2, r3
   d5a20:	2101      	movs	r1, #1
   d5a22:	6840      	ldr	r0, [r0, #4]
   d5a24:	f7ff b9a2 	b.w	d4d6c <network_off>

000d5a28 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a28:	2300      	movs	r3, #0
   d5a2a:	461a      	mov	r2, r3
   d5a2c:	4619      	mov	r1, r3
   d5a2e:	6840      	ldr	r0, [r0, #4]
   d5a30:	f7ff b994 	b.w	d4d5c <network_on>

000d5a34 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a34:	2200      	movs	r2, #0
   d5a36:	4611      	mov	r1, r2
   d5a38:	6840      	ldr	r0, [r0, #4]
   d5a3a:	f7ff b987 	b.w	d4d4c <network_ready>

000d5a3e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a3e:	2200      	movs	r2, #0
   d5a40:	4611      	mov	r1, r2
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	f7ff b972 	b.w	d4d2c <network_connecting>

000d5a48 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a48:	2200      	movs	r2, #0
   d5a4a:	2102      	movs	r1, #2
   d5a4c:	6840      	ldr	r0, [r0, #4]
   d5a4e:	f7ff b975 	b.w	d4d3c <network_disconnect>

000d5a52 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a52:	2300      	movs	r3, #0
   d5a54:	461a      	mov	r2, r3
   d5a56:	6840      	ldr	r0, [r0, #4]
   d5a58:	f7ff b960 	b.w	d4d1c <network_connect>

000d5a5c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5a5c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a5e:	4605      	mov	r5, r0
   d5a60:	b188      	cbz	r0, d5a86 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a62:	6804      	ldr	r4, [r0, #0]
   d5a64:	b14c      	cbz	r4, d5a7a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5a66:	68a3      	ldr	r3, [r4, #8]
   d5a68:	b11b      	cbz	r3, d5a72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a6a:	2203      	movs	r2, #3
   d5a6c:	4621      	mov	r1, r4
   d5a6e:	4620      	mov	r0, r4
   d5a70:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a72:	2110      	movs	r1, #16
   d5a74:	4620      	mov	r0, r4
   d5a76:	f000 fc02 	bl	d627e <_ZdlPvj>
   d5a7a:	4628      	mov	r0, r5
   d5a7c:	2114      	movs	r1, #20
      }
   d5a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a82:	f000 bbfc 	b.w	d627e <_ZdlPvj>
   d5a86:	bd38      	pop	{r3, r4, r5, pc}

000d5a88 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5a88:	b110      	cbz	r0, d5a90 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5a8a:	6803      	ldr	r3, [r0, #0]
   d5a8c:	685b      	ldr	r3, [r3, #4]
   d5a8e:	4718      	bx	r3
   d5a90:	4770      	bx	lr

000d5a92 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5a92:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a94:	6803      	ldr	r3, [r0, #0]
   d5a96:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5a98:	b1bb      	cbz	r3, d5aca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5a9a:	6858      	ldr	r0, [r3, #4]
   d5a9c:	f7ff f818 	bl	d4ad0 <os_thread_is_current>
   d5aa0:	b978      	cbnz	r0, d5ac2 <_ZN6ThreadD1Ev+0x30>
   d5aa2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5aa4:	7c5a      	ldrb	r2, [r3, #17]
   d5aa6:	b912      	cbnz	r2, d5aae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5aa8:	6858      	ldr	r0, [r3, #4]
   d5aaa:	f7ff f819 	bl	d4ae0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5aae:	6823      	ldr	r3, [r4, #0]
   d5ab0:	6858      	ldr	r0, [r3, #4]
   d5ab2:	f7ff f81d 	bl	d4af0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ab6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ab8:	2300      	movs	r3, #0
   d5aba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5abc:	b128      	cbz	r0, d5aca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5abe:	f7ff ffcd 	bl	d5a5c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ac2:	6820      	ldr	r0, [r4, #0]
   d5ac4:	b108      	cbz	r0, d5aca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5ac6:	f7ff ffc9 	bl	d5a5c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5aca:	4620      	mov	r0, r4
   d5acc:	bd10      	pop	{r4, pc}
	...

000d5ad0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ad0:	b538      	push	{r3, r4, r5, lr}
   d5ad2:	4b0c      	ldr	r3, [pc, #48]	; (d5b04 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5ad4:	6003      	str	r3, [r0, #0]
   d5ad6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ad8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5adc:	b108      	cbz	r0, d5ae2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5ade:	f7fe fade 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ae2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5ae6:	b135      	cbz	r5, d5af6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ae8:	4628      	mov	r0, r5
   d5aea:	f7ff ffd2 	bl	d5a92 <_ZN6ThreadD1Ev>
   d5aee:	2104      	movs	r1, #4
   d5af0:	4628      	mov	r0, r5
   d5af2:	f000 fbc4 	bl	d627e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5af6:	68a0      	ldr	r0, [r4, #8]
   d5af8:	b108      	cbz	r0, d5afe <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5afa:	f7ff ffc5 	bl	d5a88 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5afe:	4620      	mov	r0, r4
   d5b00:	bd38      	pop	{r3, r4, r5, pc}
   d5b02:	bf00      	nop
   d5b04:	000d6b00 	.word	0x000d6b00

000d5b08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b08:	b538      	push	{r3, r4, r5, lr}
   d5b0a:	4c0e      	ldr	r4, [pc, #56]	; (d5b44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5b0c:	4b0e      	ldr	r3, [pc, #56]	; (d5b48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5b0e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b10:	2500      	movs	r5, #0
   d5b12:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b14:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b18:	6063      	str	r3, [r4, #4]
   d5b1a:	60a5      	str	r5, [r4, #8]
   d5b1c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b20:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b24:	f7fe fff4 	bl	d4b10 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b28:	4b08      	ldr	r3, [pc, #32]	; (d5b4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5b2a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b2e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5b32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b34:	4620      	mov	r0, r4
   d5b36:	4a06      	ldr	r2, [pc, #24]	; (d5b50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5b38:	4906      	ldr	r1, [pc, #24]	; (d5b54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5b3e:	f000 bb99 	b.w	d6274 <__aeabi_atexit>
   d5b42:	bf00      	nop
   d5b44:	2003e550 	.word	0x2003e550
   d5b48:	000d6bb4 	.word	0x000d6bb4
   d5b4c:	000d6b00 	.word	0x000d6b00
   d5b50:	2003defc 	.word	0x2003defc
   d5b54:	000d5ad1 	.word	0x000d5ad1

000d5b58 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b5a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b5c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5b5e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b62:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5b64:	2201      	movs	r2, #1
   d5b66:	f04f 33ff 	mov.w	r3, #4294967295
   d5b6a:	4621      	mov	r1, r4
   d5b6c:	47a8      	blx	r5
}
   d5b6e:	b003      	add	sp, #12
   d5b70:	bd30      	pop	{r4, r5, pc}

000d5b72 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5b72:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5b74:	6803      	ldr	r3, [r0, #0]
   d5b76:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5b78:	f04f 33ff 	mov.w	r3, #4294967295
   d5b7c:	46a4      	mov	ip, r4
}
   d5b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5b82:	4760      	bx	ip

000d5b84 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b86:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5b88:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5b8a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5b8e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5b90:	4621      	mov	r1, r4
   d5b92:	4613      	mov	r3, r2
   d5b94:	2201      	movs	r2, #1
   d5b96:	47a8      	blx	r5
}
   d5b98:	b003      	add	sp, #12
   d5b9a:	bd30      	pop	{r4, r5, pc}

000d5b9c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5b9e:	b538      	push	{r3, r4, r5, lr}
   d5ba0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5ba2:	681a      	ldr	r2, [r3, #0]
   d5ba4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5ba6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5ba8:	da05      	bge.n	d5bb6 <_ZN9TCPClient9connectedEv+0x18>
   d5baa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5bae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5bb2:	429a      	cmp	r2, r3
   d5bb4:	d001      	beq.n	d5bba <_ZN9TCPClient9connectedEv+0x1c>
   d5bb6:	2501      	movs	r5, #1
   d5bb8:	e00b      	b.n	d5bd2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5bba:	6803      	ldr	r3, [r0, #0]
   d5bbc:	691b      	ldr	r3, [r3, #16]
   d5bbe:	4798      	blx	r3
   d5bc0:	2800      	cmp	r0, #0
   d5bc2:	bf14      	ite	ne
   d5bc4:	2501      	movne	r5, #1
   d5bc6:	2500      	moveq	r5, #0
        if (!rv) {
   d5bc8:	d103      	bne.n	d5bd2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5bca:	6823      	ldr	r3, [r4, #0]
   d5bcc:	4620      	mov	r0, r4
   d5bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bd0:	4798      	blx	r3
        }
    }
    return rv;
}
   d5bd2:	4628      	mov	r0, r5
   d5bd4:	bd38      	pop	{r3, r4, r5, pc}

000d5bd6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5bd6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5bd8:	6818      	ldr	r0, [r3, #0]
}
   d5bda:	43c0      	mvns	r0, r0
   d5bdc:	0fc0      	lsrs	r0, r0, #31
   d5bde:	4770      	bx	lr

000d5be0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5be0:	4770      	bx	lr

000d5be2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5be2:	2000      	movs	r0, #0
   d5be4:	4770      	bx	lr

000d5be6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5be6:	b510      	push	{r4, lr}
   d5be8:	2114      	movs	r1, #20
   d5bea:	4604      	mov	r4, r0
   d5bec:	f000 fb47 	bl	d627e <_ZdlPvj>
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5bf4:	f7fe ba51 	b.w	d409a <_ZdlPv>

000d5bf8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5bf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5bfa:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5bfc:	2200      	movs	r2, #0
   d5bfe:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5c00:	9202      	str	r2, [sp, #8]
   d5c02:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c04:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5c06:	4604      	mov	r4, r0
   d5c08:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c0a:	d008      	beq.n	d5c1e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c10:	fbb3 f1f2 	udiv	r1, r3, r2
   d5c14:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5c16:	fb02 3111 	mls	r1, r2, r1, r3
   d5c1a:	434a      	muls	r2, r1
   d5c1c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5c1e:	6960      	ldr	r0, [r4, #20]
   d5c20:	2308      	movs	r3, #8
   d5c22:	9300      	str	r3, [sp, #0]
   d5c24:	f241 0205 	movw	r2, #4101	; 0x1005
   d5c28:	446b      	add	r3, sp
   d5c2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c2e:	6800      	ldr	r0, [r0, #0]
   d5c30:	f7fe ffc6 	bl	d4bc0 <sock_setsockopt>
    if (ret < 0) {
   d5c34:	2800      	cmp	r0, #0
   d5c36:	db08      	blt.n	d5c4a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5c38:	6960      	ldr	r0, [r4, #20]
   d5c3a:	2300      	movs	r3, #0
   d5c3c:	4632      	mov	r2, r6
   d5c3e:	4629      	mov	r1, r5
   d5c40:	6800      	ldr	r0, [r0, #0]
   d5c42:	f7fe ffdd 	bl	d4c00 <sock_send>
    if (ret < 0) {
   d5c46:	2800      	cmp	r0, #0
   d5c48:	da04      	bge.n	d5c54 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d5c4a:	f7ff f907 	bl	d4e5c <__errno>
   d5c4e:	6803      	ldr	r3, [r0, #0]
   d5c50:	6063      	str	r3, [r4, #4]
   d5c52:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5c54:	b004      	add	sp, #16
   d5c56:	bd70      	pop	{r4, r5, r6, pc}

000d5c58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5c58:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5c5a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5c5c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5c5e:	689b      	ldr	r3, [r3, #8]
   d5c60:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c62:	68a3      	ldr	r3, [r4, #8]
   d5c64:	3b01      	subs	r3, #1
   d5c66:	60a3      	str	r3, [r4, #8]
   d5c68:	b92b      	cbnz	r3, d5c76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5c6a:	6823      	ldr	r3, [r4, #0]
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5c74:	4718      	bx	r3
   d5c76:	bd10      	pop	{r4, pc}

000d5c78 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5c78:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5c7a:	4604      	mov	r4, r0
   d5c7c:	694d      	ldr	r5, [r1, #20]
   d5c7e:	4b05      	ldr	r3, [pc, #20]	; (d5c94 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5c80:	f844 3b04 	str.w	r3, [r4], #4
   d5c84:	358c      	adds	r5, #140	; 0x8c
   d5c86:	4606      	mov	r6, r0
   d5c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c8c:	682b      	ldr	r3, [r5, #0]
   d5c8e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5c90:	4630      	mov	r0, r6
   d5c92:	bd70      	pop	{r4, r5, r6, pc}
   d5c94:	000d6a58 	.word	0x000d6a58

000d5c98 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5c98:	b510      	push	{r4, lr}
   d5c9a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5c9c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ca0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5ca4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5ca6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5ca8:	d005      	beq.n	d5cb6 <_ZN9TCPClient4peekEv+0x1e>
   d5caa:	6962      	ldr	r2, [r4, #20]
   d5cac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5cb0:	4413      	add	r3, r2
   d5cb2:	7918      	ldrb	r0, [r3, #4]
   d5cb4:	bd10      	pop	{r4, pc}
   d5cb6:	6803      	ldr	r3, [r0, #0]
   d5cb8:	691b      	ldr	r3, [r3, #16]
   d5cba:	4798      	blx	r3
   d5cbc:	2800      	cmp	r0, #0
   d5cbe:	d1f4      	bne.n	d5caa <_ZN9TCPClient4peekEv+0x12>
   d5cc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5cc4:	bd10      	pop	{r4, pc}

000d5cc6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5cc6:	b510      	push	{r4, lr}
   d5cc8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5cca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5cce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5cd2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5cd4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5cd6:	d008      	beq.n	d5cea <_ZN9TCPClient4readEv+0x24>
   d5cd8:	6962      	ldr	r2, [r4, #20]
   d5cda:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5cde:	1c59      	adds	r1, r3, #1
   d5ce0:	4413      	add	r3, r2
   d5ce2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5ce6:	7918      	ldrb	r0, [r3, #4]
   d5ce8:	bd10      	pop	{r4, pc}
   d5cea:	6803      	ldr	r3, [r0, #0]
   d5cec:	691b      	ldr	r3, [r3, #16]
   d5cee:	4798      	blx	r3
   d5cf0:	2800      	cmp	r0, #0
   d5cf2:	d1f1      	bne.n	d5cd8 <_ZN9TCPClient4readEv+0x12>
   d5cf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cfc:	6943      	ldr	r3, [r0, #20]
   d5cfe:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5d00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d08:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d0a:	4605      	mov	r5, r0
   d5d0c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5d0e:	d106      	bne.n	d5d1e <_ZN9TCPClient4readEPhj+0x24>
   d5d10:	6803      	ldr	r3, [r0, #0]
   d5d12:	691b      	ldr	r3, [r3, #16]
   d5d14:	4798      	blx	r3
   d5d16:	b910      	cbnz	r0, d5d1e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5d18:	f04f 34ff 	mov.w	r4, #4294967295
   d5d1c:	e014      	b.n	d5d48 <_ZN9TCPClient4readEPhj+0x4e>
   d5d1e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5d20:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5d24:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5d28:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5d2a:	42bc      	cmp	r4, r7
   d5d2c:	bf28      	it	cs
   d5d2e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5d30:	4419      	add	r1, r3
   d5d32:	4622      	mov	r2, r4
   d5d34:	3104      	adds	r1, #4
   d5d36:	4630      	mov	r0, r6
   d5d38:	f000 fc12 	bl	d6560 <memcpy>
   d5d3c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5d3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5d42:	4423      	add	r3, r4
   d5d44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5d48:	4620      	mov	r0, r4
   d5d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d4c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d50:	4698      	mov	r8, r3
    stop();
   d5d52:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d54:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d58:	460d      	mov	r5, r1
   d5d5a:	4606      	mov	r6, r0
   d5d5c:	4617      	mov	r7, r2
    stop();
   d5d5e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5d60:	ab12      	add	r3, sp, #72	; 0x48
   d5d62:	2400      	movs	r4, #0
   d5d64:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5d68:	4622      	mov	r2, r4
   d5d6a:	4621      	mov	r1, r4
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f7fe fe5f 	bl	d4a30 <netdb_getaddrinfo>
   d5d72:	4681      	mov	r9, r0
   d5d74:	2800      	cmp	r0, #0
   d5d76:	d13d      	bne.n	d5df4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5d78:	9b00      	ldr	r3, [sp, #0]
   d5d7a:	2b00      	cmp	r3, #0
   d5d7c:	d056      	beq.n	d5e2c <_ZN9TCPClient7connectEPKctm+0xe0>
   d5d7e:	695b      	ldr	r3, [r3, #20]
   d5d80:	2b00      	cmp	r3, #0
   d5d82:	d053      	beq.n	d5e2c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d5d84:	a806      	add	r0, sp, #24
   d5d86:	f7ff fc99 	bl	d56bc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5d8a:	9b00      	ldr	r3, [sp, #0]
   d5d8c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5d8e:	7863      	ldrb	r3, [r4, #1]
   d5d90:	2b02      	cmp	r3, #2
   d5d92:	d101      	bne.n	d5d98 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5d94:	1d21      	adds	r1, r4, #4
   d5d96:	e013      	b.n	d5dc0 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5d98:	2b0a      	cmp	r3, #10
   d5d9a:	d114      	bne.n	d5dc6 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5d9c:	2211      	movs	r2, #17
   d5d9e:	4649      	mov	r1, r9
   d5da0:	a801      	add	r0, sp, #4
   d5da2:	f000 fbe8 	bl	d6576 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5da6:	68a3      	ldr	r3, [r4, #8]
   d5da8:	bb33      	cbnz	r3, d5df8 <_ZN9TCPClient7connectEPKctm+0xac>
   d5daa:	68e3      	ldr	r3, [r4, #12]
   d5dac:	bb23      	cbnz	r3, d5df8 <_ZN9TCPClient7connectEPKctm+0xac>
   d5dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5db2:	6925      	ldr	r5, [r4, #16]
   d5db4:	f7fe febc 	bl	d4b30 <inet_htonl>
   d5db8:	4285      	cmp	r5, r0
   d5dba:	d11d      	bne.n	d5df8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5dbc:	f104 0114 	add.w	r1, r4, #20
   d5dc0:	a806      	add	r0, sp, #24
   d5dc2:	f7ff fcbe 	bl	d5742 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5dc6:	a806      	add	r0, sp, #24
   d5dc8:	f7ff fc98 	bl	d56fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5dcc:	2800      	cmp	r0, #0
   d5dce:	d02d      	beq.n	d5e2c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d5dd0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5dd2:	ad07      	add	r5, sp, #28
   d5dd4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5dd8:	4b18      	ldr	r3, [pc, #96]	; (d5e3c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d5dda:	930c      	str	r3, [sp, #48]	; 0x30
   d5ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dde:	ac0d      	add	r4, sp, #52	; 0x34
   d5de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5de2:	682b      	ldr	r3, [r5, #0]
   d5de4:	7023      	strb	r3, [r4, #0]
   d5de6:	463a      	mov	r2, r7
   d5de8:	4643      	mov	r3, r8
   d5dea:	a90c      	add	r1, sp, #48	; 0x30
   d5dec:	4630      	mov	r0, r6
   d5dee:	47c8      	blx	r9
   d5df0:	4681      	mov	r9, r0
   d5df2:	e01b      	b.n	d5e2c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5df4:	46a1      	mov	r9, r4
   d5df6:	e019      	b.n	d5e2c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5df8:	f104 0308 	add.w	r3, r4, #8
   d5dfc:	ad01      	add	r5, sp, #4
   d5dfe:	3418      	adds	r4, #24
   d5e00:	6818      	ldr	r0, [r3, #0]
   d5e02:	6859      	ldr	r1, [r3, #4]
   d5e04:	462a      	mov	r2, r5
   d5e06:	c203      	stmia	r2!, {r0, r1}
   d5e08:	3308      	adds	r3, #8
   d5e0a:	42a3      	cmp	r3, r4
   d5e0c:	4615      	mov	r5, r2
   d5e0e:	d1f7      	bne.n	d5e00 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d5e10:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5e12:	a901      	add	r1, sp, #4
   d5e14:	a80c      	add	r0, sp, #48	; 0x30
   d5e16:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5e18:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5e1c:	f7ff fc5c 	bl	d56d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e22:	ac07      	add	r4, sp, #28
   d5e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e26:	682b      	ldr	r3, [r5, #0]
   d5e28:	7023      	strb	r3, [r4, #0]
   d5e2a:	e7cc      	b.n	d5dc6 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5e2c:	9800      	ldr	r0, [sp, #0]
   d5e2e:	f7fe fdf7 	bl	d4a20 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d5e32:	4648      	mov	r0, r9
   d5e34:	b013      	add	sp, #76	; 0x4c
   d5e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e3a:	bf00      	nop
   d5e3c:	000d6a58 	.word	0x000d6a58

000d5e40 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5e40:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5e42:	2300      	movs	r3, #0
   d5e44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5e48:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5e4a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d5e4e:	4770      	bx	lr

000d5e50 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e54:	461e      	mov	r6, r3
    stop();
   d5e56:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e58:	460c      	mov	r4, r1
   d5e5a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e5e:	4605      	mov	r5, r0
   d5e60:	4617      	mov	r7, r2
    stop();
   d5e62:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5e64:	7d23      	ldrb	r3, [r4, #20]
   d5e66:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5e6a:	2b04      	cmp	r3, #4
   d5e6c:	bf0c      	ite	eq
   d5e6e:	2002      	moveq	r0, #2
   d5e70:	200a      	movne	r0, #10
   d5e72:	2206      	movs	r2, #6
   d5e74:	2101      	movs	r1, #1
   d5e76:	f7fe fecb 	bl	d4c10 <sock_socket>
   d5e7a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5e7e:	696b      	ldr	r3, [r5, #20]
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	2b00      	cmp	r3, #0
   d5e84:	db18      	blt.n	d5eb8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d5e86:	4628      	mov	r0, r5
   d5e88:	f7ff ffda 	bl	d5e40 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5e8c:	b1d6      	cbz	r6, d5ec4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d5e8e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e90:	a903      	add	r1, sp, #12
   d5e92:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5e94:	9303      	str	r3, [sp, #12]
   d5e96:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5e9a:	f7fe fde1 	bl	d4a60 <if_index_to_name>
   d5e9e:	b958      	cbnz	r0, d5eb8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5ea0:	6968      	ldr	r0, [r5, #20]
   d5ea2:	2306      	movs	r3, #6
   d5ea4:	9300      	str	r3, [sp, #0]
   d5ea6:	f241 020b 	movw	r2, #4107	; 0x100b
   d5eaa:	ab03      	add	r3, sp, #12
   d5eac:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5eb0:	6800      	ldr	r0, [r0, #0]
   d5eb2:	f7fe fe85 	bl	d4bc0 <sock_setsockopt>
   d5eb6:	b128      	cbz	r0, d5ec4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5eb8:	682b      	ldr	r3, [r5, #0]
   d5eba:	4628      	mov	r0, r5
   d5ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5ebe:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5ec0:	4798      	blx	r3
   d5ec2:	e03b      	b.n	d5f3c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5ec4:	261c      	movs	r6, #28
   d5ec6:	4632      	mov	r2, r6
   d5ec8:	2100      	movs	r1, #0
   d5eca:	a803      	add	r0, sp, #12
   d5ecc:	f000 fb53 	bl	d6576 <memset>
    if (ip.version() == 4) {
   d5ed0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5ed2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5ed6:	2b04      	cmp	r3, #4
   d5ed8:	d10c      	bne.n	d5ef4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5eda:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5edc:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5ede:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5ee2:	f7fe fe2d 	bl	d4b40 <inet_htons>
   d5ee6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5eea:	6860      	ldr	r0, [r4, #4]
   d5eec:	f7fe fe20 	bl	d4b30 <inet_htonl>
   d5ef0:	9004      	str	r0, [sp, #16]
   d5ef2:	e013      	b.n	d5f1c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5ef4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5ef6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5ef8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5efc:	f7fe fe20 	bl	d4b40 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5f00:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5f02:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5f06:	1d23      	adds	r3, r4, #4
   d5f08:	f104 0714 	add.w	r7, r4, #20
   d5f0c:	6818      	ldr	r0, [r3, #0]
   d5f0e:	6859      	ldr	r1, [r3, #4]
   d5f10:	4632      	mov	r2, r6
   d5f12:	c203      	stmia	r2!, {r0, r1}
   d5f14:	3308      	adds	r3, #8
   d5f16:	42bb      	cmp	r3, r7
   d5f18:	4616      	mov	r6, r2
   d5f1a:	d1f7      	bne.n	d5f0c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5f1c:	696b      	ldr	r3, [r5, #20]
   d5f1e:	221c      	movs	r2, #28
   d5f20:	a903      	add	r1, sp, #12
   d5f22:	6818      	ldr	r0, [r3, #0]
   d5f24:	f7fe fe5c 	bl	d4be0 <sock_connect>
   d5f28:	2800      	cmp	r0, #0
   d5f2a:	d1c5      	bne.n	d5eb8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d5f2c:	3404      	adds	r4, #4
   d5f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5f30:	696d      	ldr	r5, [r5, #20]
   d5f32:	358c      	adds	r5, #140	; 0x8c
   d5f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5f36:	6823      	ldr	r3, [r4, #0]
   d5f38:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d5f3a:	2401      	movs	r4, #1
}
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	b00a      	add	sp, #40	; 0x28
   d5f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f44 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5f44:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5f46:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5f48:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5f4a:	6818      	ldr	r0, [r3, #0]
   d5f4c:	2800      	cmp	r0, #0
   d5f4e:	db01      	blt.n	d5f54 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5f50:	f7fe fe3e 	bl	d4bd0 <sock_close>
   d5f54:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5f56:	f04f 32ff 	mov.w	r2, #4294967295
   d5f5a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f5c:	6960      	ldr	r0, [r4, #20]
   d5f5e:	2211      	movs	r2, #17
   d5f60:	2100      	movs	r1, #0
   d5f62:	308c      	adds	r0, #140	; 0x8c
   d5f64:	f000 fb07 	bl	d6576 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5f68:	4620      	mov	r0, r4
}
   d5f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5f6e:	f7ff bf67 	b.w	d5e40 <_ZN9TCPClient12flush_bufferEv>
	...

000d5f74 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5f74:	b530      	push	{r4, r5, lr}
   d5f76:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5f78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5f7c:	b08b      	sub	sp, #44	; 0x2c
   d5f7e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5f80:	b11b      	cbz	r3, d5f8a <_ZN9TCPClient9availableEv+0x16>
   d5f82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5f86:	429a      	cmp	r2, r3
   d5f88:	d040      	beq.n	d600c <_ZN9TCPClient9availableEv+0x98>
   d5f8a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5f8c:	6818      	ldr	r0, [r3, #0]
   d5f8e:	2800      	cmp	r0, #0
   d5f90:	db3f      	blt.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5f92:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5f96:	2d7f      	cmp	r5, #127	; 0x7f
   d5f98:	d83b      	bhi.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5f9a:	1d19      	adds	r1, r3, #4
   d5f9c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5fa0:	2308      	movs	r3, #8
   d5fa2:	4429      	add	r1, r5
   d5fa4:	f7fe fe24 	bl	d4bf0 <sock_recv>
            if (ret > 0) {
   d5fa8:	2800      	cmp	r0, #0
   d5faa:	dd0c      	ble.n	d5fc6 <_ZN9TCPClient9availableEv+0x52>
   d5fac:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5fae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5fb2:	b90a      	cbnz	r2, d5fb8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5fb4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5fb8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5fba:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5fbe:	4418      	add	r0, r3
   d5fc0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5fc4:	e025      	b.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5fc6:	f7fe ff49 	bl	d4e5c <__errno>
   d5fca:	6803      	ldr	r3, [r0, #0]
   d5fcc:	2b0b      	cmp	r3, #11
   d5fce:	d020      	beq.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
   d5fd0:	f7fe ff44 	bl	d4e5c <__errno>
   d5fd4:	6803      	ldr	r3, [r0, #0]
   d5fd6:	2b0b      	cmp	r3, #11
   d5fd8:	d01b      	beq.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5fda:	2320      	movs	r3, #32
   d5fdc:	2500      	movs	r5, #0
   d5fde:	9302      	str	r3, [sp, #8]
   d5fe0:	9503      	str	r5, [sp, #12]
   d5fe2:	f7fe ff3b 	bl	d4e5c <__errno>
   d5fe6:	6803      	ldr	r3, [r0, #0]
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	4b0e      	ldr	r3, [pc, #56]	; (d6024 <_ZN9TCPClient9availableEv+0xb0>)
   d5fec:	9300      	str	r3, [sp, #0]
   d5fee:	aa02      	add	r2, sp, #8
   d5ff0:	462b      	mov	r3, r5
   d5ff2:	490d      	ldr	r1, [pc, #52]	; (d6028 <_ZN9TCPClient9availableEv+0xb4>)
   d5ff4:	2032      	movs	r0, #50	; 0x32
   d5ff6:	f7fe fe4b 	bl	d4c90 <log_message>
                    sock_close(d_->sock);
   d5ffa:	6963      	ldr	r3, [r4, #20]
   d5ffc:	6818      	ldr	r0, [r3, #0]
   d5ffe:	f7fe fde7 	bl	d4bd0 <sock_close>
   d6002:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6004:	f04f 32ff 	mov.w	r2, #4294967295
   d6008:	601a      	str	r2, [r3, #0]
   d600a:	e002      	b.n	d6012 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d600c:	f7ff ff18 	bl	d5e40 <_ZN9TCPClient12flush_bufferEv>
   d6010:	e7bb      	b.n	d5f8a <_ZN9TCPClient9availableEv+0x16>
   d6012:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6014:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6018:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d601c:	1a18      	subs	r0, r3, r0
}
   d601e:	b00b      	add	sp, #44	; 0x2c
   d6020:	bd30      	pop	{r4, r5, pc}
   d6022:	bf00      	nop
   d6024:	000d6b9b 	.word	0x000d6b9b
   d6028:	000d6b94 	.word	0x000d6b94

000d602c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d602c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d602e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6030:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6032:	6001      	str	r1, [r0, #0]
   d6034:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6038:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d603c:	3088      	adds	r0, #136	; 0x88
   d603e:	f7ff fb3d 	bl	d56bc <_ZN9IPAddressC1Ev>
}
   d6042:	4620      	mov	r0, r4
   d6044:	bd10      	pop	{r4, pc}
	...

000d6048 <_ZN9TCPClientC1Ei>:
   d6048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d604c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d604e:	2300      	movs	r3, #0
   d6050:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6052:	4a14      	ldr	r2, [pc, #80]	; (d60a4 <_ZN9TCPClientC1Ei+0x5c>)
   d6054:	6043      	str	r3, [r0, #4]
   d6056:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6058:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d605a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d605c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d605e:	20a0      	movs	r0, #160	; 0xa0
   d6060:	460e      	mov	r6, r1
   d6062:	f7fe f818 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6066:	4605      	mov	r5, r0
   d6068:	b110      	cbz	r0, d6070 <_ZN9TCPClientC1Ei+0x28>
   d606a:	4631      	mov	r1, r6
   d606c:	f7ff ffde 	bl	d602c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6070:	2014      	movs	r0, #20
   d6072:	f7fe f810 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6076:	4603      	mov	r3, r0
   d6078:	b128      	cbz	r0, d6086 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d607a:	2201      	movs	r2, #1
   d607c:	6042      	str	r2, [r0, #4]
   d607e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6080:	4a09      	ldr	r2, [pc, #36]	; (d60a8 <_ZN9TCPClientC1Ei+0x60>)
   d6082:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6084:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6086:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6088:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d608a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d608c:	b128      	cbz	r0, d609a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d608e:	6843      	ldr	r3, [r0, #4]
   d6090:	3b01      	subs	r3, #1
   d6092:	6043      	str	r3, [r0, #4]
   d6094:	b90b      	cbnz	r3, d609a <_ZN9TCPClientC1Ei+0x52>
   d6096:	f7ff fddf 	bl	d5c58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff fed0 	bl	d5e40 <_ZN9TCPClient12flush_bufferEv>
}
   d60a0:	4620      	mov	r0, r4
   d60a2:	bd70      	pop	{r4, r5, r6, pc}
   d60a4:	000d6b50 	.word	0x000d6b50
   d60a8:	000d6b34 	.word	0x000d6b34

000d60ac <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d60ac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d60ae:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d60b2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d60b4:	f7ff ffc8 	bl	d6048 <_ZN9TCPClientC1Ei>
}
   d60b8:	4620      	mov	r0, r4
   d60ba:	bd10      	pop	{r4, pc}

000d60bc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d60bc:	b510      	push	{r4, lr}
   d60be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d60c0:	6800      	ldr	r0, [r0, #0]
   d60c2:	2800      	cmp	r0, #0
   d60c4:	db01      	blt.n	d60ca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d60c6:	f7fe fd83 	bl	d4bd0 <sock_close>
    }
}
   d60ca:	4620      	mov	r0, r4
   d60cc:	bd10      	pop	{r4, pc}

000d60ce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d60ce:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d60d0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d60d2:	4620      	mov	r0, r4
   d60d4:	f7ff fff2 	bl	d60bc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d60d8:	b124      	cbz	r4, d60e4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d60da:	4620      	mov	r0, r4
   d60dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d60e0:	f7fd bfdb 	b.w	d409a <_ZdlPv>
   d60e4:	bd10      	pop	{r4, pc}

000d60e6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d60e6:	2300      	movs	r3, #0
   d60e8:	461a      	mov	r2, r3
   d60ea:	6840      	ldr	r0, [r0, #4]
   d60ec:	f7fe be16 	b.w	d4d1c <network_connect>

000d60f0 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d60f0:	2200      	movs	r2, #0
   d60f2:	2102      	movs	r1, #2
   d60f4:	6840      	ldr	r0, [r0, #4]
   d60f6:	f7fe be21 	b.w	d4d3c <network_disconnect>

000d60fa <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d60fa:	2200      	movs	r2, #0
   d60fc:	4611      	mov	r1, r2
   d60fe:	6840      	ldr	r0, [r0, #4]
   d6100:	f7fe be14 	b.w	d4d2c <network_connecting>

000d6104 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6104:	2200      	movs	r2, #0
   d6106:	4611      	mov	r1, r2
   d6108:	6840      	ldr	r0, [r0, #4]
   d610a:	f7fe be1f 	b.w	d4d4c <network_ready>

000d610e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d610e:	2300      	movs	r3, #0
   d6110:	461a      	mov	r2, r3
   d6112:	4619      	mov	r1, r3
   d6114:	6840      	ldr	r0, [r0, #4]
   d6116:	f7fe be21 	b.w	d4d5c <network_on>

000d611a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d611a:	2300      	movs	r3, #0
   d611c:	461a      	mov	r2, r3
   d611e:	4619      	mov	r1, r3
   d6120:	6840      	ldr	r0, [r0, #4]
   d6122:	f7fe be23 	b.w	d4d6c <network_off>

000d6126 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6126:	2200      	movs	r2, #0
   d6128:	f081 0101 	eor.w	r1, r1, #1
   d612c:	6840      	ldr	r0, [r0, #4]
   d612e:	f7fe be25 	b.w	d4d7c <network_listen>

000d6132 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6132:	2200      	movs	r2, #0
   d6134:	6840      	ldr	r0, [r0, #4]
   d6136:	f7fe be31 	b.w	d4d9c <network_set_listen_timeout>

000d613a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d613a:	2200      	movs	r2, #0
   d613c:	4611      	mov	r1, r2
   d613e:	6840      	ldr	r0, [r0, #4]
   d6140:	f7fe be34 	b.w	d4dac <network_get_listen_timeout>

000d6144 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6144:	2200      	movs	r2, #0
   d6146:	4611      	mov	r1, r2
   d6148:	6840      	ldr	r0, [r0, #4]
   d614a:	f7fe be1f 	b.w	d4d8c <network_listening>

000d614e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d614e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6152:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6154:	b095      	sub	sp, #84	; 0x54
   d6156:	4616      	mov	r6, r2
   d6158:	460d      	mov	r5, r1
   d615a:	4607      	mov	r7, r0
    IPAddress addr;
   d615c:	f7ff faae 	bl	d56bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6160:	4621      	mov	r1, r4
   d6162:	2220      	movs	r2, #32
   d6164:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6166:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6168:	f000 fa05 	bl	d6576 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d616c:	2340      	movs	r3, #64	; 0x40
   d616e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6170:	4621      	mov	r1, r4
   d6172:	466b      	mov	r3, sp
   d6174:	aa0c      	add	r2, sp, #48	; 0x30
   d6176:	4630      	mov	r0, r6
   d6178:	f7fe fc5a 	bl	d4a30 <netdb_getaddrinfo>
    if (!r) {
   d617c:	4604      	mov	r4, r0
   d617e:	2800      	cmp	r0, #0
   d6180:	d144      	bne.n	d620c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6182:	4602      	mov	r2, r0
   d6184:	2101      	movs	r1, #1
   d6186:	6868      	ldr	r0, [r5, #4]
   d6188:	f7fe fde0 	bl	d4d4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d618c:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d618e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6190:	4622      	mov	r2, r4
   d6192:	6868      	ldr	r0, [r5, #4]
   d6194:	f7fe fdda 	bl	d4d4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6198:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d619a:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d619c:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d619e:	2e00      	cmp	r6, #0
   d61a0:	d034      	beq.n	d620c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61a2:	2900      	cmp	r1, #0
   d61a4:	d132      	bne.n	d620c <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61a6:	6873      	ldr	r3, [r6, #4]
   d61a8:	2b02      	cmp	r3, #2
   d61aa:	d002      	beq.n	d61b2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61ac:	2b0a      	cmp	r3, #10
   d61ae:	d009      	beq.n	d61c4 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61b0:	e02a      	b.n	d6208 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61b2:	f1b8 0f00 	cmp.w	r8, #0
   d61b6:	d027      	beq.n	d6208 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61b8:	6971      	ldr	r1, [r6, #20]
   d61ba:	4638      	mov	r0, r7
   d61bc:	3104      	adds	r1, #4
   d61be:	f7ff fac0 	bl	d5742 <_ZN9IPAddressaSEPKh>
   d61c2:	e020      	b.n	d6206 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61c4:	f1b9 0f00 	cmp.w	r9, #0
   d61c8:	d01e      	beq.n	d6208 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d61ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d61cc:	2211      	movs	r2, #17
   d61ce:	a801      	add	r0, sp, #4
   d61d0:	f000 f9d1 	bl	d6576 <memset>
                    a.v = 6;
   d61d4:	2306      	movs	r3, #6
   d61d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61da:	ad01      	add	r5, sp, #4
   d61dc:	f104 0308 	add.w	r3, r4, #8
   d61e0:	3418      	adds	r4, #24
   d61e2:	6818      	ldr	r0, [r3, #0]
   d61e4:	6859      	ldr	r1, [r3, #4]
   d61e6:	462a      	mov	r2, r5
   d61e8:	c203      	stmia	r2!, {r0, r1}
   d61ea:	3308      	adds	r3, #8
   d61ec:	42a3      	cmp	r3, r4
   d61ee:	4615      	mov	r5, r2
   d61f0:	d1f7      	bne.n	d61e2 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d61f2:	a901      	add	r1, sp, #4
   d61f4:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d61f6:	ad07      	add	r5, sp, #28
   d61f8:	f7ff fa6e 	bl	d56d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d61fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61fe:	1d3c      	adds	r4, r7, #4
   d6200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6202:	682b      	ldr	r3, [r5, #0]
   d6204:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6206:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6208:	69f6      	ldr	r6, [r6, #28]
   d620a:	e7c8      	b.n	d619e <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d620c:	9800      	ldr	r0, [sp, #0]
   d620e:	f7fe fc07 	bl	d4a20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6212:	4638      	mov	r0, r7
   d6214:	b015      	add	sp, #84	; 0x54
   d6216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d621c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d621c:	4b02      	ldr	r3, [pc, #8]	; (d6228 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d621e:	4a03      	ldr	r2, [pc, #12]	; (d622c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6220:	601a      	str	r2, [r3, #0]
   d6222:	2200      	movs	r2, #0
   d6224:	605a      	str	r2, [r3, #4]
   d6226:	4770      	bx	lr
   d6228:	2003e724 	.word	0x2003e724
   d622c:	000d6bb4 	.word	0x000d6bb4

000d6230 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6230:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6232:	4c0c      	ldr	r4, [pc, #48]	; (d6264 <_GLOBAL__sub_I_SPI+0x34>)
   d6234:	4e0c      	ldr	r6, [pc, #48]	; (d6268 <_GLOBAL__sub_I_SPI+0x38>)
   d6236:	4d0d      	ldr	r5, [pc, #52]	; (d626c <_GLOBAL__sub_I_SPI+0x3c>)
   d6238:	2100      	movs	r1, #0
   d623a:	4620      	mov	r0, r4
   d623c:	f7fe fe5c 	bl	d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6240:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6242:	4c0b      	ldr	r4, [pc, #44]	; (d6270 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6244:	4632      	mov	r2, r6
   d6246:	4629      	mov	r1, r5
   d6248:	f000 f814 	bl	d6274 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d624c:	2101      	movs	r1, #1
   d624e:	4620      	mov	r0, r4
   d6250:	f7fe fe52 	bl	d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6254:	4632      	mov	r2, r6
   d6256:	4629      	mov	r1, r5
   d6258:	4620      	mov	r0, r4
   d625a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d625e:	f000 b809 	b.w	d6274 <__aeabi_atexit>
   d6262:	bf00      	nop
   d6264:	2003e72c 	.word	0x2003e72c
   d6268:	2003defc 	.word	0x2003defc
   d626c:	000d4ee9 	.word	0x000d4ee9
   d6270:	2003e73c 	.word	0x2003e73c

000d6274 <__aeabi_atexit>:
   d6274:	460b      	mov	r3, r1
   d6276:	4601      	mov	r1, r0
   d6278:	4618      	mov	r0, r3
   d627a:	f000 b94f 	b.w	d651c <__cxa_atexit>

000d627e <_ZdlPvj>:
   d627e:	f7fd bf0c 	b.w	d409a <_ZdlPv>
	...

000d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6284:	4b18      	ldr	r3, [pc, #96]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6286:	681a      	ldr	r2, [r3, #0]
   d6288:	07d1      	lsls	r1, r2, #31
   d628a:	bf5c      	itt	pl
   d628c:	2201      	movpl	r2, #1
   d628e:	601a      	strpl	r2, [r3, #0]
   d6290:	4b16      	ldr	r3, [pc, #88]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6292:	681a      	ldr	r2, [r3, #0]
   d6294:	07d2      	lsls	r2, r2, #31
   d6296:	bf5c      	itt	pl
   d6298:	2201      	movpl	r2, #1
   d629a:	601a      	strpl	r2, [r3, #0]
   d629c:	4b14      	ldr	r3, [pc, #80]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d629e:	681a      	ldr	r2, [r3, #0]
   d62a0:	07d0      	lsls	r0, r2, #31
   d62a2:	bf5c      	itt	pl
   d62a4:	2201      	movpl	r2, #1
   d62a6:	601a      	strpl	r2, [r3, #0]
   d62a8:	4b12      	ldr	r3, [pc, #72]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62aa:	681a      	ldr	r2, [r3, #0]
   d62ac:	07d1      	lsls	r1, r2, #31
   d62ae:	bf5c      	itt	pl
   d62b0:	2201      	movpl	r2, #1
   d62b2:	601a      	strpl	r2, [r3, #0]
   d62b4:	4b10      	ldr	r3, [pc, #64]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d2      	lsls	r2, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b0e      	ldr	r3, [pc, #56]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d0      	lsls	r0, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4b0c      	ldr	r3, [pc, #48]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62ce:	681a      	ldr	r2, [r3, #0]
   d62d0:	07d1      	lsls	r1, r2, #31
   d62d2:	bf5c      	itt	pl
   d62d4:	2201      	movpl	r2, #1
   d62d6:	601a      	strpl	r2, [r3, #0]
   d62d8:	4b0a      	ldr	r3, [pc, #40]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d62da:	681a      	ldr	r2, [r3, #0]
   d62dc:	07d2      	lsls	r2, r2, #31
   d62de:	bf5c      	itt	pl
   d62e0:	2201      	movpl	r2, #1
   d62e2:	601a      	strpl	r2, [r3, #0]
   d62e4:	4770      	bx	lr
   d62e6:	bf00      	nop
   d62e8:	2003e76c 	.word	0x2003e76c
   d62ec:	2003e768 	.word	0x2003e768
   d62f0:	2003e764 	.word	0x2003e764
   d62f4:	2003e760 	.word	0x2003e760
   d62f8:	2003e75c 	.word	0x2003e75c
   d62fc:	2003e758 	.word	0x2003e758
   d6300:	2003e754 	.word	0x2003e754
   d6304:	2003e750 	.word	0x2003e750

000d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6308:	4b24      	ldr	r3, [pc, #144]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	07d0      	lsls	r0, r2, #31
   d630e:	bf5c      	itt	pl
   d6310:	2201      	movpl	r2, #1
   d6312:	601a      	strpl	r2, [r3, #0]
   d6314:	4b22      	ldr	r3, [pc, #136]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6316:	681a      	ldr	r2, [r3, #0]
   d6318:	07d1      	lsls	r1, r2, #31
   d631a:	bf5c      	itt	pl
   d631c:	2201      	movpl	r2, #1
   d631e:	601a      	strpl	r2, [r3, #0]
   d6320:	4b20      	ldr	r3, [pc, #128]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6322:	681a      	ldr	r2, [r3, #0]
   d6324:	07d2      	lsls	r2, r2, #31
   d6326:	bf5c      	itt	pl
   d6328:	2201      	movpl	r2, #1
   d632a:	601a      	strpl	r2, [r3, #0]
   d632c:	4b1e      	ldr	r3, [pc, #120]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d632e:	681a      	ldr	r2, [r3, #0]
   d6330:	07d0      	lsls	r0, r2, #31
   d6332:	bf5c      	itt	pl
   d6334:	2201      	movpl	r2, #1
   d6336:	601a      	strpl	r2, [r3, #0]
   d6338:	4b1c      	ldr	r3, [pc, #112]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b1a      	ldr	r3, [pc, #104]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b18      	ldr	r3, [pc, #96]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b16      	ldr	r3, [pc, #88]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b14      	ldr	r3, [pc, #80]	; (d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b12      	ldr	r3, [pc, #72]	; (d63c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d0      	lsls	r0, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b10      	ldr	r3, [pc, #64]	; (d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d1      	lsls	r1, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b0e      	ldr	r3, [pc, #56]	; (d63c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d2      	lsls	r2, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4770      	bx	lr
   d639a:	bf00      	nop
   d639c:	2003e79c 	.word	0x2003e79c
   d63a0:	2003e798 	.word	0x2003e798
   d63a4:	2003e794 	.word	0x2003e794
   d63a8:	2003e790 	.word	0x2003e790
   d63ac:	2003e78c 	.word	0x2003e78c
   d63b0:	2003e788 	.word	0x2003e788
   d63b4:	2003e784 	.word	0x2003e784
   d63b8:	2003e780 	.word	0x2003e780
   d63bc:	2003e77c 	.word	0x2003e77c
   d63c0:	2003e778 	.word	0x2003e778
   d63c4:	2003e774 	.word	0x2003e774
   d63c8:	2003e770 	.word	0x2003e770

000d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63cc:	4b24      	ldr	r3, [pc, #144]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	07d0      	lsls	r0, r2, #31
   d63d2:	bf5c      	itt	pl
   d63d4:	2201      	movpl	r2, #1
   d63d6:	601a      	strpl	r2, [r3, #0]
   d63d8:	4b22      	ldr	r3, [pc, #136]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	07d1      	lsls	r1, r2, #31
   d63de:	bf5c      	itt	pl
   d63e0:	2201      	movpl	r2, #1
   d63e2:	601a      	strpl	r2, [r3, #0]
   d63e4:	4b20      	ldr	r3, [pc, #128]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63e6:	681a      	ldr	r2, [r3, #0]
   d63e8:	07d2      	lsls	r2, r2, #31
   d63ea:	bf5c      	itt	pl
   d63ec:	2201      	movpl	r2, #1
   d63ee:	601a      	strpl	r2, [r3, #0]
   d63f0:	4b1e      	ldr	r3, [pc, #120]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	07d0      	lsls	r0, r2, #31
   d63f6:	bf5c      	itt	pl
   d63f8:	2201      	movpl	r2, #1
   d63fa:	601a      	strpl	r2, [r3, #0]
   d63fc:	4b1c      	ldr	r3, [pc, #112]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d1      	lsls	r1, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4b1a      	ldr	r3, [pc, #104]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d2      	lsls	r2, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b18      	ldr	r3, [pc, #96]	; (d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b16      	ldr	r3, [pc, #88]	; (d647c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b14      	ldr	r3, [pc, #80]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b12      	ldr	r3, [pc, #72]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b10      	ldr	r3, [pc, #64]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b0e      	ldr	r3, [pc, #56]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4770      	bx	lr
   d645e:	bf00      	nop
   d6460:	2003e7cc 	.word	0x2003e7cc
   d6464:	2003e7c8 	.word	0x2003e7c8
   d6468:	2003e7c4 	.word	0x2003e7c4
   d646c:	2003e7c0 	.word	0x2003e7c0
   d6470:	2003e7bc 	.word	0x2003e7bc
   d6474:	2003e7b8 	.word	0x2003e7b8
   d6478:	2003e7b4 	.word	0x2003e7b4
   d647c:	2003e7b0 	.word	0x2003e7b0
   d6480:	2003e7ac 	.word	0x2003e7ac
   d6484:	2003e7a8 	.word	0x2003e7a8
   d6488:	2003e7a4 	.word	0x2003e7a4
   d648c:	2003e7a0 	.word	0x2003e7a0

000d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6490:	4b18      	ldr	r3, [pc, #96]	; (d64f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d1      	lsls	r1, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4b16      	ldr	r3, [pc, #88]	; (d64f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d2      	lsls	r2, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4b14      	ldr	r3, [pc, #80]	; (d64fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64aa:	681a      	ldr	r2, [r3, #0]
   d64ac:	07d0      	lsls	r0, r2, #31
   d64ae:	bf5c      	itt	pl
   d64b0:	2201      	movpl	r2, #1
   d64b2:	601a      	strpl	r2, [r3, #0]
   d64b4:	4b12      	ldr	r3, [pc, #72]	; (d6500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d1      	lsls	r1, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b10      	ldr	r3, [pc, #64]	; (d6504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d2      	lsls	r2, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b0e      	ldr	r3, [pc, #56]	; (d6508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d0      	lsls	r0, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b0c      	ldr	r3, [pc, #48]	; (d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d1      	lsls	r1, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b0a      	ldr	r3, [pc, #40]	; (d6510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d2      	lsls	r2, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4770      	bx	lr
   d64f2:	bf00      	nop
   d64f4:	2003e7ec 	.word	0x2003e7ec
   d64f8:	2003e7e8 	.word	0x2003e7e8
   d64fc:	2003e7e4 	.word	0x2003e7e4
   d6500:	2003e7e0 	.word	0x2003e7e0
   d6504:	2003e7dc 	.word	0x2003e7dc
   d6508:	2003e7d8 	.word	0x2003e7d8
   d650c:	2003e7d4 	.word	0x2003e7d4
   d6510:	2003e7d0 	.word	0x2003e7d0

000d6514 <atoi>:
   d6514:	220a      	movs	r2, #10
   d6516:	2100      	movs	r1, #0
   d6518:	f000 b8fe 	b.w	d6718 <strtol>

000d651c <__cxa_atexit>:
   d651c:	b510      	push	{r4, lr}
   d651e:	4c05      	ldr	r4, [pc, #20]	; (d6534 <__cxa_atexit+0x18>)
   d6520:	4613      	mov	r3, r2
   d6522:	b12c      	cbz	r4, d6530 <__cxa_atexit+0x14>
   d6524:	460a      	mov	r2, r1
   d6526:	4601      	mov	r1, r0
   d6528:	2002      	movs	r0, #2
   d652a:	f3af 8000 	nop.w
   d652e:	bd10      	pop	{r4, pc}
   d6530:	4620      	mov	r0, r4
   d6532:	bd10      	pop	{r4, pc}
   d6534:	00000000 	.word	0x00000000

000d6538 <ldiv>:
   d6538:	2900      	cmp	r1, #0
   d653a:	b510      	push	{r4, lr}
   d653c:	fb91 f4f2 	sdiv	r4, r1, r2
   d6540:	fb02 1314 	mls	r3, r2, r4, r1
   d6544:	db04      	blt.n	d6550 <ldiv+0x18>
   d6546:	2b00      	cmp	r3, #0
   d6548:	da07      	bge.n	d655a <ldiv+0x22>
   d654a:	3401      	adds	r4, #1
   d654c:	1a9b      	subs	r3, r3, r2
   d654e:	e004      	b.n	d655a <ldiv+0x22>
   d6550:	2b00      	cmp	r3, #0
   d6552:	bfc4      	itt	gt
   d6554:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d6558:	189b      	addgt	r3, r3, r2
   d655a:	6004      	str	r4, [r0, #0]
   d655c:	6043      	str	r3, [r0, #4]
   d655e:	bd10      	pop	{r4, pc}

000d6560 <memcpy>:
   d6560:	b510      	push	{r4, lr}
   d6562:	1e43      	subs	r3, r0, #1
   d6564:	440a      	add	r2, r1
   d6566:	4291      	cmp	r1, r2
   d6568:	d004      	beq.n	d6574 <memcpy+0x14>
   d656a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d656e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6572:	e7f8      	b.n	d6566 <memcpy+0x6>
   d6574:	bd10      	pop	{r4, pc}

000d6576 <memset>:
   d6576:	4402      	add	r2, r0
   d6578:	4603      	mov	r3, r0
   d657a:	4293      	cmp	r3, r2
   d657c:	d002      	beq.n	d6584 <memset+0xe>
   d657e:	f803 1b01 	strb.w	r1, [r3], #1
   d6582:	e7fa      	b.n	d657a <memset+0x4>
   d6584:	4770      	bx	lr
	...

000d6588 <srand>:
   d6588:	b538      	push	{r3, r4, r5, lr}
   d658a:	4b12      	ldr	r3, [pc, #72]	; (d65d4 <srand+0x4c>)
   d658c:	681c      	ldr	r4, [r3, #0]
   d658e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6590:	4605      	mov	r5, r0
   d6592:	b9d3      	cbnz	r3, d65ca <srand+0x42>
   d6594:	2018      	movs	r0, #24
   d6596:	f7fe fc49 	bl	d4e2c <malloc>
   d659a:	f243 330e 	movw	r3, #13070	; 0x330e
   d659e:	63a0      	str	r0, [r4, #56]	; 0x38
   d65a0:	8003      	strh	r3, [r0, #0]
   d65a2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d65a6:	8043      	strh	r3, [r0, #2]
   d65a8:	f241 2334 	movw	r3, #4660	; 0x1234
   d65ac:	8083      	strh	r3, [r0, #4]
   d65ae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d65b2:	80c3      	strh	r3, [r0, #6]
   d65b4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d65b8:	8103      	strh	r3, [r0, #8]
   d65ba:	2305      	movs	r3, #5
   d65bc:	8143      	strh	r3, [r0, #10]
   d65be:	230b      	movs	r3, #11
   d65c0:	8183      	strh	r3, [r0, #12]
   d65c2:	2201      	movs	r2, #1
   d65c4:	2300      	movs	r3, #0
   d65c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d65ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d65cc:	2200      	movs	r2, #0
   d65ce:	611d      	str	r5, [r3, #16]
   d65d0:	615a      	str	r2, [r3, #20]
   d65d2:	bd38      	pop	{r3, r4, r5, pc}
   d65d4:	2003def8 	.word	0x2003def8

000d65d8 <strcmp>:
   d65d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d65dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d65e0:	2a01      	cmp	r2, #1
   d65e2:	bf28      	it	cs
   d65e4:	429a      	cmpcs	r2, r3
   d65e6:	d0f7      	beq.n	d65d8 <strcmp>
   d65e8:	1ad0      	subs	r0, r2, r3
   d65ea:	4770      	bx	lr

000d65ec <strcpy>:
   d65ec:	4603      	mov	r3, r0
   d65ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d65f2:	f803 2b01 	strb.w	r2, [r3], #1
   d65f6:	2a00      	cmp	r2, #0
   d65f8:	d1f9      	bne.n	d65ee <strcpy+0x2>
   d65fa:	4770      	bx	lr

000d65fc <strlen>:
   d65fc:	4603      	mov	r3, r0
   d65fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6602:	2a00      	cmp	r2, #0
   d6604:	d1fb      	bne.n	d65fe <strlen+0x2>
   d6606:	1a18      	subs	r0, r3, r0
   d6608:	3801      	subs	r0, #1
   d660a:	4770      	bx	lr

000d660c <_strtol_r>:
   d660c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6610:	4680      	mov	r8, r0
   d6612:	4840      	ldr	r0, [pc, #256]	; (d6714 <_strtol_r+0x108>)
   d6614:	f8d0 9000 	ldr.w	r9, [r0]
   d6618:	460f      	mov	r7, r1
   d661a:	463d      	mov	r5, r7
   d661c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6620:	eb09 0004 	add.w	r0, r9, r4
   d6624:	7840      	ldrb	r0, [r0, #1]
   d6626:	f000 0008 	and.w	r0, r0, #8
   d662a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d662e:	b108      	cbz	r0, d6634 <_strtol_r+0x28>
   d6630:	462f      	mov	r7, r5
   d6632:	e7f2      	b.n	d661a <_strtol_r+0xe>
   d6634:	2c2d      	cmp	r4, #45	; 0x2d
   d6636:	d103      	bne.n	d6640 <_strtol_r+0x34>
   d6638:	1cbd      	adds	r5, r7, #2
   d663a:	787c      	ldrb	r4, [r7, #1]
   d663c:	2601      	movs	r6, #1
   d663e:	e003      	b.n	d6648 <_strtol_r+0x3c>
   d6640:	2c2b      	cmp	r4, #43	; 0x2b
   d6642:	bf04      	itt	eq
   d6644:	787c      	ldrbeq	r4, [r7, #1]
   d6646:	1cbd      	addeq	r5, r7, #2
   d6648:	b113      	cbz	r3, d6650 <_strtol_r+0x44>
   d664a:	2b10      	cmp	r3, #16
   d664c:	d10a      	bne.n	d6664 <_strtol_r+0x58>
   d664e:	e05b      	b.n	d6708 <_strtol_r+0xfc>
   d6650:	2c30      	cmp	r4, #48	; 0x30
   d6652:	d157      	bne.n	d6704 <_strtol_r+0xf8>
   d6654:	7828      	ldrb	r0, [r5, #0]
   d6656:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d665a:	2858      	cmp	r0, #88	; 0x58
   d665c:	d14d      	bne.n	d66fa <_strtol_r+0xee>
   d665e:	786c      	ldrb	r4, [r5, #1]
   d6660:	2310      	movs	r3, #16
   d6662:	3502      	adds	r5, #2
   d6664:	2e00      	cmp	r6, #0
   d6666:	bf14      	ite	ne
   d6668:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d666c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6670:	2700      	movs	r7, #0
   d6672:	fbbc faf3 	udiv	sl, ip, r3
   d6676:	4638      	mov	r0, r7
   d6678:	fb03 cc1a 	mls	ip, r3, sl, ip
   d667c:	eb09 0e04 	add.w	lr, r9, r4
   d6680:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6684:	f01e 0f04 	tst.w	lr, #4
   d6688:	d001      	beq.n	d668e <_strtol_r+0x82>
   d668a:	3c30      	subs	r4, #48	; 0x30
   d668c:	e00b      	b.n	d66a6 <_strtol_r+0x9a>
   d668e:	f01e 0e03 	ands.w	lr, lr, #3
   d6692:	d01b      	beq.n	d66cc <_strtol_r+0xc0>
   d6694:	f1be 0f01 	cmp.w	lr, #1
   d6698:	bf0c      	ite	eq
   d669a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d669e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d66a2:	ebce 0404 	rsb	r4, lr, r4
   d66a6:	42a3      	cmp	r3, r4
   d66a8:	dd10      	ble.n	d66cc <_strtol_r+0xc0>
   d66aa:	f1b7 3fff 	cmp.w	r7, #4294967295
   d66ae:	d00a      	beq.n	d66c6 <_strtol_r+0xba>
   d66b0:	4550      	cmp	r0, sl
   d66b2:	d806      	bhi.n	d66c2 <_strtol_r+0xb6>
   d66b4:	d101      	bne.n	d66ba <_strtol_r+0xae>
   d66b6:	4564      	cmp	r4, ip
   d66b8:	dc03      	bgt.n	d66c2 <_strtol_r+0xb6>
   d66ba:	fb03 4000 	mla	r0, r3, r0, r4
   d66be:	2701      	movs	r7, #1
   d66c0:	e001      	b.n	d66c6 <_strtol_r+0xba>
   d66c2:	f04f 37ff 	mov.w	r7, #4294967295
   d66c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d66ca:	e7d7      	b.n	d667c <_strtol_r+0x70>
   d66cc:	1c7b      	adds	r3, r7, #1
   d66ce:	d10c      	bne.n	d66ea <_strtol_r+0xde>
   d66d0:	2e00      	cmp	r6, #0
   d66d2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d66d6:	bf14      	ite	ne
   d66d8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d66dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d66e0:	f8c8 3000 	str.w	r3, [r8]
   d66e4:	b92a      	cbnz	r2, d66f2 <_strtol_r+0xe6>
   d66e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66ea:	b106      	cbz	r6, d66ee <_strtol_r+0xe2>
   d66ec:	4240      	negs	r0, r0
   d66ee:	b172      	cbz	r2, d670e <_strtol_r+0x102>
   d66f0:	b107      	cbz	r7, d66f4 <_strtol_r+0xe8>
   d66f2:	1e69      	subs	r1, r5, #1
   d66f4:	6011      	str	r1, [r2, #0]
   d66f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66fa:	2430      	movs	r4, #48	; 0x30
   d66fc:	2b00      	cmp	r3, #0
   d66fe:	d1b1      	bne.n	d6664 <_strtol_r+0x58>
   d6700:	2308      	movs	r3, #8
   d6702:	e7af      	b.n	d6664 <_strtol_r+0x58>
   d6704:	230a      	movs	r3, #10
   d6706:	e7ad      	b.n	d6664 <_strtol_r+0x58>
   d6708:	2c30      	cmp	r4, #48	; 0x30
   d670a:	d0a3      	beq.n	d6654 <_strtol_r+0x48>
   d670c:	e7aa      	b.n	d6664 <_strtol_r+0x58>
   d670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6712:	bf00      	nop
   d6714:	2003de94 	.word	0x2003de94

000d6718 <strtol>:
   d6718:	4613      	mov	r3, r2
   d671a:	460a      	mov	r2, r1
   d671c:	4601      	mov	r1, r0
   d671e:	4802      	ldr	r0, [pc, #8]	; (d6728 <strtol+0x10>)
   d6720:	6800      	ldr	r0, [r0, #0]
   d6722:	f7ff bf73 	b.w	d660c <_strtol_r>
   d6726:	bf00      	nop
   d6728:	2003def8 	.word	0x2003def8

000d672c <dynalib_user>:
   d672c:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d673c:	00000000 6c707041 74616369 3e6e6f69     ....Application>
   d674c:	61745309 6f207472 6f4c2066 002e706f     .Start of Loop..
   d675c:	752e7377 62756373 632e6465 2f006d6f     ws.uscubed.com./
   d676c:	74726150 656c6369 65726944 612e7463     ParticleDirect.a
   d677c:	00787073 312c372c 4547003b 70410054     spx.,7,1;.GET.Ap
   d678c:	63696c70 6f697461 52093e6e 6f707365     plication>.Respo
   d679c:	2065736e 74617473 203a7375 70704100     nse status: .App
   d67ac:	6163696c 6e6f6974 5448093e 52205054     lication>.HTTP R
   d67bc:	6f707365 2065736e 79646f42 2c00203a     esponse Body: .,
   d67cc:	74617453 002c7375 3a69732c 6f742c00     Status,.,si:.,to
   d67dc:	762c003a 003a7265 72617453 676e6974     :.,ver:.Starting
   d67ec:	61745300 20737574 7373654d 00656761     .Status Message.
   d67fc:	65656c53 65522070 746c7573 4200203a     Sleep Result: .B
   d680c:	69746f6f 203a676e 6e655300 61442064     ooting: .Send Da
   d681c:	53006174 7065656c 61674120 00206e69     ta.Sleep Again .
   d682c:	63736944 656e6e6f 6e697463 2e2e2067     Disconnecting ..
   d683c:	2e2e2e2e 6f6f4700 694e2064 00746867     .....Good Night.
   d684c:	6f636552 63656e6e 676e6974 2e2e2e2e     Reconnecting....
   d685c:	2e2e2e2e 6f4e002e 6c616d72 656c5320     ......Normal Sle
   d686c:	00207065 2e302e31 6f430030 6e65746e     ep .1.0.0.Conten
   d687c:	79542d74 61006570 696c7070 69746163     t-Type.applicati
   d688c:	6a2f6e6f 006e6f73 68747541 7a69726f     on/json.Authoriz
   d689c:	6f697461 6142006e 20636973 6a4e5779     ation.Basic yWNj
   d68ac:	7a4e585a 54566c4d 346f7a4d 306b7a4d     ZXNzMlVTMzo4Mzk0
   d68bc:	6d646b52 3d3d7762 63634100 00747065     Rkdmbw==.Accept.
   d68cc:	002a2f2a 54544820 2e312f50 000a0d30     */*. HTTP/1.0...
   d68dc:	736f6c63 6f430065 63656e6e 6e6f6974     close.Connection
   d68ec:	534f4800 6f430054 6e65746e 654c2d74     .HOST.Content-Le
   d68fc:	6874676e 534f5000 00000054              ngth.POST...

000d6908 <_ZTVN5spark13EthernetClassE>:
	...
   d6910:	000d4ecb 000d4ec1 000d4eb7 000d4ead     .N...N...N...N..
   d6920:	000d4ea1 000d4e95 000d4e89 000d4e81     .N...N...N...N..
   d6930:	000d4e77 000d4e6d 000d614f              wN..mN..Oa..

000d693c <_ZTV8SPIClass>:
	...
   d6944:	000d4ee9 000d4eeb 64756162 72655300     .N...N..baud.Ser
   d6954:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d6964:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d6974:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d6984:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d6994:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d69a4:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d69b4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d69c4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d69d4:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d69e4:	69617465 3d20736c 00660020 66006e6c     etails = .f.ln.f
   d69f4:	6f63006e 64006564 69617465 6f6e006c     n.code.detail.no
   d6a04:	7400656e 65636172 666e6900 6177006f     ne.trace.info.wa
   d6a14:	65006e72 726f7272 6e617000 61006369     rn.error.panic.a
   d6a24:	5a006c6c 302b2500 253a6433 00753230     ll.Z.%+03d:%02u.
   d6a34:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d6a44:	007a2553 74637361 00656d69              S%z.asctime.

000d6a50 <_ZTV9IPAddress>:
	...
   d6a58:	000d5659 000d5649 000d564b              YV..IV..KV..

000d6a64 <_ZTV9USBSerial>:
	...
   d6a6c:	000d575d 000d57ad 000d57bb 000d5355     ]W...W...W..US..
   d6a7c:	000d5799 000d575f 000d5775 000d57a7     .W.._W..uW...W..
   d6a8c:	000d578b 000d5759                       .W..YW..

000d6a94 <_ZTVN5spark13CellularClassE>:
	...
   d6a9c:	000d58bd 000d58b3 000d58a9 000d40dd     .X...X...X...@..
   d6aac:	000d589d 000d5891 000d5885 000d587d     .X...X...X..}X..
   d6abc:	000d5873 000d5869 000d614f              sX..iX..Oa..

000d6ac8 <_ZTV11USARTSerial>:
	...
   d6ad0:	000d58f9 000d5949 000d5957 000d5355     .X..IY..WY..US..
   d6ae0:	000d590d 000d592f 000d591b 000d5943     .Y../Y...Y..CY..
   d6af0:	000d58fb 000d58ff                       .X...X..

000d6af8 <_ZTVN5spark9MeshClassE>:
	...
   d6b00:	000d5a53 000d5a49 000d5a3f 000d5a35     SZ..IZ..?Z..5Z..
   d6b10:	000d5a29 000d5a1d 000d5a11 000d5a09     )Z...Z...Z...Z..
   d6b20:	000d59ff 000d59f5 000d614f              .Y...Y..Oa..

000d6b2c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6b34:	000d5be1 000d5be7 000d60cf 000d5bf5     .[...[...`...[..
   d6b44:	000d5be3                                .[..

000d6b48 <_ZTV9TCPClient>:
	...
   d6b50:	000d40e9 000d4129 000d5b59 000d5b73     .@..)A..Y[..s[..
   d6b60:	000d5f75 000d5cc7 000d5c99 000d5b9d     u_...\...\...[..
   d6b70:	000d5e51 000d5d4d 000d5cfb 000d5f45     Q^..M]...\..E_..
   d6b80:	000d5b9f 000d5bd7 000d5b85 000d5bf9     .[...[...[...[..
   d6b90:	000d5c79 69726977 7200676e 20766365     y\..wiring.recv 
   d6ba0:	6f727265 203d2072 00006425              error = %d..

000d6bac <_ZTVN5spark12NetworkClassE>:
	...
   d6bb4:	000d60e7 000d60f1 000d60fb 000d6105     .`...`...`...a..
   d6bc4:	000d610f 000d611b 000d6127 000d6133     .a...a..'a..3a..
   d6bd4:	000d613b 000d6145 000d614f              ;a..Ea..Oa..

000d6be0 <_ctype_>:
   d6be0:	20202000 20202020 28282020 20282828     .         ((((( 
   d6bf0:	20202020 20202020 20202020 20202020                     
   d6c00:	10108820 10101010 10101010 10101010      ...............
   d6c10:	04040410 04040404 10040404 10101010     ................
   d6c20:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6c30:	01010101 01010101 01010101 10101010     ................
   d6c40:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6c50:	02020202 02020202 02020202 10101010     ................
   d6c60:	00000020 00000000 00000000 00000000      ...............
	...

000d6ce4 <__sf_fake_stdin>:
	...

000d6d04 <__sf_fake_stdout>:
	...

000d6d24 <__sf_fake_stderr>:
	...
   d6d44:	00000043                                         C.

000d6d46 <link_const_variable_data_end>:
	...

000d6d48 <link_constructors_location>:
   d6d48:	000d46cd 	.word	0x000d46cd
   d6d4c:	000d4ed5 	.word	0x000d4ed5
   d6d50:	000d4fbd 	.word	0x000d4fbd
   d6d54:	000d5345 	.word	0x000d5345
   d6d58:	000d54a5 	.word	0x000d54a5
   d6d5c:	000d5521 	.word	0x000d5521
   d6d60:	000d5559 	.word	0x000d5559
   d6d64:	000d58c9 	.word	0x000d58c9
   d6d68:	000d5b09 	.word	0x000d5b09
   d6d6c:	000d621d 	.word	0x000d621d
   d6d70:	000d6231 	.word	0x000d6231
   d6d74:	000d6285 	.word	0x000d6285
   d6d78:	000d6309 	.word	0x000d6309
   d6d7c:	000d63cd 	.word	0x000d63cd
   d6d80:	000d6491 	.word	0x000d6491

000d6d84 <link_constructors_end>:
	...
